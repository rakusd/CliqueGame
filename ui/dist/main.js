!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=145)}([function(e,t,n){"use strict";e.exports=n(331)},function(e,t,n){var r=n(5),i=n(11),a=n(18),o=n(15),l=n(21),u=function(e,t,n){var s,c,f,d,h=e&u.F,p=e&u.G,v=e&u.S,g=e&u.P,y=e&u.B,m=p?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=p?i:i[t]||(i[t]={}),x=b.prototype||(b.prototype={});for(s in p&&(n=t),n)f=((c=!h&&m&&void 0!==m[s])?m:n)[s],d=y&&c?l(f,r):g&&"function"==typeof f?l(Function.call,f):f,m&&o(m,s,f,e&u.U),b[s]!=f&&a(b,s,d),g&&x[s]!=f&&(x[s]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var o=i.apply(null,r);o&&e.push(o)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(r=function(){return i}.apply(t,[]))||(e.exports=r)}()},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(8);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(56)("wks"),i=n(34),a=n(5).Symbol,o="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=o&&a[e]||(o?a:i)("Symbol."+e))}).store=r},function(e,t,n){var r=n(23),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(6)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(7),i=n(102),a=n(31),o=Object.defineProperty;t.f=n(12)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),i)try{return o(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(28);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(5),i=n(18),a=n(17),o=n(34)("src"),l=n(150),u=(""+l).split("toString");n(11).inspectSource=function(e){return l.call(e)},(e.exports=function(e,t,n,l){var s="function"==typeof n;s&&(a(n,"name")||i(n,"name",t)),e[t]!==n&&(s&&(a(n,o)||i(n,o,e[t]?""+e[t]:u.join(String(t)))),e===r?e[t]=n:l?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[o]||l.call(this)}))},function(e,t,n){var r=n(1),i=n(6),a=n(28),o=/"/g,l=function(e,t,n,r){var i=String(a(e)),l="<"+t;return""!==n&&(l+=" "+n+'="'+String(r).replace(o,"&quot;")+'"'),l+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(l),r(r.P+r.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(13),i=n(33);e.exports=n(12)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(52),i=n(28);e.exports=function(e){return r(i(e))}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},function(e,t,n){var r=n(22);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(53),i=n(33),a=n(19),o=n(31),l=n(17),u=n(102),s=Object.getOwnPropertyDescriptor;t.f=n(12)?s:function(e,t){if(e=a(e),t=o(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return i(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(1),i=n(11),a=n(6);e.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],o={};o[e]=t(n),r(r.S+r.F*a((function(){n(1)})),"Object",o)}},function(e,t,n){var r=n(21),i=n(52),a=n(14),o=n(10),l=n(118);e.exports=function(e,t){var n=1==e,u=2==e,s=3==e,c=4==e,f=6==e,d=5==e||f,h=t||l;return function(t,l,p){for(var v,g,y=a(t),m=i(y),b=r(l,p,3),x=o(m.length),w=0,E=n?h(t,x):u?h(t,0):void 0;x>w;w++)if((d||w in m)&&(g=b(v=m[w],w,y),e))if(n)E[w]=g;else if(g)switch(e){case 3:return!0;case 5:return v;case 6:return w;case 2:E.push(v)}else if(c)return!1;return f?-1:s||c?c:E}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";if(n(12)){var r=n(35),i=n(5),a=n(6),o=n(1),l=n(67),u=n(94),s=n(21),c=n(50),f=n(33),d=n(18),h=n(51),p=n(23),v=n(10),g=n(129),y=n(37),m=n(31),b=n(17),x=n(54),w=n(8),E=n(14),k=n(86),S=n(38),T=n(40),P=n(39).f,C=n(88),_=n(34),M=n(9),O=n(26),N=n(57),D=n(55),I=n(90),A=n(48),L=n(60),B=n(49),z=n(89),R=n(120),F=n(13),j=n(24),V=F.f,q=j.f,W=i.RangeError,Y=i.TypeError,U=i.Uint8Array,X=Array.prototype,H=u.ArrayBuffer,G=u.DataView,K=O(0),$=O(2),Q=O(3),Z=O(4),J=O(5),ee=O(6),te=N(!0),ne=N(!1),re=I.values,ie=I.keys,ae=I.entries,oe=X.lastIndexOf,le=X.reduce,ue=X.reduceRight,se=X.join,ce=X.sort,fe=X.slice,de=X.toString,he=X.toLocaleString,pe=M("iterator"),ve=M("toStringTag"),ge=_("typed_constructor"),ye=_("def_constructor"),me=l.CONSTR,be=l.TYPED,xe=l.VIEW,we=O(1,(function(e,t){return Pe(D(e,e[ye]),t)})),Ee=a((function(){return 1===new U(new Uint16Array([1]).buffer)[0]})),ke=!!U&&!!U.prototype.set&&a((function(){new U(1).set({})})),Se=function(e,t){var n=p(e);if(n<0||n%t)throw W("Wrong offset!");return n},Te=function(e){if(w(e)&&be in e)return e;throw Y(e+" is not a typed array!")},Pe=function(e,t){if(!w(e)||!(ge in e))throw Y("It is not a typed array constructor!");return new e(t)},Ce=function(e,t){return _e(D(e,e[ye]),t)},_e=function(e,t){for(var n=0,r=t.length,i=Pe(e,r);r>n;)i[n]=t[n++];return i},Me=function(e,t,n){V(e,t,{get:function(){return this._d[n]}})},Oe=function(e){var t,n,r,i,a,o,l=E(e),u=arguments.length,c=u>1?arguments[1]:void 0,f=void 0!==c,d=C(l);if(null!=d&&!k(d)){for(o=d.call(l),r=[],t=0;!(a=o.next()).done;t++)r.push(a.value);l=r}for(f&&u>2&&(c=s(c,arguments[2],2)),t=0,n=v(l.length),i=Pe(this,n);n>t;t++)i[t]=f?c(l[t],t):l[t];return i},Ne=function(){for(var e=0,t=arguments.length,n=Pe(this,t);t>e;)n[e]=arguments[e++];return n},De=!!U&&a((function(){he.call(new U(1))})),Ie=function(){return he.apply(De?fe.call(Te(this)):Te(this),arguments)},Ae={copyWithin:function(e,t){return R.call(Te(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return Z(Te(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return z.apply(Te(this),arguments)},filter:function(e){return Ce(this,$(Te(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return J(Te(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Te(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){K(Te(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Te(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Te(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return se.apply(Te(this),arguments)},lastIndexOf:function(e){return oe.apply(Te(this),arguments)},map:function(e){return we(Te(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return le.apply(Te(this),arguments)},reduceRight:function(e){return ue.apply(Te(this),arguments)},reverse:function(){for(var e,t=Te(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return Q(Te(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return ce.call(Te(this),e)},subarray:function(e,t){var n=Te(this),r=n.length,i=y(e,r);return new(D(n,n[ye]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,v((void 0===t?r:y(t,r))-i))}},Le=function(e,t){return Ce(this,fe.call(Te(this),e,t))},Be=function(e){Te(this);var t=Se(arguments[1],1),n=this.length,r=E(e),i=v(r.length),a=0;if(i+t>n)throw W("Wrong length!");for(;a<i;)this[t+a]=r[a++]},ze={entries:function(){return ae.call(Te(this))},keys:function(){return ie.call(Te(this))},values:function(){return re.call(Te(this))}},Re=function(e,t){return w(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Fe=function(e,t){return Re(e,t=m(t,!0))?f(2,e[t]):q(e,t)},je=function(e,t,n){return!(Re(e,t=m(t,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?V(e,t,n):(e[t]=n.value,e)};me||(j.f=Fe,F.f=je),o(o.S+o.F*!me,"Object",{getOwnPropertyDescriptor:Fe,defineProperty:je}),a((function(){de.call({})}))&&(de=he=function(){return se.call(this)});var Ve=h({},Ae);h(Ve,ze),d(Ve,pe,ze.values),h(Ve,{slice:Le,set:Be,constructor:function(){},toString:de,toLocaleString:Ie}),Me(Ve,"buffer","b"),Me(Ve,"byteOffset","o"),Me(Ve,"byteLength","l"),Me(Ve,"length","e"),V(Ve,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,u){var s=e+((u=!!u)?"Clamped":"")+"Array",f="get"+e,h="set"+e,p=i[s],y=p||{},m=p&&T(p),b=!p||!l.ABV,E={},k=p&&p.prototype,C=function(e,n){V(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ee)}(this,n)},set:function(e){return function(e,n,r){var i=e._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[h](n*t+i.o,r,Ee)}(this,n,e)},enumerable:!0})};b?(p=n((function(e,n,r,i){c(e,p,s,"_d");var a,o,l,u,f=0,h=0;if(w(n)){if(!(n instanceof H||"ArrayBuffer"==(u=x(n))||"SharedArrayBuffer"==u))return be in n?_e(p,n):Oe.call(p,n);a=n,h=Se(r,t);var y=n.byteLength;if(void 0===i){if(y%t)throw W("Wrong length!");if((o=y-h)<0)throw W("Wrong length!")}else if((o=v(i)*t)+h>y)throw W("Wrong length!");l=o/t}else l=g(n),a=new H(o=l*t);for(d(e,"_d",{b:a,o:h,l:o,e:l,v:new G(a)});f<l;)C(e,f++)})),k=p.prototype=S(Ve),d(k,"constructor",p)):a((function(){p(1)}))&&a((function(){new p(-1)}))&&L((function(e){new p,new p(null),new p(1.5),new p(e)}),!0)||(p=n((function(e,n,r,i){var a;return c(e,p,s),w(n)?n instanceof H||"ArrayBuffer"==(a=x(n))||"SharedArrayBuffer"==a?void 0!==i?new y(n,Se(r,t),i):void 0!==r?new y(n,Se(r,t)):new y(n):be in n?_e(p,n):Oe.call(p,n):new y(g(n))})),K(m!==Function.prototype?P(y).concat(P(m)):P(y),(function(e){e in p||d(p,e,y[e])})),p.prototype=k,r||(k.constructor=p));var _=k[pe],M=!!_&&("values"==_.name||null==_.name),O=ze.values;d(p,ge,!0),d(k,be,s),d(k,xe,!0),d(k,ye,p),(u?new p(1)[ve]==s:ve in k)||V(k,ve,{get:function(){return s}}),E[s]=p,o(o.G+o.W+o.F*(p!=y),E),o(o.S,s,{BYTES_PER_ELEMENT:t}),o(o.S+o.F*a((function(){y.of.call(p,1)})),s,{from:Oe,of:Ne}),"BYTES_PER_ELEMENT"in k||d(k,"BYTES_PER_ELEMENT",t),o(o.P,s,Ae),B(s),o(o.P+o.F*ke,s,{set:Be}),o(o.P+o.F*!M,s,ze),r||k.toString==de||(k.toString=de),o(o.P+o.F*a((function(){new p(1).slice()})),s,{slice:Le}),o(o.P+o.F*(a((function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()}))||!a((function(){k.toLocaleString.call([1,2])}))),s,{toLocaleString:Ie}),A[s]=M?_:O,r||M||d(k,pe,O)}}else e.exports=function(){}},function(e,t,n){var r=n(335),i=n(336),a=n(137),o=n(337);e.exports=function(e,t){return r(e)||i(e,t)||a(e,t)||o()}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(34)("meta"),i=n(8),a=n(17),o=n(13).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(6)((function(){return u(Object.preventExtensions({}))})),c=function(e){o(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!a(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!a(e,r)&&c(e),e}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=!1},function(e,t,n){var r=n(104),i=n(73);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(23),i=Math.max,a=Math.min;e.exports=function(e,t){return(e=r(e))<0?i(e+t,0):a(e,t)}},function(e,t,n){var r=n(7),i=n(105),a=n(73),o=n(72)("IE_PROTO"),l=function(){},u=function(){var e,t=n(70)("iframe"),r=a.length;for(t.style.display="none",n(74).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[a[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[o]=e):n=u(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(104),i=n(73).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){var r=n(17),i=n(14),a=n(72)("IE_PROTO"),o=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=i(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?o:null}},function(e,t,n){var r=n(9)("unscopables"),i=Array.prototype;null==i[r]&&n(18)(i,r,{}),e.exports=function(e){i[r][e]=!0}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){var r=n(338),i=n(339),a=n(137),o=n(340);e.exports=function(e){return r(e)||i(e)||a(e)||o()}},function(e,t,n){e.exports=n(133)},function(e,t,n){var r=n(13).f,i=n(17),a=n(9)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},function(e,t,n){var r=n(1),i=n(28),a=n(6),o=n(76),l="["+o+"]",u=RegExp("^"+l+l+"*"),s=RegExp(l+l+"*$"),c=function(e,t,n){var i={},l=a((function(){return!!o[e]()||"​"!="​"[e]()})),u=i[e]=l?t(f):o[e];n&&(i[n]=u),r(r.P+r.F*l,"String",i)},f=c.trim=function(e,t){return e=String(i(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(s,"")),e};e.exports=c},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(5),i=n(13),a=n(12),o=n(9)("species");e.exports=function(e){var t=r[e];a&&t&&!t[o]&&i.f(t,o,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(15);e.exports=function(e,t,n){for(var i in t)r(e,i,t[i],n);return e}},function(e,t,n){var r=n(27);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(27),i=n(9)("toStringTag"),a="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:a?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},function(e,t,n){var r=n(7),i=n(22),a=n(9)("species");e.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[a])?t:i(n)}},function(e,t,n){var r=n(11),i=n(5),a=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(35)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(19),i=n(10),a=n(37);e.exports=function(e){return function(t,n,o){var l,u=r(t),s=i(u.length),c=a(o,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(27);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(9)("iterator"),i=!1;try{var a=[7][r]();a.return=function(){i=!0},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var a=[7],o=a[r]();o.next=function(){return{done:n=!0}},a[r]=function(){return o},e(a)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(7);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(54),i=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var a=n.call(e,t);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},function(e,t,n){"use strict";n(122);var r=n(15),i=n(18),a=n(6),o=n(28),l=n(9),u=n(91),s=l("species"),c=!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=l(e),h=!a((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),p=h?!a((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[s]=function(){return n}),n[d](""),!t})):void 0;if(!h||!p||"replace"===e&&!c||"split"===e&&!f){var v=/./[d],g=n(o,d,""[e],(function(e,t,n,r,i){return t.exec===u?h&&!i?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),y=g[0],m=g[1];r(String.prototype,e,y),i(RegExp.prototype,d,2==t?function(e,t){return m.call(e,this,t)}:function(e){return m.call(e,this)})}}},function(e,t,n){var r=n(21),i=n(117),a=n(86),o=n(7),l=n(10),u=n(88),s={},c={};(t=e.exports=function(e,t,n,f,d){var h,p,v,g,y=d?function(){return e}:u(e),m=r(n,f,t?2:1),b=0;if("function"!=typeof y)throw TypeError(e+" is not iterable!");if(a(y)){for(h=l(e.length);h>b;b++)if((g=t?m(o(p=e[b])[0],p[1]):m(e[b]))===s||g===c)return g}else for(v=y.call(e);!(p=v.next()).done;)if((g=i(v,m,p.value,t))===s||g===c)return g}).BREAK=s,t.RETURN=c},function(e,t,n){var r=n(5).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(5),i=n(1),a=n(15),o=n(51),l=n(32),u=n(64),s=n(50),c=n(8),f=n(6),d=n(60),h=n(46),p=n(77);e.exports=function(e,t,n,v,g,y){var m=r[e],b=m,x=g?"set":"add",w=b&&b.prototype,E={},k=function(e){var t=w[e];a(w,e,"delete"==e||"has"==e?function(e){return!(y&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return y&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(y||w.forEach&&!f((function(){(new b).entries().next()})))){var S=new b,T=S[x](y?{}:-0,1)!=S,P=f((function(){S.has(1)})),C=d((function(e){new b(e)})),_=!y&&f((function(){for(var e=new b,t=5;t--;)e[x](t,t);return!e.has(-0)}));C||((b=t((function(t,n){s(t,b,e);var r=p(new m,t,b);return null!=n&&u(n,g,r[x],r),r}))).prototype=w,w.constructor=b),(P||_)&&(k("delete"),k("has"),g&&k("get")),(_||T)&&k(x),y&&w.clear&&delete w.clear}else b=v.getConstructor(t,e,g,x),o(b.prototype,n),l.NEED=!0;return h(b,e),E[e]=b,i(i.G+i.W+i.F*(b!=m),E),y||v.setStrong(b,e,g),b}},function(e,t,n){for(var r,i=n(5),a=n(18),o=n(34),l=o("typed_array"),u=o("view"),s=!(!i.ArrayBuffer||!i.DataView),c=s,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[d[f++]])?(a(r.prototype,l,!0),a(r.prototype,u,!0)):c=!1;e.exports={ABV:s,CONSTR:c,TYPED:l,VIEW:u}},function(e,t){class n{constructor(e){this.verticesCount=e,this.fields=new Array(e);for(let t=0;t<this.fields.length;t++)this.fields[t]=new Array(e),this.fields[t].fill(0),this.fields[t][t]=-1;this.moveCount=0}getPossibleMoves(){let e=[];for(let t=0;t<this.verticesCount;t++)for(let n=t+1;n<this.verticesCount;n++)0===this.fields[t][n]&&e.push([t,n]);return e}markMove(e,t){if(0!==this.fields[e[0]][e[1]]||0!==this.fields[e[1]][e[0]])throw"Place is already taken";this.fields[e[0]][e[1]]=t,this.fields[e[1]][e[0]]=t,this.moveCount++}copyBoard(){let e=new n(this.verticesCount);for(let t=0;t<this.verticesCount;t++)e.fields[t]=this.fields[t].slice();return e.moveCount=this.moveCount,e}doesCliqueExist(e,t){let n=[];for(let r=0;r<this.verticesCount;r++){let i=0;for(let e=0;e<this.verticesCount;e++)this.fields[r][e]===t&&i++;i>=e-1&&n.push(r)}if(n.length<e)return!1;let r=new Set;return this._addToClique(e,t,r,0,n)}_addToClique(e,t,n,r,i){if(n.size===e)return!0;for(let a=r;a<i.length-(e-n.size-1);a++)if(this._canBeAddedToClique(t,n,i[a])){if(n.add(i[a]),this._addToClique(e,t,n,a+1,i))return!0;n.delete(i[a])}return!1}_canBeAddedToClique(e,t,n){for(let r of t)if(this.fields[r][n]!==e)return!1;return!0}}t.Board=n,t.INVALID=-1,t.EMPTY=0,t.PLAYER1=1,t.PLAYER2=2},function(e,t,n){e.exports=n(341)()},function(e,t,n){var r=n(8),i=n(5).document,a=r(i)&&r(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){t.f=n(9)},function(e,t,n){var r=n(56)("keys"),i=n(34);e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(5).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),i=n(7),a=function(e,t){if(i(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(21)(Function.call,n(24).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return a(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:a}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(8),i=n(75).set;e.exports=function(e,t,n){var a,o=t.constructor;return o!==n&&"function"==typeof o&&(a=o.prototype)!==n.prototype&&r(a)&&i&&i(e,a),e}},function(e,t,n){"use strict";var r=n(23),i=n(28);e.exports=function(e){var t=String(i(this)),n="",a=r(e);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(t+=t))1&a&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){var r=n(23),i=n(28);e.exports=function(e){return function(t,n){var a,o,l=String(i(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===s||(o=l.charCodeAt(u+1))<56320||o>57343?e?l.charAt(u):a:e?l.slice(u,u+2):o-56320+(a-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(35),i=n(1),a=n(15),o=n(18),l=n(48),u=n(116),s=n(46),c=n(40),f=n(9)("iterator"),d=!([].keys&&"next"in[].keys()),h=function(){return this};e.exports=function(e,t,n,p,v,g,y){u(n,t,p);var m,b,x,w=function(e){if(!d&&e in T)return T[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",k="values"==v,S=!1,T=e.prototype,P=T[f]||T["@@iterator"]||v&&T[v],C=P||w(v),_=v?k?w("entries"):C:void 0,M="Array"==t&&T.entries||P;if(M&&(x=c(M.call(new e)))!==Object.prototype&&x.next&&(s(x,E,!0),r||"function"==typeof x[f]||o(x,f,h)),k&&P&&"values"!==P.name&&(S=!0,C=function(){return P.call(this)}),r&&!y||!d&&!S&&T[f]||o(T,f,C),l[t]=C,l[E]=h,v)if(m={values:k?C:w("values"),keys:g?C:w("keys"),entries:_},y)for(b in m)b in T||a(T,b,m[b]);else i(i.P+i.F*(d||S),t,m);return m}},function(e,t,n){var r=n(84),i=n(28);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(e))}},function(e,t,n){var r=n(8),i=n(27),a=n(9)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==i(e))}},function(e,t,n){var r=n(9)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(48),i=n(9)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||a[i]===e)}},function(e,t,n){"use strict";var r=n(13),i=n(33);e.exports=function(e,t,n){t in e?r.f(e,t,i(0,n)):e[t]=n}},function(e,t,n){var r=n(54),i=n(9)("iterator"),a=n(48);e.exports=n(11).getIteratorMethod=function(e){if(null!=e)return e[i]||e["@@iterator"]||a[r(e)]}},function(e,t,n){"use strict";var r=n(14),i=n(37),a=n(10);e.exports=function(e){for(var t=r(this),n=a(t.length),o=arguments.length,l=i(o>1?arguments[1]:void 0,n),u=o>2?arguments[2]:void 0,s=void 0===u?n:i(u,n);s>l;)t[l++]=e;return t}},function(e,t,n){"use strict";var r=n(41),i=n(121),a=n(48),o=n(19);e.exports=n(82)(Array,"Array",(function(e,t){this._t=o(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,i(1)):i(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,i,a=n(61),o=RegExp.prototype.exec,l=String.prototype.replace,u=o,s=(r=/a/,i=/b*/g,o.call(r,"a"),o.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),c=void 0!==/()??/.exec("")[1];(s||c)&&(u=function(e){var t,n,r,i,u=this;return c&&(n=new RegExp("^"+u.source+"$(?!\\s)",a.call(u))),s&&(t=u.lastIndex),r=o.call(u,e),s&&r&&(u.lastIndex=u.global?r.index+r[0].length:t),c&&r&&r.length>1&&l.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),e.exports=u},function(e,t,n){"use strict";var r=n(81)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,i,a,o=n(21),l=n(110),u=n(74),s=n(70),c=n(5),f=c.process,d=c.setImmediate,h=c.clearImmediate,p=c.MessageChannel,v=c.Dispatch,g=0,y={},m=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},b=function(e){m.call(e.data)};d&&h||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return y[++g]=function(){l("function"==typeof e?e:Function(e),t)},r(g),g},h=function(e){delete y[e]},"process"==n(27)(f)?r=function(e){f.nextTick(o(m,e,1))}:v&&v.now?r=function(e){v.now(o(m,e,1))}:p?(a=(i=new p).port2,i.port1.onmessage=b,r=o(a.postMessage,a,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(e){c.postMessage(e+"","*")},c.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(e){u.appendChild(s("script")).onreadystatechange=function(){u.removeChild(this),m.call(e)}}:function(e){setTimeout(o(m,e,1),0)}),e.exports={set:d,clear:h}},function(e,t,n){"use strict";var r=n(5),i=n(12),a=n(35),o=n(67),l=n(18),u=n(51),s=n(6),c=n(50),f=n(23),d=n(10),h=n(129),p=n(39).f,v=n(13).f,g=n(89),y=n(46),m=r.ArrayBuffer,b=r.DataView,x=r.Math,w=r.RangeError,E=r.Infinity,k=m,S=x.abs,T=x.pow,P=x.floor,C=x.log,_=x.LN2,M=i?"_b":"buffer",O=i?"_l":"byteLength",N=i?"_o":"byteOffset";function D(e,t,n){var r,i,a,o=new Array(n),l=8*n-t-1,u=(1<<l)-1,s=u>>1,c=23===t?T(2,-24)-T(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=S(e))!=e||e===E?(i=e!=e?1:0,r=u):(r=P(C(e)/_),e*(a=T(2,-r))<1&&(r--,a*=2),(e+=r+s>=1?c/a:c*T(2,1-s))*a>=2&&(r++,a/=2),r+s>=u?(i=0,r=u):r+s>=1?(i=(e*a-1)*T(2,t),r+=s):(i=e*T(2,s-1)*T(2,t),r=0));t>=8;o[f++]=255&i,i/=256,t-=8);for(r=r<<t|i,l+=t;l>0;o[f++]=255&r,r/=256,l-=8);return o[--f]|=128*d,o}function I(e,t,n){var r,i=8*n-t-1,a=(1<<i)-1,o=a>>1,l=i-7,u=n-1,s=e[u--],c=127&s;for(s>>=7;l>0;c=256*c+e[u],u--,l-=8);for(r=c&(1<<-l)-1,c>>=-l,l+=t;l>0;r=256*r+e[u],u--,l-=8);if(0===c)c=1-o;else{if(c===a)return r?NaN:s?-E:E;r+=T(2,t),c-=o}return(s?-1:1)*r*T(2,c-t)}function A(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function L(e){return[255&e]}function B(e){return[255&e,e>>8&255]}function z(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function R(e){return D(e,52,8)}function F(e){return D(e,23,4)}function j(e,t,n){v(e.prototype,t,{get:function(){return this[n]}})}function V(e,t,n,r){var i=h(+n);if(i+t>e[O])throw w("Wrong index!");var a=e[M]._b,o=i+e[N],l=a.slice(o,o+t);return r?l:l.reverse()}function q(e,t,n,r,i,a){var o=h(+n);if(o+t>e[O])throw w("Wrong index!");for(var l=e[M]._b,u=o+e[N],s=r(+i),c=0;c<t;c++)l[u+c]=s[a?c:t-c-1]}if(o.ABV){if(!s((function(){m(1)}))||!s((function(){new m(-1)}))||s((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var W,Y=(m=function(e){return c(this,m),new k(h(e))}).prototype=k.prototype,U=p(k),X=0;U.length>X;)(W=U[X++])in m||l(m,W,k[W]);a||(Y.constructor=m)}var H=new b(new m(2)),G=b.prototype.setInt8;H.setInt8(0,2147483648),H.setInt8(1,2147483649),!H.getInt8(0)&&H.getInt8(1)||u(b.prototype,{setInt8:function(e,t){G.call(this,e,t<<24>>24)},setUint8:function(e,t){G.call(this,e,t<<24>>24)}},!0)}else m=function(e){c(this,m,"ArrayBuffer");var t=h(e);this._b=g.call(new Array(t),0),this[O]=t},b=function(e,t,n){c(this,b,"DataView"),c(e,m,"DataView");var r=e[O],i=f(t);if(i<0||i>r)throw w("Wrong offset!");if(i+(n=void 0===n?r-i:d(n))>r)throw w("Wrong length!");this[M]=e,this[N]=i,this[O]=n},i&&(j(m,"byteLength","_l"),j(b,"buffer","_b"),j(b,"byteLength","_l"),j(b,"byteOffset","_o")),u(b.prototype,{getInt8:function(e){return V(this,1,e)[0]<<24>>24},getUint8:function(e){return V(this,1,e)[0]},getInt16:function(e){var t=V(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=V(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return A(V(this,4,e,arguments[1]))},getUint32:function(e){return A(V(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return I(V(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return I(V(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){q(this,1,e,L,t)},setUint8:function(e,t){q(this,1,e,L,t)},setInt16:function(e,t){q(this,2,e,B,t,arguments[2])},setUint16:function(e,t){q(this,2,e,B,t,arguments[2])},setInt32:function(e,t){q(this,4,e,z,t,arguments[2])},setUint32:function(e,t){q(this,4,e,z,t,arguments[2])},setFloat32:function(e,t){q(this,4,e,F,t,arguments[2])},setFloat64:function(e,t){q(this,8,e,R,t,arguments[2])}});y(m,"ArrayBuffer"),y(b,"DataView"),l(b.prototype,o.VIEW,!0),t.ArrayBuffer=m,t.DataView=b},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(135)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];function r(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=null;return t.forEach((function(e){if(null==i){var t=e.apply(void 0,n);null!=t&&(i=t)}})),i}return(0,a.default)(r)};var r,i=n(354),a=(r=i)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(332)},function(e,t){function n(e,t,n,r,i,a,o){try{var l=e[a](o),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,i)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(i,a){var o=e.apply(t,r);function l(e){n(o,i,a,l,u,"next",e)}function u(e){n(o,i,a,l,u,"throw",e)}l(void 0)}))}}},function(e,t,n){e.exports=!n(12)&&!n(6)((function(){return 7!=Object.defineProperty(n(70)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(5),i=n(11),a=n(35),o=n(71),l=n(13).f;e.exports=function(e){var t=i.Symbol||(i.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:o.f(e)})}},function(e,t,n){var r=n(17),i=n(19),a=n(57)(!1),o=n(72)("IE_PROTO");e.exports=function(e,t){var n,l=i(e),u=0,s=[];for(n in l)n!=o&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~a(s,n)||s.push(n));return s}},function(e,t,n){var r=n(13),i=n(7),a=n(36);e.exports=n(12)?Object.defineProperties:function(e,t){i(e);for(var n,o=a(t),l=o.length,u=0;l>u;)r.f(e,n=o[u++],t[n]);return e}},function(e,t,n){var r=n(19),i=n(39).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return o&&"[object Window]"==a.call(e)?function(e){try{return i(e)}catch(e){return o.slice()}}(e):i(r(e))}},function(e,t,n){"use strict";var r=n(12),i=n(36),a=n(58),o=n(53),l=n(14),u=n(52),s=Object.assign;e.exports=!s||n(6)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r}))?function(e,t){for(var n=l(e),s=arguments.length,c=1,f=a.f,d=o.f;s>c;)for(var h,p=u(arguments[c++]),v=f?i(p).concat(f(p)):i(p),g=v.length,y=0;g>y;)h=v[y++],r&&!d.call(p,h)||(n[h]=p[h]);return n}:s},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(22),i=n(8),a=n(110),o=[].slice,l={},u=function(e,t,n){if(!(t in l)){for(var r=[],i=0;i<t;i++)r[i]="a["+i+"]";l[t]=Function("F,a","return new F("+r.join(",")+")")}return l[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=o.call(arguments,1),l=function(){var r=n.concat(o.call(arguments));return this instanceof l?u(t,r.length,r):a(t,r,e)};return i(t.prototype)&&(l.prototype=t.prototype),l}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(5).parseInt,i=n(47).trim,a=n(76),o=/^[-+]?0[xX]/;e.exports=8!==r(a+"08")||22!==r(a+"0x16")?function(e,t){var n=i(String(e),3);return r(n,t>>>0||(o.test(n)?16:10))}:r},function(e,t,n){var r=n(5).parseFloat,i=n(47).trim;e.exports=1/r(n(76)+"-0")!=-1/0?function(e){var t=i(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(27);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(8),i=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&i(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){"use strict";var r=n(38),i=n(33),a=n(46),o={};n(18)(o,n(9)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(o,{next:i(1,n)}),a(e,t+" Iterator")}},function(e,t,n){var r=n(7);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){var a=e.return;throw void 0!==a&&r(a.call(e)),t}}},function(e,t,n){var r=n(240);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(22),i=n(14),a=n(52),o=n(10);e.exports=function(e,t,n,l,u){r(t);var s=i(e),c=a(s),f=o(s.length),d=u?f-1:0,h=u?-1:1;if(n<2)for(;;){if(d in c){l=c[d],d+=h;break}if(d+=h,u?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;u?d>=0:f>d;d+=h)d in c&&(l=t(l,c[d],d,s));return l}},function(e,t,n){"use strict";var r=n(14),i=n(37),a=n(10);e.exports=[].copyWithin||function(e,t){var n=r(this),o=a(n.length),l=i(e,o),u=i(t,o),s=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===s?o:i(s,o))-u,o-l),f=1;for(u<l&&l<u+c&&(f=-1,u+=c-1,l+=c-1);c-- >0;)u in n?n[l]=n[u]:delete n[l],l+=f,u+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(91);n(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(12)&&"g"!=/./g.flags&&n(13).f(RegExp.prototype,"flags",{configurable:!0,get:n(61)})},function(e,t,n){"use strict";var r,i,a,o,l=n(35),u=n(5),s=n(21),c=n(54),f=n(1),d=n(8),h=n(22),p=n(50),v=n(64),g=n(55),y=n(93).set,m=n(260)(),b=n(125),x=n(261),w=n(65),E=n(126),k=u.TypeError,S=u.process,T=S&&S.versions,P=T&&T.v8||"",C=u.Promise,_="process"==c(S),M=function(){},O=i=b.f,N=!!function(){try{var e=C.resolve(1),t=(e.constructor={})[n(9)("species")]=function(e){e(M,M)};return(_||"function"==typeof PromiseRejectionEvent)&&e.then(M)instanceof t&&0!==P.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),D=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;m((function(){for(var r=e._v,i=1==e._s,a=0,o=function(t){var n,a,o,l=i?t.ok:t.fail,u=t.resolve,s=t.reject,c=t.domain;try{l?(i||(2==e._h&&B(e),e._h=1),!0===l?n=r:(c&&c.enter(),n=l(r),c&&(c.exit(),o=!0)),n===t.promise?s(k("Promise-chain cycle")):(a=D(n))?a.call(n,u,s):u(n)):s(r)}catch(e){c&&!o&&c.exit(),s(e)}};n.length>a;)o(n[a++]);e._c=[],e._n=!1,t&&!e._h&&A(e)}))}},A=function(e){y.call(u,(function(){var t,n,r,i=e._v,a=L(e);if(a&&(t=x((function(){_?S.emit("unhandledRejection",i,e):(n=u.onunhandledrejection)?n({promise:e,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)})),e._h=_||L(e)?2:1),e._a=void 0,a&&t.e)throw t.v}))},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},B=function(e){y.call(u,(function(){var t;_?S.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},z=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},R=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw k("Promise can't be resolved itself");(t=D(e))?m((function(){var r={_w:n,_d:!1};try{t.call(e,s(R,r,1),s(z,r,1))}catch(e){z.call(r,e)}})):(n._v=e,n._s=1,I(n,!1))}catch(e){z.call({_w:n,_d:!1},e)}}};N||(C=function(e){p(this,C,"Promise","_h"),h(e),r.call(this);try{e(s(R,this,1),s(z,this,1))}catch(e){z.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(51)(C.prototype,{then:function(e,t){var n=O(g(this,C));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=_?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new r;this.promise=e,this.resolve=s(R,e,1),this.reject=s(z,e,1)},b.f=O=function(e){return e===C||e===o?new a(e):i(e)}),f(f.G+f.W+f.F*!N,{Promise:C}),n(46)(C,"Promise"),n(49)("Promise"),o=n(11).Promise,f(f.S+f.F*!N,"Promise",{reject:function(e){var t=O(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(l||!N),"Promise",{resolve:function(e){return E(l&&this===o?C:this,e)}}),f(f.S+f.F*!(N&&n(60)((function(e){C.all(e).catch(M)}))),"Promise",{all:function(e){var t=this,n=O(t),r=n.resolve,i=n.reject,a=x((function(){var n=[],a=0,o=1;v(e,!1,(function(e){var l=a++,u=!1;n.push(void 0),o++,t.resolve(e).then((function(e){u||(u=!0,n[l]=e,--o||r(n))}),i)})),--o||r(n)}));return a.e&&i(a.v),n.promise},race:function(e){var t=this,n=O(t),r=n.reject,i=x((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return i.e&&r(i.v),n.promise}})},function(e,t,n){"use strict";var r=n(22);function i(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new i(e)}},function(e,t,n){var r=n(7),i=n(8),a=n(125);e.exports=function(e,t){if(r(e),i(t)&&t.constructor===e)return t;var n=a.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(13).f,i=n(38),a=n(51),o=n(21),l=n(50),u=n(64),s=n(82),c=n(121),f=n(49),d=n(12),h=n(32).fastKey,p=n(42),v=d?"_s":"size",g=function(e,t){var n,r=h(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,s){var c=e((function(e,r){l(e,c,t,"_i"),e._t=t,e._i=i(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&u(r,n,e[s],e)}));return a(c.prototype,{clear:function(){for(var e=p(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=p(this,t),r=g(n,e);if(r){var i=r.n,a=r.p;delete n._i[r.i],r.r=!0,a&&(a.n=i),i&&(i.p=a),n._f==r&&(n._f=i),n._l==r&&(n._l=a),n[v]--}return!!r},forEach:function(e){p(this,t);for(var n,r=o(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!g(p(this,t),e)}}),d&&r(c.prototype,"size",{get:function(){return p(this,t)[v]}}),c},def:function(e,t,n){var r,i,a=g(e,t);return a?a.v=n:(e._l=a={i:i=h(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=a),r&&(r.n=a),e[v]++,"F"!==i&&(e._i[i]=a)),e},getEntry:g,setStrong:function(e,t,n){s(e,t,(function(e,n){this._t=p(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?c(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,c(1))}),n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(51),i=n(32).getWeak,a=n(7),o=n(8),l=n(50),u=n(64),s=n(26),c=n(17),f=n(42),d=s(5),h=s(6),p=0,v=function(e){return e._l||(e._l=new g)},g=function(){this.a=[]},y=function(e,t){return d(e.a,(function(e){return e[0]===t}))};g.prototype={get:function(e){var t=y(this,e);if(t)return t[1]},has:function(e){return!!y(this,e)},set:function(e,t){var n=y(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=h(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,a){var s=e((function(e,r){l(e,s,t,"_i"),e._t=t,e._i=p++,e._l=void 0,null!=r&&u(r,n,e[a],e)}));return r(s.prototype,{delete:function(e){if(!o(e))return!1;var n=i(e);return!0===n?v(f(this,t)).delete(e):n&&c(n,this._i)&&delete n[this._i]},has:function(e){if(!o(e))return!1;var n=i(e);return!0===n?v(f(this,t)).has(e):n&&c(n,this._i)}}),s},def:function(e,t,n){var r=i(a(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(23),i=n(10);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=i(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(39),i=n(58),a=n(7),o=n(5).Reflect;e.exports=o&&o.ownKeys||function(e){var t=r.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(10),i=n(78),a=n(28);e.exports=function(e,t,n,o){var l=String(a(e)),u=l.length,s=void 0===n?" ":String(n),c=r(t);if(c<=u||""==s)return l;var f=c-u,d=i.call(s,Math.ceil(f/s.length));return d.length>f&&(d=d.slice(0,f)),o?d+l:l+d}},function(e,t,n){var r=n(12),i=n(36),a=n(19),o=n(53).f;e.exports=function(e){return function(t){for(var n,l=a(t),u=i(l),s=u.length,c=0,f=[];s>c;)n=u[c++],r&&!o.call(l,n)||f.push(e?[n,l[n]]:l[n]);return f}}},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function l(e,t,n,r){var i=t&&t.prototype instanceof c?t:c,a=Object.create(i.prototype),o=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(i,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw a;return S()}for(n.method=i,n.arg=a;;){var o=n.delegate;if(o){var l=b(o,n);if(l){if(l===s)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=u(e,t,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===s)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}(e,n,o),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var s={};function c(){}function f(){}function d(){}var h={};h[i]=function(){return this};var p=Object.getPrototypeOf,v=p&&p(p(k([])));v&&v!==t&&n.call(v,i)&&(h=v);var g=d.prototype=c.prototype=Object.create(h);function y(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function m(e,t){var r;this._invoke=function(i,a){function o(){return new t((function(r,o){!function r(i,a,o,l){var s=u(e[i],e,a);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,o,l)}),(function(e){r("throw",e,o,l)})):t.resolve(f).then((function(e){c.value=e,o(c)}),(function(e){return r("throw",e,o,l)}))}l(s.arg)}(i,a,r,o)}))}return r=r?r.then(o,o):o()}}function b(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method))return s;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,s;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,s):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,s)}function x(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function w(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function k(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:S}}function S(){return{value:void 0,done:!0}}return f.prototype=g.constructor=d,d.constructor=f,d[o]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},y(m.prototype),m.prototype[a]=function(){return this},e.AsyncIterator=m,e.async=function(t,n,r,i,a){void 0===a&&(a=Promise);var o=new m(l(t,n,r,i),a);return e.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},y(g),g[o]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return o.type="throw",o.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],o=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method="next",this.next=a.finallyLoc,s):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),s},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),w(n),s}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;w(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=o(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))i.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){var r=n(138);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t,n){const{Board:r,INVALID:i,EMPTY:a,PLAYER1:o,PLAYER2:l}=n(68),{RandomPlayer:u}=n(350),{Mcts:s}=n(351),{AlphaBetaPlayer:c}=n(352);t.Game=class{constructor(){}initGame(e){this.cliqueSize=e.cliqueSize,this.verticesCount=e.verticesCount,this.board=new r(this.verticesCount),this.maxMoves=this.verticesCount*(this.verticesCount-1)/2,this.minMoves=this.cliqueSize*(this.cliqueSize-1)/2,this.moveCount=0,this.movesHistory=[],this.winner=void 0,this.player1=this.initPlayer(e,e.player1,o),this.player2=this.initPlayer(e,e.player2,l),this.humanMove=!1,this.whichBotMoves=o,this.lastMove=null}initPlayer(e,t,n){let r;switch(t.type){case"human":r=null;break;case"random":r=new u(t);break;case"alphaBeta":r=new c(e.cliqueSize,t.depth,n,t.advancedStrategy);break;case"monteCarlo":r=new s(e.verticesCount,e.cliqueSize,t.timeout,n)}return r}startHumanComputerGame(){let e=null;return null!==this.player1?(e=this.player1.decideMove(null,this.board.copyBoard()),this.makeMove(e,o),this.humanId=l,this.botId=o,this.botPlayer=this.player1):(this.humanId=o,this.botId=l,this.botPlayer=this.player2),this.humanMove=!0,this.lastMove=e,e}makeOnlyHumanMove(e){if(!this.humanMove)throw"Bot's turn!";this.humanMove=!1;try{if(this.makeMove(e,this.humanId),this.checkIfPlayerWon(this.humanId))return this.winner=this.humanId,this.humanId}catch(e){throw console.error(e),this.humanMove=!0,"Invalid move!"}return this.canMove()?(this.lastMove=e,3):0}makeOnlyBotMove(){if(this.humanMove)throw"Human's turn";let e=this.botPlayer.decideMove(this.lastMove,this.board.copyBoard());return this.board.markMove(e,this.botId),this.checkIfPlayerWon(this.botId)&&(this.winner=this.botId),this.humanMove=!0,this.lastMove=e,e}makeMoveInBotVsBot(){if(!this.canMove())return 0;let e=null;e=this.whichBotMoves===o?this.player1:this.player2;let t=e.decideMove(this.lastMove,this.board.copyBoard());return this.makeMove(t,this.whichBotMoves),this.checkIfPlayerWon(this.whichBotMoves)?(this.winner=this.whichBotMoves,this.whichBotMoves):this.canMove()?(this.whichBotMoves=this.whichBotMoves===o?l:o,this.lastMove=t,t):0}playAutomaticGameOfBots(){let e=null;for(;this.canMove();){if(e=this.player1.decideMove(e,this.board.copyBoard()),this.makeMove(e,o),this.checkIfPlayerWon(o))return this.winner=o,this.winner;if(!this.canMove())break;if(e=this.player2.decideMove(e,this.board.copyBoard()),this.makeMove(e,l),this.checkIfPlayerWon(l))return this.winner=l,this.winner}return 0}makeMove(e,t){console.log(t===o?"-":"+"),this.board.markMove(e,t),this.movesHistory.push(e),this.moveCount++}canMove(){return this.maxMoves>this.moveCount}checkIfPlayerWon(e){return!(this.minMoves>(this.moveCount+1)/2)&&this.board.doesCliqueExist(this.cliqueSize,e)}makeHumanPlayerMove(e){if(!this.humanMove)throw"Bot is thinking!";this.humanMove=!1;try{if(this.makeMove(e,this.humanId),this.checkIfPlayerWon(this.humanId))return this.winner=this.humanId,winner}catch(e){throw console.error(e),this.humanMove=!0,"Invalid move!"}let t=this.botPlayer.decideMove(e,this.board.copyBoard());return this.board.markMove(e,this.botMove),this.checkIfPlayerWon(this.botMove)?(this.winner=this.botId,winner):t}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r,i,a,o;window,e.exports=(r=n(0),i=n(100),a=n(69),o=n(343),function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=r({}),a=function(e,t){return null==e||null==t};t.hashDiff=function(e,t){return a(e,t)||e.hash()!==t.hash()},t.shallowObjDiff=function(e,t){if(a(e,t)&&(null!=e||null!=t))return!0;if(e===t)return!1;if((void 0===e?"undefined":r(e))!==i||(void 0===t?"undefined":r(t))!==i)return e!==t;var n=Object.keys(e),o=Object.keys(t),l=function(n){return e[n]!==t[n]};return n.length!==o.length||!(!n.some(l)&&!o.some(l))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.get=function(e,t){return null!=e?e[t]:null},t.toJson=function(e){return e},t.forEach=function(e,t){return e.forEach(t)}},function(e,t,n){"use strict";e.exports=n(3).default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(4)),a=c(n(5)),o=n(6),l=n(8),u=c(n(9)),s=n(10);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.displayName="CytoscapeComponent",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),r(t,null,[{key:"normalizeElements",value:function(e){if(null!=e.length)return e;var t=e.nodes,n=e.edges;return null==t&&(t=[]),null==n&&(n=[]),t.concat(n)}},{key:"propTypes",get:function(){return o.types}},{key:"defaultProps",get:function(){return l.defaults}}]),r(t,[{key:"componentDidMount",value:function(){var e=a.default.findDOMNode(this),t=this.props,n=t.global,r=t.headless,i=t.styleEnabled,o=t.hideEdgesOnViewport,l=t.textureOnViewport,s=t.motionBlur,c=t.motionBlurOpacity,f=t.wheelSensitivity,d=t.pixelRatio,h=this._cy=new u.default({container:e,headless:r,styleEnabled:i,hideEdgesOnViewport:o,textureOnViewport:l,motionBlur:s,motionBlurOpacity:c,wheelSensitivity:f,pixelRatio:d});n&&(window[n]=h),this.updateCytoscape(null,this.props)}},{key:"updateCytoscape",value:function(e,t){var n=this._cy,r=t.diff,i=t.toJson,a=t.get,o=t.forEach;(0,s.patch)(n,e,t,r,i,a,o),null!=t.cy&&t.cy(n)}},{key:"componentDidUpdate",value:function(e){this.updateCytoscape(e,this.props)}},{key:"componentWillUnmount",value:function(){this._cy.destroy()}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.className,r=e.style;return i.default.createElement("div",{id:t,className:n,style:r})}}]),t}();t.default=f},function(e,t){e.exports=r},function(e,t){e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.types=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(7)),i=r.default.string,a=r.default.array,o=r.default.object,l=r.default.number,u=r.default.bool,s=r.default.oneOfType,c=r.default.any,f=r.default.func;t.types={id:i,className:i,style:s([i,o]),elements:s([a,c]),stylesheet:s([a,c]),layout:s([o,c]),pan:s([o,c]),zoom:l,panningEnabled:u,userPanningEnabled:u,minZoom:l,maxZoom:l,zoomingEnabled:u,userZoomingEnabled:u,boxSelectionEnabled:u,autoungrabify:u,autolock:u,autounselectify:u,get:f,toJson:f,diff:f,forEach:f,cy:f,headless:u,styleEnabled:u,hideEdgesOnViewport:u,textureOnViewport:u,motionBlur:u,motionBlurOpacity:l,wheelSensitivity:l,pixelRatio:s([i,o])}},function(e,t){e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaults=t.pan=t.zoom=t.stylesheet=t.elements=t.identity=void 0;var r=n(0),i=n(1),a=(t.identity=function(e){return e},t.elements=[{data:{id:"a",label:"Example node A"}},{data:{id:"b",label:"Example node B"}},{data:{id:"e",source:"a",target:"b"}}]),o=t.stylesheet=[{selector:"node",style:{label:"data(label)"}}],l=t.zoom=1,u=t.pan={x:0,y:0};t.defaults={diff:r.shallowObjDiff,get:i.get,toJson:i.toJson,forEach:i.forEach,elements:a,stylesheet:o,zoom:l,pan:u}},function(e,t){e.exports=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.patch=void 0;var r=n(1),i=n(0),a=function(e,t,n,i){return n((0,r.get)(e,i),(0,r.get)(t,i))},o=(t.patch=function(e,t,n,c,f,d,h){e.batch((function(){(c===i.shallowObjDiff||a(t,n,c,"elements"))&&s(e,(0,r.get)(t,"elements"),(0,r.get)(n,"elements"),f,d,h,c),a(t,n,c,"stylesheet")&&u(e,(0,r.get)(t,"stylesheet"),(0,r.get)(n,"stylesheet"),f),["zoom","minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","pan","panningEnabled","userPanningEnabled","boxSelectionEnabled","autoungrabify","autolock","autounselectify"].forEach((function(i){a(t,n,c,i)&&o(e,i,(0,r.get)(t,i),(0,r.get)(n,i),f)}))})),a(t,n,c,"layout")&&l(e,(0,r.get)(t,"layout"),(0,r.get)(n,"layout"),f)},function(e,t,n,r,i){e[t](i(r))}),l=function(e,t,n,r){var i=r(n);null!=i&&e.layout(i).run()},u=function(e,t,n,r){var i=e.style();null!=i&&i.fromJson(r(n)).update()},s=function(e,t,n,r,i,a,o){var l=[],u=e.collection(),s=[],f={},d={},h=function(e){return i(i(e,"data"),"id")};a(n,(function(e){var t=h(e);d[t]=e})),null!=t&&a(t,(function(t){var n=h(t);f[n]=t,function(e){return null!=d[e]}(n)||u.merge(e.getElementById(n))})),a(n,(function(e){var t=h(e),n=function(e){return f[e]}(t);!function(e){return null!=f[e]}(t)?l.push(r(e)):s.push({ele1:n,ele2:e})})),u.length>0&&e.remove(u),l.length>0&&e.add(l),s.forEach((function(t){var n=t.ele1,a=t.ele2;return c(e,n,a,r,i,o)}))},c=function(e,t,n,r,i,a){var o=i(i(n,"data"),"id"),l=e.getElementById(o),u={};["data","position","selected","selectable","locked","grabbable","classes"].forEach((function(e){var o=i(n,e);a(o,i(t,e))&&(u[e]=r(o))}));var s=i(n,"scratch");a(s,i(t,"scratch"))&&l.scratch(r(s)),Object.keys(u).length>0&&l.json(u)}}]))},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=void 0===t?{}:t,r=n.propTypes,a=n.defaultProps,o=n.allowFallback,l=void 0!==o&&o,u=n.displayName,s=void 0===u?e.name||e.displayName:u,c=function(t,n){return e(t,n)};return Object.assign(i.default.forwardRef||!l?i.default.forwardRef(c):function(e){return c(e,null)},{displayName:s,propTypes:r,defaultProps:a})};var r,i=(r=n(0))&&r.__esModule?r:{default:r}},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},,function(e,t,n){n(146),e.exports=n(355)},function(e,t,n){"use strict";n(147);var r,i=(r=n(318))&&r.__esModule?r:{default:r};i.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),i.default._babelPolyfill=!0},function(e,t,n){"use strict";n(148),n(291),n(293),n(296),n(298),n(300),n(302),n(304),n(306),n(308),n(310),n(312),n(314),n(133)},function(e,t,n){n(149),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(230),n(231),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(90),n(254),n(122),n(255),n(123),n(256),n(257),n(258),n(259),n(124),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),e.exports=n(11)},function(e,t,n){"use strict";var r=n(5),i=n(17),a=n(12),o=n(1),l=n(15),u=n(32).KEY,s=n(6),c=n(56),f=n(46),d=n(34),h=n(9),p=n(71),v=n(103),g=n(151),y=n(59),m=n(7),b=n(8),x=n(14),w=n(19),E=n(31),k=n(33),S=n(38),T=n(106),P=n(24),C=n(58),_=n(13),M=n(36),O=P.f,N=_.f,D=T.f,I=r.Symbol,A=r.JSON,L=A&&A.stringify,B=h("_hidden"),z=h("toPrimitive"),R={}.propertyIsEnumerable,F=c("symbol-registry"),j=c("symbols"),V=c("op-symbols"),q=Object.prototype,W="function"==typeof I&&!!C.f,Y=r.QObject,U=!Y||!Y.prototype||!Y.prototype.findChild,X=a&&s((function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=O(q,t);r&&delete q[t],N(e,t,n),r&&e!==q&&N(q,t,r)}:N,H=function(e){var t=j[e]=S(I.prototype);return t._k=e,t},G=W&&"symbol"==typeof I.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof I},K=function(e,t,n){return e===q&&K(V,t,n),m(e),t=E(t,!0),m(n),i(j,t)?(n.enumerable?(i(e,B)&&e[B][t]&&(e[B][t]=!1),n=S(n,{enumerable:k(0,!1)})):(i(e,B)||N(e,B,k(1,{})),e[B][t]=!0),X(e,t,n)):N(e,t,n)},$=function(e,t){m(e);for(var n,r=g(t=w(t)),i=0,a=r.length;a>i;)K(e,n=r[i++],t[n]);return e},Q=function(e){var t=R.call(this,e=E(e,!0));return!(this===q&&i(j,e)&&!i(V,e))&&(!(t||!i(this,e)||!i(j,e)||i(this,B)&&this[B][e])||t)},Z=function(e,t){if(e=w(e),t=E(t,!0),e!==q||!i(j,t)||i(V,t)){var n=O(e,t);return!n||!i(j,t)||i(e,B)&&e[B][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=D(w(e)),r=[],a=0;n.length>a;)i(j,t=n[a++])||t==B||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===q,r=D(n?V:w(e)),a=[],o=0;r.length>o;)!i(j,t=r[o++])||n&&!i(q,t)||a.push(j[t]);return a};W||(l((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===q&&t.call(V,n),i(this,B)&&i(this[B],e)&&(this[B][e]=!1),X(this,e,k(1,n))};return a&&U&&X(q,e,{configurable:!0,set:t}),H(e)}).prototype,"toString",(function(){return this._k})),P.f=Z,_.f=K,n(39).f=T.f=J,n(53).f=Q,C.f=ee,a&&!n(35)&&l(q,"propertyIsEnumerable",Q,!0),p.f=function(e){return H(h(e))}),o(o.G+o.W+o.F*!W,{Symbol:I});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)h(te[ne++]);for(var re=M(h.store),ie=0;re.length>ie;)v(re[ie++]);o(o.S+o.F*!W,"Symbol",{for:function(e){return i(F,e+="")?F[e]:F[e]=I(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in F)if(F[t]===e)return t},useSetter:function(){U=!0},useSimple:function(){U=!1}}),o(o.S+o.F*!W,"Object",{create:function(e,t){return void 0===t?S(e):$(S(e),t)},defineProperty:K,defineProperties:$,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:ee});var ae=s((function(){C.f(1)}));o(o.S+o.F*ae,"Object",{getOwnPropertySymbols:function(e){return C.f(x(e))}}),A&&o(o.S+o.F*(!W||s((function(){var e=I();return"[null]"!=L([e])||"{}"!=L({a:e})||"{}"!=L(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=t=r[1],(b(t)||void 0!==e)&&!G(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),r[1]=t,L.apply(A,r)}}),I.prototype[z]||n(18)(I.prototype,z,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(56)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(36),i=n(58),a=n(53);e.exports=function(e){var t=r(e),n=i.f;if(n)for(var o,l=n(e),u=a.f,s=0;l.length>s;)u.call(e,o=l[s++])&&t.push(o);return t}},function(e,t,n){var r=n(1);r(r.S,"Object",{create:n(38)})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(12),"Object",{defineProperty:n(13).f})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(12),"Object",{defineProperties:n(105)})},function(e,t,n){var r=n(19),i=n(24).f;n(25)("getOwnPropertyDescriptor",(function(){return function(e,t){return i(r(e),t)}}))},function(e,t,n){var r=n(14),i=n(40);n(25)("getPrototypeOf",(function(){return function(e){return i(r(e))}}))},function(e,t,n){var r=n(14),i=n(36);n(25)("keys",(function(){return function(e){return i(r(e))}}))},function(e,t,n){n(25)("getOwnPropertyNames",(function(){return n(106).f}))},function(e,t,n){var r=n(8),i=n(32).onFreeze;n(25)("freeze",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8),i=n(32).onFreeze;n(25)("seal",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8),i=n(32).onFreeze;n(25)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8);n(25)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(8);n(25)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(8);n(25)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},function(e,t,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(107)})},function(e,t,n){var r=n(1);r(r.S,"Object",{is:n(108)})},function(e,t,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(75).set})},function(e,t,n){"use strict";var r=n(54),i={};i[n(9)("toStringTag")]="z",i+""!="[object z]"&&n(15)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(e,t,n){var r=n(1);r(r.P,"Function",{bind:n(109)})},function(e,t,n){var r=n(13).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||n(12)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(8),i=n(40),a=n(9)("hasInstance"),o=Function.prototype;a in o||n(13).f(o,a,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=i(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(1),i=n(111);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(e,t,n){var r=n(1),i=n(112);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(e,t,n){"use strict";var r=n(5),i=n(17),a=n(27),o=n(77),l=n(31),u=n(6),s=n(39).f,c=n(24).f,f=n(13).f,d=n(47).trim,h=r.Number,p=h,v=h.prototype,g="Number"==a(n(38)(v)),y="trim"in String.prototype,m=function(e){var t=l(e,!1);if("string"==typeof t&&t.length>2){var n,r,i,a=(t=y?t.trim():d(t,3)).charCodeAt(0);if(43===a||45===a){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===a){switch(t.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+t}for(var o,u=t.slice(2),s=0,c=u.length;s<c;s++)if((o=u.charCodeAt(s))<48||o>i)return NaN;return parseInt(u,r)}}return+t};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof h&&(g?u((function(){v.valueOf.call(n)})):"Number"!=a(n))?o(new p(m(t)),n,h):m(t)};for(var b,x=n(12)?s(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;x.length>w;w++)i(p,b=x[w])&&!i(h,b)&&f(h,b,c(p,b));h.prototype=v,v.constructor=h,n(15)(r,"Number",h)}},function(e,t,n){"use strict";var r=n(1),i=n(23),a=n(113),o=n(78),l=1..toFixed,u=Math.floor,s=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*s[n],s[n]=r%1e7,r=u(r/1e7)},d=function(e){for(var t=6,n=0;--t>=0;)n+=s[t],s[t]=u(n/e),n=n%e*1e7},h=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==s[e]){var n=String(s[e]);t=""===t?n:t+o.call("0",7-n.length)+n}return t},p=function(e,t,n){return 0===t?n:t%2==1?p(e,t-1,n*e):p(e*e,t/2,n)};r(r.P+r.F*(!!l&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(6)((function(){l.call({})}))),"Number",{toFixed:function(e){var t,n,r,l,u=a(this,c),s=i(e),v="",g="0";if(s<0||s>20)throw RangeError(c);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*p(2,69,1))-69)<0?u*p(2,-t,1):u/p(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=s;r>=7;)f(1e7,0),r-=7;for(f(p(10,r,1),0),r=t-1;r>=23;)d(1<<23),r-=23;d(1<<r),f(1,1),d(2),g=h()}else f(0,n),f(1<<-t,0),g=h()+o.call("0",s);return g=s>0?v+((l=g.length)<=s?"0."+o.call("0",s-l)+g:g.slice(0,l-s)+"."+g.slice(l-s)):v+g}})},function(e,t,n){"use strict";var r=n(1),i=n(6),a=n(113),o=1..toPrecision;r(r.P+r.F*(i((function(){return"1"!==o.call(1,void 0)}))||!i((function(){o.call({})}))),"Number",{toPrecision:function(e){var t=a(this,"Number#toPrecision: incorrect invocation!");return void 0===e?o.call(t):o.call(t,e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(1),i=n(5).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isInteger:n(114)})},function(e,t,n){var r=n(1);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(1),i=n(114),a=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return i(e)&&a(e)<=9007199254740991}})},function(e,t,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(1),i=n(112);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(e,t,n){var r=n(1),i=n(111);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(e,t,n){var r=n(1),i=n(115),a=Math.sqrt,o=Math.acosh;r(r.S+r.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:i(e-1+a(e-1)*a(e+1))}})},function(e,t,n){var r=n(1),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(1),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(1),i=n(79);r(r.S,"Math",{cbrt:function(e){return i(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(1),i=Math.exp;r(r.S,"Math",{cosh:function(e){return(i(e=+e)+i(-e))/2}})},function(e,t,n){var r=n(1),i=n(80);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(e,t,n){var r=n(1);r(r.S,"Math",{fround:n(194)})},function(e,t,n){var r=n(79),i=Math.pow,a=i(2,-52),o=i(2,-23),l=i(2,127)*(2-o),u=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=Math.abs(e),s=r(e);return i<u?s*(i/u/o+1/a-1/a)*u*o:(n=(t=(1+o/a)*i)-(t-i))>l||n!=n?s*(1/0):s*n}},function(e,t,n){var r=n(1),i=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,a=0,o=0,l=arguments.length,u=0;o<l;)u<(n=i(arguments[o++]))?(a=a*(r=u/n)*r+1,u=n):a+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(a)}})},function(e,t,n){var r=n(1),i=Math.imul;r(r.S+r.F*n(6)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(e,t){var n=+e,r=+t,i=65535&n,a=65535&r;return 0|i*a+((65535&n>>>16)*a+i*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log1p:n(115)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{sign:n(79)})},function(e,t,n){var r=n(1),i=n(80),a=Math.exp;r(r.S+r.F*n(6)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(i(e)-i(-e))/2:(a(e-1)-a(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(1),i=n(80),a=Math.exp;r(r.S,"Math",{tanh:function(e){var t=i(e=+e),n=i(-e);return t==1/0?1:n==1/0?-1:(t-n)/(a(e)+a(-e))}})},function(e,t,n){var r=n(1);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(1),i=n(37),a=String.fromCharCode,o=String.fromCodePoint;r(r.S+r.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,o=0;r>o;){if(t=+arguments[o++],i(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?a(t):a(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(1),i=n(19),a=n(10);r(r.S,"String",{raw:function(e){for(var t=i(e.raw),n=a(t.length),r=arguments.length,o=[],l=0;n>l;)o.push(String(t[l++])),l<r&&o.push(String(arguments[l]));return o.join("")}})},function(e,t,n){"use strict";n(47)("trim",(function(e){return function(){return e(this,3)}}))},function(e,t,n){"use strict";var r=n(81)(!0);n(82)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(1),i=n(81)(!1);r(r.P,"String",{codePointAt:function(e){return i(this,e)}})},function(e,t,n){"use strict";var r=n(1),i=n(10),a=n(83),o="".endsWith;r(r.P+r.F*n(85)("endsWith"),"String",{endsWith:function(e){var t=a(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(t.length),l=void 0===n?r:Math.min(i(n),r),u=String(e);return o?o.call(t,u,l):t.slice(l-u.length,l)===u}})},function(e,t,n){"use strict";var r=n(1),i=n(83);r(r.P+r.F*n(85)("includes"),"String",{includes:function(e){return!!~i(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(1);r(r.P,"String",{repeat:n(78)})},function(e,t,n){"use strict";var r=n(1),i=n(10),a=n(83),o="".startsWith;r(r.P+r.F*n(85)("startsWith"),"String",{startsWith:function(e){var t=a(this,e,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return o?o.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(16)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},function(e,t,n){"use strict";n(16)("big",(function(e){return function(){return e(this,"big","","")}}))},function(e,t,n){"use strict";n(16)("blink",(function(e){return function(){return e(this,"blink","","")}}))},function(e,t,n){"use strict";n(16)("bold",(function(e){return function(){return e(this,"b","","")}}))},function(e,t,n){"use strict";n(16)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},function(e,t,n){"use strict";n(16)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},function(e,t,n){"use strict";n(16)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},function(e,t,n){"use strict";n(16)("italics",(function(e){return function(){return e(this,"i","","")}}))},function(e,t,n){"use strict";n(16)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},function(e,t,n){"use strict";n(16)("small",(function(e){return function(){return e(this,"small","","")}}))},function(e,t,n){"use strict";n(16)("strike",(function(e){return function(){return e(this,"strike","","")}}))},function(e,t,n){"use strict";n(16)("sub",(function(e){return function(){return e(this,"sub","","")}}))},function(e,t,n){"use strict";n(16)("sup",(function(e){return function(){return e(this,"sup","","")}}))},function(e,t,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(1),i=n(14),a=n(31);r(r.P+r.F*n(6)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=i(this),n=a(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(1),i=n(229);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(e,t,n){"use strict";var r=n(6),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-50000000000001))}))||!r((function(){a.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+o(e.getUTCMonth()+1)+"-"+o(e.getUTCDate())+"T"+o(e.getUTCHours())+":"+o(e.getUTCMinutes())+":"+o(e.getUTCSeconds())+"."+(n>99?n:"0"+o(n))+"Z"}:a},function(e,t,n){var r=Date.prototype,i=r.toString,a=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(15)(r,"toString",(function(){var e=a.call(this);return e==e?i.call(this):"Invalid Date"}))},function(e,t,n){var r=n(9)("toPrimitive"),i=Date.prototype;r in i||n(18)(i,r,n(232))},function(e,t,n){"use strict";var r=n(7),i=n(31);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return i(r(this),"number"!=e)}},function(e,t,n){var r=n(1);r(r.S,"Array",{isArray:n(59)})},function(e,t,n){"use strict";var r=n(21),i=n(1),a=n(14),o=n(117),l=n(86),u=n(10),s=n(87),c=n(88);i(i.S+i.F*!n(60)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,i,f,d=a(e),h="function"==typeof this?this:Array,p=arguments.length,v=p>1?arguments[1]:void 0,g=void 0!==v,y=0,m=c(d);if(g&&(v=r(v,p>2?arguments[2]:void 0,2)),null==m||h==Array&&l(m))for(n=new h(t=u(d.length));t>y;y++)s(n,y,g?v(d[y],y):d[y]);else for(f=m.call(d),n=new h;!(i=f.next()).done;y++)s(n,y,g?o(f,v,[i.value,y],!0):i.value);return n.length=y,n}})},function(e,t,n){"use strict";var r=n(1),i=n(87);r(r.S+r.F*n(6)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)i(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(1),i=n(19),a=[].join;r(r.P+r.F*(n(52)!=Object||!n(20)(a)),"Array",{join:function(e){return a.call(i(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(1),i=n(74),a=n(27),o=n(37),l=n(10),u=[].slice;r(r.P+r.F*n(6)((function(){i&&u.call(i)})),"Array",{slice:function(e,t){var n=l(this.length),r=a(this);if(t=void 0===t?n:t,"Array"==r)return u.call(this,e,t);for(var i=o(e,n),s=o(t,n),c=l(s-i),f=new Array(c),d=0;d<c;d++)f[d]="String"==r?this.charAt(i+d):this[i+d];return f}})},function(e,t,n){"use strict";var r=n(1),i=n(22),a=n(14),o=n(6),l=[].sort,u=[1,2,3];r(r.P+r.F*(o((function(){u.sort(void 0)}))||!o((function(){u.sort(null)}))||!n(20)(l)),"Array",{sort:function(e){return void 0===e?l.call(a(this)):l.call(a(this),i(e))}})},function(e,t,n){"use strict";var r=n(1),i=n(26)(0),a=n(20)([].forEach,!0);r(r.P+r.F*!a,"Array",{forEach:function(e){return i(this,e,arguments[1])}})},function(e,t,n){var r=n(8),i=n(59),a=n(9)("species");e.exports=function(e){var t;return i(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!i(t.prototype)||(t=void 0),r(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(1),i=n(26)(1);r(r.P+r.F*!n(20)([].map,!0),"Array",{map:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(26)(2);r(r.P+r.F*!n(20)([].filter,!0),"Array",{filter:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(26)(3);r(r.P+r.F*!n(20)([].some,!0),"Array",{some:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(26)(4);r(r.P+r.F*!n(20)([].every,!0),"Array",{every:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(119);r(r.P+r.F*!n(20)([].reduce,!0),"Array",{reduce:function(e){return i(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(1),i=n(119);r(r.P+r.F*!n(20)([].reduceRight,!0),"Array",{reduceRight:function(e){return i(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(1),i=n(57)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(o||!n(20)(a)),"Array",{indexOf:function(e){return o?a.apply(this,arguments)||0:i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(19),a=n(23),o=n(10),l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(20)(l)),"Array",{lastIndexOf:function(e){if(u)return l.apply(this,arguments)||0;var t=i(this),n=o(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,a(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(1);r(r.P,"Array",{copyWithin:n(120)}),n(41)("copyWithin")},function(e,t,n){var r=n(1);r(r.P,"Array",{fill:n(89)}),n(41)("fill")},function(e,t,n){"use strict";var r=n(1),i=n(26)(5),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),r(r.P+r.F*a,"Array",{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(41)("find")},function(e,t,n){"use strict";var r=n(1),i=n(26)(6),a="findIndex",o=!0;a in[]&&Array(1)[a]((function(){o=!1})),r(r.P+r.F*o,"Array",{findIndex:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(41)(a)},function(e,t,n){n(49)("Array")},function(e,t,n){var r=n(5),i=n(77),a=n(13).f,o=n(39).f,l=n(84),u=n(61),s=r.RegExp,c=s,f=s.prototype,d=/a/g,h=/a/g,p=new s(d)!==d;if(n(12)&&(!p||n(6)((function(){return h[n(9)("match")]=!1,s(d)!=d||s(h)==h||"/a/i"!=s(d,"i")})))){s=function(e,t){var n=this instanceof s,r=l(e),a=void 0===t;return!n&&r&&e.constructor===s&&a?e:i(p?new c(r&&!a?e.source:e,t):c((r=e instanceof s)?e.source:e,r&&a?u.call(e):t),n?this:f,s)};for(var v=function(e){e in s||a(s,e,{configurable:!0,get:function(){return c[e]},set:function(t){c[e]=t}})},g=o(c),y=0;g.length>y;)v(g[y++]);f.constructor=s,s.prototype=f,n(15)(r,"RegExp",s)}n(49)("RegExp")},function(e,t,n){"use strict";n(123);var r=n(7),i=n(61),a=n(12),o=/./.toString,l=function(e){n(15)(RegExp.prototype,"toString",e,!0)};n(6)((function(){return"/a/b"!=o.call({source:"a",flags:"b"})}))?l((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!a&&e instanceof RegExp?i.call(e):void 0)})):"toString"!=o.name&&l((function(){return o.call(this)}))},function(e,t,n){"use strict";var r=n(7),i=n(10),a=n(92),o=n(62);n(63)("match",1,(function(e,t,n,l){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=l(n,e,this);if(t.done)return t.value;var u=r(e),s=String(this);if(!u.global)return o(u,s);var c=u.unicode;u.lastIndex=0;for(var f,d=[],h=0;null!==(f=o(u,s));){var p=String(f[0]);d[h]=p,""===p&&(u.lastIndex=a(s,i(u.lastIndex),c)),h++}return 0===h?null:d}]}))},function(e,t,n){"use strict";var r=n(7),i=n(14),a=n(10),o=n(23),l=n(92),u=n(62),s=Math.max,c=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;n(63)("replace",2,(function(e,t,n,p){return[function(r,i){var a=e(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,a,i):n.call(String(a),r,i)},function(e,t){var i=p(n,e,this,t);if(i.done)return i.value;var f=r(e),d=String(this),h="function"==typeof t;h||(t=String(t));var g=f.global;if(g){var y=f.unicode;f.lastIndex=0}for(var m=[];;){var b=u(f,d);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(f.lastIndex=l(d,a(f.lastIndex),y))}for(var x,w="",E=0,k=0;k<m.length;k++){b=m[k];for(var S=String(b[0]),T=s(c(o(b.index),d.length),0),P=[],C=1;C<b.length;C++)P.push(void 0===(x=b[C])?x:String(x));var _=b.groups;if(h){var M=[S].concat(P,T,d);void 0!==_&&M.push(_);var O=String(t.apply(void 0,M))}else O=v(S,d,T,P,_,t);T>=E&&(w+=d.slice(E,T)+O,E=T+S.length)}return w+d.slice(E)}];function v(e,t,r,a,o,l){var u=r+e.length,s=a.length,c=h;return void 0!==o&&(o=i(o),c=d),n.call(l,c,(function(n,i){var l;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(u);case"<":l=o[i.slice(1,-1)];break;default:var c=+i;if(0===c)return n;if(c>s){var d=f(c/10);return 0===d?n:d<=s?void 0===a[d-1]?i.charAt(1):a[d-1]+i.charAt(1):n}l=a[c-1]}return void 0===l?"":l}))}}))},function(e,t,n){"use strict";var r=n(7),i=n(108),a=n(62);n(63)("search",1,(function(e,t,n,o){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=o(n,e,this);if(t.done)return t.value;var l=r(e),u=String(this),s=l.lastIndex;i(s,0)||(l.lastIndex=0);var c=a(l,u);return i(l.lastIndex,s)||(l.lastIndex=s),null===c?-1:c.index}]}))},function(e,t,n){"use strict";var r=n(84),i=n(7),a=n(55),o=n(92),l=n(10),u=n(62),s=n(91),c=n(6),f=Math.min,d=[].push,h="length",p=!c((function(){RegExp(4294967295,"y")}));n(63)("split",2,(function(e,t,n,c){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[h]||2!="ab".split(/(?:ab)*/)[h]||4!=".".split(/(.?)(.?)/)[h]||".".split(/()()/)[h]>1||"".split(/.?/)[h]?function(e,t){var i=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(i,e,t);for(var a,o,l,u=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,p=void 0===t?4294967295:t>>>0,v=new RegExp(e.source,c+"g");(a=s.call(v,i))&&!((o=v.lastIndex)>f&&(u.push(i.slice(f,a.index)),a[h]>1&&a.index<i[h]&&d.apply(u,a.slice(1)),l=a[0][h],f=o,u[h]>=p));)v.lastIndex===a.index&&v.lastIndex++;return f===i[h]?!l&&v.test("")||u.push(""):u.push(i.slice(f)),u[h]>p?u.slice(0,p):u}:"0".split(void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var i=e(this),a=null==n?void 0:n[t];return void 0!==a?a.call(n,i,r):v.call(String(i),n,r)},function(e,t){var r=c(v,e,this,t,v!==n);if(r.done)return r.value;var s=i(e),d=String(this),h=a(s,RegExp),g=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(p?"y":"g"),m=new h(p?s:"^(?:"+s.source+")",y),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===d.length)return null===u(m,d)?[d]:[];for(var x=0,w=0,E=[];w<d.length;){m.lastIndex=p?w:0;var k,S=u(m,p?d:d.slice(w));if(null===S||(k=f(l(m.lastIndex+(p?0:w)),d.length))===x)w=o(d,w,g);else{if(E.push(d.slice(x,w)),E.length===b)return E;for(var T=1;T<=S.length-1;T++)if(E.push(S[T]),E.length===b)return E;w=x=k}}return E.push(d.slice(x)),E}]}))},function(e,t,n){var r=n(5),i=n(93).set,a=r.MutationObserver||r.WebKitMutationObserver,o=r.process,l=r.Promise,u="process"==n(27)(o);e.exports=function(){var e,t,n,s=function(){var r,i;for(u&&(r=o.domain)&&r.exit();e;){i=e.fn,e=e.next;try{i()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(u)n=function(){o.nextTick(s)};else if(!a||r.navigator&&r.navigator.standalone)if(l&&l.resolve){var c=l.resolve(void 0);n=function(){c.then(s)}}else n=function(){i.call(r,s)};else{var f=!0,d=document.createTextNode("");new a(s).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var i={fn:r,next:void 0};t&&(t.next=i),e||(e=i,n()),t=i}}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){"use strict";var r=n(127),i=n(42);e.exports=n(66)("Map",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(i(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(i(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(127),i=n(42);e.exports=n(66)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,i=n(5),a=n(26)(0),o=n(15),l=n(32),u=n(107),s=n(128),c=n(8),f=n(42),d=n(42),h=!i.ActiveXObject&&"ActiveXObject"in i,p=l.getWeak,v=Object.isExtensible,g=s.ufstore,y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(e){if(c(e)){var t=p(e);return!0===t?g(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return s.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(66)("WeakMap",y,m,s,!0,!0);d&&h&&(u((r=s.getConstructor(y,"WeakMap")).prototype,m),l.NEED=!0,a(["delete","has","get","set"],(function(e){var t=b.prototype,n=t[e];o(t,e,(function(t,i){if(c(t)&&!v(t)){this._f||(this._f=new r);var a=this._f[e](t,i);return"set"==e?this:a}return n.call(this,t,i)}))})))},function(e,t,n){"use strict";var r=n(128),i=n(42);n(66)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(1),i=n(67),a=n(94),o=n(7),l=n(37),u=n(10),s=n(8),c=n(5).ArrayBuffer,f=n(55),d=a.ArrayBuffer,h=a.DataView,p=i.ABV&&c.isView,v=d.prototype.slice,g=i.VIEW;r(r.G+r.W+r.F*(c!==d),{ArrayBuffer:d}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(e){return p&&p(e)||s(e)&&g in e}}),r(r.P+r.U+r.F*n(6)((function(){return!new d(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(o(this),e);for(var n=o(this).byteLength,r=l(e,n),i=l(void 0===t?n:t,n),a=new(f(this,d))(u(i-r)),s=new h(this),c=new h(a),p=0;r<i;)c.setUint8(p++,s.getUint8(r++));return a}}),n(49)("ArrayBuffer")},function(e,t,n){var r=n(1);r(r.G+r.W+r.F*!n(67).ABV,{DataView:n(94).DataView})},function(e,t,n){n(29)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},function(e,t,n){n(29)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(29)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){var r=n(1),i=n(22),a=n(7),o=(n(5).Reflect||{}).apply,l=Function.apply;r(r.S+r.F*!n(6)((function(){o((function(){}))})),"Reflect",{apply:function(e,t,n){var r=i(e),u=a(n);return o?o(r,t,u):l.call(r,t,u)}})},function(e,t,n){var r=n(1),i=n(38),a=n(22),o=n(7),l=n(8),u=n(6),s=n(109),c=(n(5).Reflect||{}).construct,f=u((function(){function e(){}return!(c((function(){}),[],e)instanceof e)})),d=!u((function(){c((function(){}))}));r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){a(e),o(t);var n=arguments.length<3?e:a(arguments[2]);if(d&&!f)return c(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(s.apply(e,r))}var u=n.prototype,h=i(l(u)?u:Object.prototype),p=Function.apply.call(e,h,t);return l(p)?p:h}})},function(e,t,n){var r=n(13),i=n(1),a=n(7),o=n(31);i(i.S+i.F*n(6)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){a(e),t=o(t,!0),a(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1),i=n(24).f,a=n(7);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=i(a(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(1),i=n(7),a=function(e){this._t=i(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(116)(a,"Object",(function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new a(e)}})},function(e,t,n){var r=n(24),i=n(40),a=n(17),o=n(1),l=n(8),u=n(7);o(o.S,"Reflect",{get:function e(t,n){var o,s,c=arguments.length<3?t:arguments[2];return u(t)===c?t[n]:(o=r.f(t,n))?a(o,"value")?o.value:void 0!==o.get?o.get.call(c):void 0:l(s=i(t))?e(s,n,c):void 0}})},function(e,t,n){var r=n(24),i=n(1),a=n(7);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(a(e),t)}})},function(e,t,n){var r=n(1),i=n(40),a=n(7);r(r.S,"Reflect",{getPrototypeOf:function(e){return i(a(e))}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(1),i=n(7),a=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return i(e),!a||a(e)}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(130)})},function(e,t,n){var r=n(1),i=n(7),a=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){i(e);try{return a&&a(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(13),i=n(24),a=n(40),o=n(17),l=n(1),u=n(33),s=n(7),c=n(8);l(l.S,"Reflect",{set:function e(t,n,l){var f,d,h=arguments.length<4?t:arguments[3],p=i.f(s(t),n);if(!p){if(c(d=a(t)))return e(d,n,l,h);p=u(0)}if(o(p,"value")){if(!1===p.writable||!c(h))return!1;if(f=i.f(h,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=l,r.f(h,n,f)}else r.f(h,n,u(0,l));return!0}return void 0!==p.set&&(p.set.call(h,l),!0)}})},function(e,t,n){var r=n(1),i=n(75);i&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){i.check(e,t);try{return i.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(292),e.exports=n(11).Array.includes},function(e,t,n){"use strict";var r=n(1),i=n(57)(!0);r(r.P,"Array",{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(41)("includes")},function(e,t,n){n(294),e.exports=n(11).Array.flatMap},function(e,t,n){"use strict";var r=n(1),i=n(295),a=n(14),o=n(10),l=n(22),u=n(118);r(r.P,"Array",{flatMap:function(e){var t,n,r=a(this);return l(e),t=o(r.length),n=u(r,0),i(n,r,r,t,0,1,e,arguments[1]),n}}),n(41)("flatMap")},function(e,t,n){"use strict";var r=n(59),i=n(8),a=n(10),o=n(21),l=n(9)("isConcatSpreadable");e.exports=function e(t,n,u,s,c,f,d,h){for(var p,v,g=c,y=0,m=!!d&&o(d,h,3);y<s;){if(y in u){if(p=m?m(u[y],y,n):u[y],v=!1,i(p)&&(v=void 0!==(v=p[l])?!!v:r(p)),v&&f>0)g=e(t,n,p,a(p.length),g,f-1)-1;else{if(g>=9007199254740991)throw TypeError();t[g]=p}g++}y++}return g}},function(e,t,n){n(297),e.exports=n(11).String.padStart},function(e,t,n){"use strict";var r=n(1),i=n(131),a=n(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);r(r.P+r.F*o,"String",{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){n(299),e.exports=n(11).String.padEnd},function(e,t,n){"use strict";var r=n(1),i=n(131),a=n(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);r(r.P+r.F*o,"String",{padEnd:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){n(301),e.exports=n(11).String.trimLeft},function(e,t,n){"use strict";n(47)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},function(e,t,n){n(303),e.exports=n(11).String.trimRight},function(e,t,n){"use strict";n(47)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},function(e,t,n){n(305),e.exports=n(71).f("asyncIterator")},function(e,t,n){n(103)("asyncIterator")},function(e,t,n){n(307),e.exports=n(11).Object.getOwnPropertyDescriptors},function(e,t,n){var r=n(1),i=n(130),a=n(19),o=n(24),l=n(87);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),u=o.f,s=i(r),c={},f=0;s.length>f;)void 0!==(n=u(r,t=s[f++]))&&l(c,t,n);return c}})},function(e,t,n){n(309),e.exports=n(11).Object.values},function(e,t,n){var r=n(1),i=n(132)(!1);r(r.S,"Object",{values:function(e){return i(e)}})},function(e,t,n){n(311),e.exports=n(11).Object.entries},function(e,t,n){var r=n(1),i=n(132)(!0);r(r.S,"Object",{entries:function(e){return i(e)}})},function(e,t,n){"use strict";n(124),n(313),e.exports=n(11).Promise.finally},function(e,t,n){"use strict";var r=n(1),i=n(11),a=n(5),o=n(55),l=n(126);r(r.P+r.R,"Promise",{finally:function(e){var t=o(this,i.Promise||a.Promise),n="function"==typeof e;return this.then(n?function(n){return l(t,e()).then((function(){return n}))}:e,n?function(n){return l(t,e()).then((function(){throw n}))}:e)}})},function(e,t,n){n(315),n(316),n(317),e.exports=n(11)},function(e,t,n){var r=n(5),i=n(1),a=n(65),o=[].slice,l=/MSIE .\./.test(a),u=function(e){return function(t,n){var r=arguments.length>2,i=!!r&&o.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,i)}:t,n)}};i(i.G+i.B+i.F*l,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(e,t,n){var r=n(1),i=n(93);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(e,t,n){for(var r=n(90),i=n(36),a=n(15),o=n(5),l=n(18),u=n(48),s=n(9),c=s("iterator"),f=s("toStringTag"),d=u.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(h),v=0;v<p.length;v++){var g,y=p[v],m=h[y],b=o[y],x=b&&b.prototype;if(x&&(x[c]||l(x,c,d),x[f]||l(x,f,y),u[y]=d,m))for(g in r)x[g]||a(x,g,r[g],!0)}},function(e,t,n){n(319),e.exports=n(134).global},function(e,t,n){var r=n(320);r(r.G,{global:n(95)})},function(e,t,n){var r=n(95),i=n(134),a=n(321),o=n(323),l=n(330),u=function(e,t,n){var s,c,f,d=e&u.F,h=e&u.G,p=e&u.S,v=e&u.P,g=e&u.B,y=e&u.W,m=h?i:i[t]||(i[t]={}),b=m.prototype,x=h?r:p?r[t]:(r[t]||{}).prototype;for(s in h&&(n=t),n)(c=!d&&x&&void 0!==x[s])&&l(m,s)||(f=c?x[s]:n[s],m[s]=h&&"function"!=typeof x[s]?n[s]:g&&c?a(f,r):y&&x[s]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&"function"==typeof f?a(Function.call,f):f,v&&((m.virtual||(m.virtual={}))[s]=f,e&u.R&&b&&!b[s]&&o(b,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,n){var r=n(322);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(324),i=n(329);e.exports=n(97)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(325),i=n(326),a=n(328),o=Object.defineProperty;t.f=n(97)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),i)try{return o(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(96);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(97)&&!n(135)((function(){return 7!=Object.defineProperty(n(327)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(96),i=n(95).document,a=r(i)&&r(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(96);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(136),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,o=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,s=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,p=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||m}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||m}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var k=E.prototype=new w;k.constructor=E,r(k,x.prototype),k.isPureReactComponent=!0;var S={current:null},T=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,i={},o=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)T.call(t,r)&&!P.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:a,type:e,key:o,ref:l,props:i,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var M=/\/+/g,O=[];function N(e,t,n,r){if(O.length){var i=O.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case o:u=!0}}if(u)return r(i,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+A(l=t[s],s);u+=e(l,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=g&&t[g]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+A(l,s++),r,i);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function B(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function z(e,t,n,r,i){var a="";null!=n&&(a=(""+n).replace(M,"$&/")+"/"),I(e,B,t=N(t,a,r,i)),D(t)}var R={current:null};function F(){var e=R.current;if(null===e)throw Error(y(321));return e}var j={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,L,t=N(null,null,t,n)),D(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return z(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(y(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=s,t.PureComponent=E,t.StrictMode=u,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),o=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)T.call(t,c)&&!P.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:a,type:e.type,key:o,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(136),a=n(333);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));function l(e,t,n,r,i,a,o,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var u=!1,s=null,c=!1,f=null,d={onError:function(e){u=!0,s=e}};function h(e,t,n,r,i,a,o,c,f){u=!1,s=null,l.apply(d,arguments)}var p=null,v=null,g=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,i,a,l,d,p){if(h.apply(this,arguments),u){if(!u)throw Error(o(198));var v=s;u=!1,s=null,c||(c=!0,f=v)}}(r,t,void 0,e),e.currentTarget=null}var m=null,b={};function x(){if(m)for(var e in b){var t=b[e],n=m.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!E[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in E[n]=t,n=t.eventTypes){var i=void 0,a=n[r],l=t,u=r;if(k.hasOwnProperty(u))throw Error(o(99,u));k[u]=a;var s=a.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&w(s[i],l,u);i=!0}else a.registrationName?(w(a.registrationName,l,u),i=!0):i=!1;if(!i)throw Error(o(98,r,e))}}}}function w(e,t,n){if(S[e])throw Error(o(100,e));S[e]=t,T[e]=t.eventTypes[n].dependencies}var E=[],k={},S={},T={};function P(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(o(102,t));b[t]=r,n=!0}}n&&x()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),_=null,M=null,O=null;function N(e){if(e=v(e)){if("function"!=typeof _)throw Error(o(280));var t=e.stateNode;t&&(t=p(t),_(e.stateNode,e.type,t))}}function D(e){M?O?O.push(e):O=[e]:M=e}function I(){if(M){var e=M,t=O;if(O=M=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function A(e,t){return e(t)}function L(e,t,n,r,i){return e(t,n,r,i)}function B(){}var z=A,R=!1,F=!1;function j(){null===M&&null===O||(B(),I())}function V(e,t,n){if(F)return e(t,n);F=!0;try{return z(e,t,n)}finally{F=!1,j()}}var q=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,Y={},U={};function X(e,t,n,r,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var H={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){H[e]=new X(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];H[t]=new X(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){H[e]=new X(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){H[e]=new X(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){H[e]=new X(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){H[e]=new X(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){H[e]=new X(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){H[e]=new X(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){H[e]=new X(e,5,!1,e.toLowerCase(),null,!1)}));var G=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(G,K);H[t]=new X(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(G,K);H[t]=new X(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(G,K);H[t]=new X(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){H[e]=new X(e,1,!1,e.toLowerCase(),null,!1)})),H.xlinkHref=new X("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){H[e]=new X(e,1,!1,e.toLowerCase(),null,!0)}));var $=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var i=H.hasOwnProperty(t)?H[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!W.call(U,e)||!W.call(Y,e)&&(q.test(e)?U[e]=!0:(Y[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}$.hasOwnProperty("ReactCurrentDispatcher")||($.ReactCurrentDispatcher={current:null}),$.hasOwnProperty("ReactCurrentBatchConfig")||($.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,ae=J?Symbol.for("react.provider"):60109,oe=J?Symbol.for("react.context"):60110,le=J?Symbol.for("react.concurrent_mode"):60111,ue=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,he=J?Symbol.for("react.block"):60121,pe="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=pe&&e[pe]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case oe:return"Context.Consumer";case ae:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ge(e.type);case he:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,a=ge(e.type);n=null,r&&(n=ge(r.type)),r=a,a="",i?a=" (at "+i.fileName.replace(Z,"")+":"+i.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function me(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=me(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function Te(e,t){Se(e,t);var n=me(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ce(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ce(e,t.type,me(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Pe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ce(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+me(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:me(n)}}function De(e,t){var n=me(t.value),r=me(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Le="http://www.w3.org/2000/svg";function Be(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ze(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Be(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Re,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Le||"innerHTML"in e)e.innerHTML=t;else{for((Re=Re||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Re.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function je(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var qe={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},We={},Ye={};function Ue(e){if(We[e])return We[e];if(!qe[e])return e;var t,n=qe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ye)return We[e]=n[t];return e}C&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete qe.animationend.animation,delete qe.animationiteration.animation,delete qe.animationstart.animation),"TransitionEvent"in window||delete qe.transitionend.transition);var Xe=Ue("animationend"),He=Ue("animationiteration"),Ge=Ue("animationstart"),Ke=Ue("transitionend"),$e="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(o(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return tt(i),e;if(a===r)return tt(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var l=!1,u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(it(e,ot),at)throw Error(o(95));if(c)throw e=f,c=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function ht(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Cn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ut(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,o=e.eventSystemFlags;0===n&&(o|=64);for(var l=null,u=0;u<E.length;u++){var s=E[u];s&&(s=s.extractEvents(r,t,a,i,o))&&(l=rt(l,s))}lt(l)}}function pt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Gt(t,"scroll",!0);break;case"focus":case"blur":Gt(t,"focus",!0),Gt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Gt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===$e.indexOf(e)&&Ht(e,t)}n.set(e,null)}}var vt,gt,yt,mt=!1,bt=[],xt=null,wt=null,Et=null,kt=new Map,St=new Map,Tt=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ct="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function _t(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function Ot(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e=_t(t,n,r,i,a),null!==t&&(null!==(t=_n(t))&&gt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Cn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=_n(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function It(e,t,n){Dt(e)&&n.delete(t)}function At(){for(mt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=_n(e.blockedOn))&&vt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==xt&&Dt(xt)&&(xt=null),null!==wt&&Dt(wt)&&(wt=null),null!==Et&&Dt(Et)&&(Et=null),kt.forEach(It),St.forEach(It)}function Lt(e,t){e.blockedOn===t&&(e.blockedOn=null,mt||(mt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,At)))}function Bt(e){function t(t){return Lt(t,e)}if(0<bt.length){Lt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Lt(xt,e),null!==wt&&Lt(wt,e),null!==Et&&Lt(Et,e),kt.forEach(t),St.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Nt(n),null===n.blockedOn&&Tt.shift()}var zt={},Rt=new Map,Ft=new Map,jt=["abort","abort",Xe,"animationEnd",He,"animationIteration",Ge,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Vt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],a="on"+(i[0].toUpperCase()+i.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),Rt.set(r,a),zt[i]=a}}Vt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Vt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Vt(jt,2);for(var qt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<qt.length;Wt++)Ft.set(qt[Wt],0);var Yt=a.unstable_UserBlockingPriority,Ut=a.unstable_runWithPriority,Xt=!0;function Ht(e,t){Gt(t,e,!1)}function Gt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=$t.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){R||B();var i=Qt,a=R;R=!0;try{L(i,e,t,n,r)}finally{(R=a)||j()}}function $t(e,t,n,r){Ut(Yt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if(Xt)if(0<bt.length&&-1<Pt.indexOf(e))e=_t(null,e,t,n,r),bt.push(e);else{var i=Zt(e,t,n,r);if(null===i)Mt(e,r);else if(-1<Pt.indexOf(e))e=_t(i,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return xt=Ot(xt,e,t,n,r,i),!0;case"dragenter":return wt=Ot(wt,e,t,n,r,i),!0;case"mouseover":return Et=Ot(Et,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return kt.set(a,Ot(kt.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,St.set(a,Ot(St.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Mt(e,r),e=dt(e,r,null,t);try{V(ht,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=Cn(n=ut(r)))){var i=Je(n);if(null===i)n=null;else{var a=i.tag;if(13===a){if(null!==(n=et(i)))return n;n=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{V(ht,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=T[t];for(var r=0;r<t.length;r++)pt(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function hn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn=null,gn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function mn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+kn,Tn="__reactEventHandlers$"+kn,Pn="__reactContainere$"+kn;function Cn(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Pn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Sn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function _n(e){return!(e=e[Sn]||e[Pn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function On(e){return e[Tn]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Dn(e,t){var n=e.stateNode;if(!n)return null;var r=p(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function In(e,t,n){(t=Dn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)In(n[t],"captured",e);for(t=0;t<n.length;t++)In(n[t],"bubbled",e)}}function Ln(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Dn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Bn(e){e&&e.dispatchConfig.registrationName&&Ln(e._targetInst,null,e)}function zn(e){it(e,An)}var Rn=null,Fn=null,jn=null;function Vn(){if(jn)return jn;var e,t,n=Fn,r=n.length,i="value"in Rn?Rn.value:Rn.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return jn=i.slice(e,1<t?1-t:void 0)}function qn(){return!0}function Wn(){return!1}function Yn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?qn:Wn,this.isPropagationStopped=Wn,this}function Un(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Xn(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Hn(e){e.eventPool=[],e.getPooled=Un,e.release=Xn}i(Yn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qn)},persist:function(){this.isPersistent=qn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),Yn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Yn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return i(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Hn(n),n},Hn(Yn);var Gn=Yn.extend({data:null}),Kn=Yn.extend({data:null}),$n=[9,13,27,32],Qn=C&&"CompositionEvent"in window,Zn=null;C&&"documentMode"in document&&(Zn=document.documentMode);var Jn=C&&"TextEvent"in window&&!Zn,er=C&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==$n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var or=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Qn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else or?ir(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(or||a!==nr.compositionStart?a===nr.compositionEnd&&or&&(i=Vn()):(Fn="value"in(Rn=r)?Rn.value:Rn.textContent,or=!0)),a=Gn.getPooled(a,t,n,r),i?a.data=i:null!==(i=ar(n))&&(a.data=i),zn(a),i=a):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(or)return"compositionend"===e||!Qn&&ir(e,t)?(e=Vn(),jn=Fn=Rn=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,zn(t)):t=null,null===i?t:null===t?i:[i,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Yn.getPooled(cr.change,e,t,n)).type="change",D(n),zn(e),e}var dr=null,hr=null;function pr(e){lt(e)}function vr(e){if(we(Mn(e)))return e}function gr(e,t){if("change"===e)return t}var yr=!1;function mr(){dr&&(dr.detachEvent("onpropertychange",br),hr=dr=null)}function br(e){if("value"===e.propertyName&&vr(hr))if(e=fr(hr,e,ut(e)),R)lt(e);else{R=!0;try{A(pr,e)}finally{R=!1,j()}}}function xr(e,t,n){"focus"===e?(mr(),hr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&mr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(hr)}function Er(e,t){if("click"===e)return vr(t)}function kr(e,t){if("input"===e||"change"===e)return vr(t)}C&&(yr=st("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:cr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var i=t?Mn(t):window,a=i.nodeName&&i.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===i.type)var o=gr;else if(sr(i))if(yr)o=kr;else{o=wr;var l=xr}else(a=i.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Er);if(o&&(o=o(e,t)))return fr(o,n,r);l&&l(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Ce(i,"number",i.value)}},Tr=Yn.extend({view:null,detail:null}),Pr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Pr[e])&&!!t[e]}function _r(){return Cr}var Mr=0,Or=0,Nr=!1,Dr=!1,Ir=Tr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:_r,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Or;return Or=e.screenY,Dr?"mousemove"===e.type?e.screenY-t:0:(Dr=!0,0)}}),Ar=Ir.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Lr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Br={eventTypes:Lr,extractEvents:function(e,t,n,r,i){var a="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(a&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!o&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,o)?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?Cn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):o=null;if(o===t)return null;if("mouseout"===e||"mouseover"===e)var l=Ir,u=Lr.mouseLeave,s=Lr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ar,u=Lr.pointerLeave,s=Lr.pointerEnter,c="pointer");if(e=null==o?a:Mn(o),a=null==t?a:Mn(t),(u=l.getPooled(u,o,n,r)).type=c+"leave",u.target=e,u.relatedTarget=a,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=a,n.relatedTarget=e,c=t,(r=o)&&c)e:{for(s=c,o=0,e=l=r;e;e=Nn(e))o++;for(e=0,t=s;t;t=Nn(t))e++;for(;0<o-e;)l=Nn(l),o--;for(;0<e-o;)s=Nn(s),e--;for(;o--;){if(l===s||l===s.alternate)break e;l=Nn(l),s=Nn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(o=r.alternate)||o!==s);)l.push(r),r=Nn(r);for(r=[];c&&c!==s&&(null===(o=c.alternate)||o!==s);)r.push(c),c=Nn(c);for(c=0;c<l.length;c++)Ln(l[c],"bubbled",u);for(c=r.length;0<c--;)Ln(r[c],"captured",n);return 0==(64&i)?[u]:[u,n]}};var zr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Rr=Object.prototype.hasOwnProperty;function Fr(e,t){if(zr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Rr.call(t,n[r])||!zr(e[n[r]],t[n[r]]))return!1;return!0}var jr=C&&"documentMode"in document&&11>=document.documentMode,Vr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qr=null,Wr=null,Yr=null,Ur=!1;function Xr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Ur||null==qr||qr!==cn(n)?null:("selectionStart"in(n=qr)&&pn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Yr&&Fr(Yr,n)?null:(Yr=n,(e=Yn.getPooled(Vr.select,Wr,e,t)).type="select",e.target=qr,zn(e),e))}var Hr={eventTypes:Vr,extractEvents:function(e,t,n,r,i,a){if(!(a=!(i=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Ze(i),a=T.onSelect;for(var o=0;o<a.length;o++)if(!i.has(a[o])){i=!1;break e}i=!0}a=!i}if(a)return null;switch(i=t?Mn(t):window,e){case"focus":(sr(i)||"true"===i.contentEditable)&&(qr=i,Wr=t,Yr=null);break;case"blur":Yr=Wr=qr=null;break;case"mousedown":Ur=!0;break;case"contextmenu":case"mouseup":case"dragend":return Ur=!1,Xr(n,r);case"selectionchange":if(jr)break;case"keydown":case"keyup":return Xr(n,r)}return null}},Gr=Yn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Yn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),$r=Tr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Tr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:_r,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Ir.extend({dataTransfer:null}),ni=Tr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:_r}),ri=Yn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Ir.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ai={eventTypes:zt,extractEvents:function(e,t,n,r){var i=Rt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=$r;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ir;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case Xe:case He:case Ge:e=Gr;break;case Ke:e=ri;break;case"scroll":e=Tr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=Yn}return zn(t=e.getPooled(i,t,n,r)),t}};if(m)throw Error(o(101));m=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),p=On,v=_n,g=Mn,P({SimpleEventPlugin:ai,EnterLeaveEventPlugin:Br,ChangeEventPlugin:Sr,SelectEventPlugin:Hr,BeforeInputEventPlugin:lr});var oi=[],li=-1;function ui(e){0>li||(e.current=oi[li],oi[li]=null,li--)}function si(e,t){li++,oi[li]=e.current,e.current=t}var ci={},fi={current:ci},di={current:!1},hi=ci;function pi(e,t){var n=e.type.contextTypes;if(!n)return ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vi(e){return null!=(e=e.childContextTypes)}function gi(){ui(di),ui(fi)}function yi(e,t,n){if(fi.current!==ci)throw Error(o(168));si(fi,t),si(di,n)}function mi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(o(108,ge(t)||"Unknown",a));return i({},n,{},r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ci,hi=fi.current,si(fi,e),si(di,di.current),!0}function xi(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=mi(e,t,hi),r.__reactInternalMemoizedMergedChildContext=e,ui(di),ui(fi),si(fi,e)):ui(di),si(di,n)}var wi=a.unstable_runWithPriority,Ei=a.unstable_scheduleCallback,ki=a.unstable_cancelCallback,Si=a.unstable_requestPaint,Ti=a.unstable_now,Pi=a.unstable_getCurrentPriorityLevel,Ci=a.unstable_ImmediatePriority,_i=a.unstable_UserBlockingPriority,Mi=a.unstable_NormalPriority,Oi=a.unstable_LowPriority,Ni=a.unstable_IdlePriority,Di={},Ii=a.unstable_shouldYield,Ai=void 0!==Si?Si:function(){},Li=null,Bi=null,zi=!1,Ri=Ti(),Fi=1e4>Ri?Ti:function(){return Ti()-Ri};function ji(){switch(Pi()){case Ci:return 99;case _i:return 98;case Mi:return 97;case Oi:return 96;case Ni:return 95;default:throw Error(o(332))}}function Vi(e){switch(e){case 99:return Ci;case 98:return _i;case 97:return Mi;case 96:return Oi;case 95:return Ni;default:throw Error(o(332))}}function qi(e,t){return e=Vi(e),wi(e,t)}function Wi(e,t,n){return e=Vi(e),Ei(e,t,n)}function Yi(e){return null===Li?(Li=[e],Bi=Ei(Ci,Xi)):Li.push(e),Di}function Ui(){if(null!==Bi){var e=Bi;Bi=null,ki(e)}Xi()}function Xi(){if(!zi&&null!==Li){zi=!0;var e=0;try{var t=Li;qi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Li=null}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),Ei(Ci,Ui),t}finally{zi=!1}}}function Hi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Gi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ki={current:null},$i=null,Qi=null,Zi=null;function Ji(){Zi=Qi=$i=null}function ea(e){var t=Ki.current;ui(Ki),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function na(e,t){$i=e,Zi=Qi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Oo=!0),e.firstContext=null)}function ra(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qi){if(null===$i)throw Error(o(308));Qi=t,$i.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qi=Qi.next=t;return e._currentValue}var ia=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function la(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.alternate;null!==n&&oa(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function ca(e,t,n,r){var a=e.updateQueue;ia=!1;var o=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==o){var u=o.next;o.next=l.next,l.next=u}o=l,a.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==o){u=o.next;var s=a.baseState,c=0,f=null,d=null,h=null;if(null!==u)for(var p=u;;){if((l=p.expirationTime)<r){var v={expirationTime:p.expirationTime,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null};null===h?(d=h=v,f=s):h=h.next=v,l>c&&(c=l)}else{null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null}),au(l,p.suspenseConfig);e:{var g=e,y=p;switch(l=t,v=n,y.tag){case 1:if("function"==typeof(g=y.payload)){s=g.call(v,s,l);break e}s=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(l="function"==typeof(g=y.payload)?g.call(v,s,l):g))break e;s=i({},s,l);break e;case 2:ia=!0}}null!==p.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[p]:l.push(p))}if(null===(p=p.next)||p===u){if(null===(l=a.shared.pending))break;p=o.next=l.next,l.next=u,a.baseQueue=o=l,a.shared.pending=null}}null===h?f=s:h.next=d,a.baseState=f,a.baseQueue=h,ou(c),e.expirationTime=c,e.memoizedState=s}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(o(191,r));r.call(i)}}}var da=$.ReactCurrentBatchConfig,ha=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Xl(),i=da.suspense;(i=la(r=Hl(r,e,i),i)).payload=t,null!=n&&(i.callback=n),ua(e,i),Gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Xl(),i=da.suspense;(i=la(r=Hl(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),ua(e,i),Gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Xl(),r=da.suspense;(r=la(n=Hl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ua(e,r),Gl(e,n)}};function ga(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(i,a))}function ya(e,t,n){var r=!1,i=ci,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(i=vi(t)?hi:fi.current,a=(r=null!=(r=t.contextTypes))?pi(e,i):ci),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function ma(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function ba(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ha,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=ra(a):(a=vi(t)?hi:fi.current,i.context=pi(e,a)),ca(e,n,i,r),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&va.enqueueReplaceState(i,i.state,null),ca(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xa=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ha&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ka(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Pu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=Cu(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ou(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=_u(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Cu(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case te:return(t=Ou(t,e.mode,n)).return=e,t}if(xa(t)||ve(t))return(t=_u(t,e.mode,n,null)).return=e,t;Ea(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):s(e,t,n,r):null;case te:return n.key===i?c(e,t,n,r):null}if(xa(n)||ve(n))return null!==i?null:f(e,t,n,r,null);Ea(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):s(t,e,r,i);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xa(r)||ve(r))return f(t,e=e.get(n)||null,r,i,null);Ea(t,r)}return null}function v(i,o,l,u){for(var s=null,c=null,f=o,v=o=0,g=null;null!==f&&v<l.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var y=h(i,f,l[v],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(i,f),o=a(y,o,v),null===c?s=y:c.sibling=y,c=y,f=g}if(v===l.length)return n(i,f),s;if(null===f){for(;v<l.length;v++)null!==(f=d(i,l[v],u))&&(o=a(f,o,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(i,f);v<l.length;v++)null!==(g=p(f,i,v,l[v],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),o=a(g,o,v),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(i,e)})),s}function g(i,l,u,s){var c=ve(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,v=l,g=l=0,y=null,m=u.next();null!==v&&!m.done;g++,m=u.next()){v.index>g?(y=v,v=null):y=v.sibling;var b=h(i,v,m.value,s);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(i,v),l=a(b,l,g),null===f?c=b:f.sibling=b,f=b,v=y}if(m.done)return n(i,v),c;if(null===v){for(;!m.done;g++,m=u.next())null!==(m=d(i,m.value,s))&&(l=a(m,l,g),null===f?c=m:f.sibling=m,f=m);return c}for(v=r(i,v);!m.done;g++,m=u.next())null!==(m=p(v,i,g,m.value,s))&&(e&&null!==m.alternate&&v.delete(null===m.key?g:m.key),l=a(m,l,g),null===f?c=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(i,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case ee:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===ne){n(e,s.sibling),(r=i(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=i(s,a.props)).ref=wa(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===ne?((r=_u(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Cu(a.type,a.key,a.props,null,e.mode,u)).ref=wa(e,r,a),u.return=e,e=u)}return l(e);case te:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=i(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ou(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,a)).return=e,e=r):(n(e,r),(r=Mu(a,e.mode,u)).return=e,e=r),l(e);if(xa(a))return v(e,r,a,u);if(ve(a))return g(e,r,a,u);if(c&&Ea(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Sa=ka(!0),Ta=ka(!1),Pa={},Ca={current:Pa},_a={current:Pa},Ma={current:Pa};function Oa(e){if(e===Pa)throw Error(o(174));return e}function Na(e,t){switch(si(Ma,t),si(_a,e),si(Ca,Pa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ze(null,"");break;default:t=ze(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ui(Ca),si(Ca,t)}function Da(){ui(Ca),ui(_a),ui(Ma)}function Ia(e){Oa(Ma.current);var t=Oa(Ca.current),n=ze(t,e.type);t!==n&&(si(_a,e),si(Ca,n))}function Aa(e){_a.current===e&&(ui(Ca),ui(_a))}var La={current:0};function Ba(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function za(e,t){return{responder:e,props:t}}var Ra=$.ReactCurrentDispatcher,Fa=$.ReactCurrentBatchConfig,ja=0,Va=null,qa=null,Wa=null,Ya=!1;function Ua(){throw Error(o(321))}function Xa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!zr(e[n],t[n]))return!1;return!0}function Ha(e,t,n,r,i,a){if(ja=a,Va=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ra.current=null===e||null===e.memoizedState?yo:mo,e=n(r,i),t.expirationTime===ja){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(o(301));a+=1,Wa=qa=null,t.updateQueue=null,Ra.current=bo,e=n(r,i)}while(t.expirationTime===ja)}if(Ra.current=go,t=null!==qa&&null!==qa.next,ja=0,Wa=qa=Va=null,Ya=!1,t)throw Error(o(300));return e}function Ga(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Wa?Va.memoizedState=Wa=e:Wa=Wa.next=e,Wa}function Ka(){if(null===qa){var e=Va.alternate;e=null!==e?e.memoizedState:null}else e=qa.next;var t=null===Wa?Va.memoizedState:Wa.next;if(null!==t)Wa=t,qa=e;else{if(null===e)throw Error(o(310));e={memoizedState:(qa=e).memoizedState,baseState:qa.baseState,baseQueue:qa.baseQueue,queue:qa.queue,next:null},null===Wa?Va.memoizedState=Wa=e:Wa=Wa.next=e}return Wa}function $a(e,t){return"function"==typeof t?t(e):t}function Qa(e){var t=Ka(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=qa,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var l=i.next;i.next=a.next,a.next=l}r.baseQueue=i=a,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var u=l=a=null,s=i;do{var c=s.expirationTime;if(c<ja){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,c>Va.expirationTime&&(Va.expirationTime=c,ou(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),au(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==i);null===u?a=r:u.next=l,zr(r,t.memoizedState)||(Oo=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ka(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var l=i=i.next;do{a=e(a,l.action),l=l.next}while(l!==i);zr(a,t.memoizedState)||(Oo=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ja(e){var t=Ga();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:$a,lastRenderedState:e}).dispatch=vo.bind(null,Va,e),[t.memoizedState,e]}function eo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Va.updateQueue)?(t={lastEffect:null},Va.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function to(){return Ka().memoizedState}function no(e,t,n,r){var i=Ga();Va.effectTag|=e,i.memoizedState=eo(1|t,n,void 0,void 0===r?null:r)}function ro(e,t,n,r){var i=Ka();r=void 0===r?null:r;var a=void 0;if(null!==qa){var o=qa.memoizedState;if(a=o.destroy,null!==r&&Xa(r,o.deps))return void eo(t,n,a,r)}Va.effectTag|=e,i.memoizedState=eo(1|t,n,a,r)}function io(e,t){return no(516,4,e,t)}function ao(e,t){return ro(516,4,e,t)}function oo(e,t){return ro(4,2,e,t)}function lo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function uo(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,2,lo.bind(null,t,e),n)}function so(){}function co(e,t){return Ga().memoizedState=[e,void 0===t?null:t],e}function fo(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ho(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function po(e,t,n){var r=ji();qi(98>r?98:r,(function(){e(!0)})),qi(97<r?97:r,(function(){var r=Fa.suspense;Fa.suspense=void 0===t?null:t;try{e(!1),n()}finally{Fa.suspense=r}}))}function vo(e,t,n){var r=Xl(),i=da.suspense;i={expirationTime:r=Hl(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Va||null!==a&&a===Va)Ya=!0,i.expirationTime=ja,Va.expirationTime=ja;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,l=a(o,n);if(i.eagerReducer=a,i.eagerState=l,zr(l,o))return}catch(e){}Gl(e,r)}}var go={readContext:ra,useCallback:Ua,useContext:Ua,useEffect:Ua,useImperativeHandle:Ua,useLayoutEffect:Ua,useMemo:Ua,useReducer:Ua,useRef:Ua,useState:Ua,useDebugValue:Ua,useResponder:Ua,useDeferredValue:Ua,useTransition:Ua},yo={readContext:ra,useCallback:co,useContext:ra,useEffect:io,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,no(4,2,lo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return no(4,2,e,t)},useMemo:function(e,t){var n=Ga();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ga();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=vo.bind(null,Va,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ga().memoizedState=e},useState:Ja,useDebugValue:so,useResponder:za,useDeferredValue:function(e,t){var n=Ja(e),r=n[0],i=n[1];return io((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{i(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ja(!1),n=t[0];return t=t[1],[co(po.bind(null,t,e),[t,e]),n]}},mo={readContext:ra,useCallback:fo,useContext:ra,useEffect:ao,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:ho,useReducer:Qa,useRef:to,useState:function(){return Qa($a)},useDebugValue:so,useResponder:za,useDeferredValue:function(e,t){var n=Qa($a),r=n[0],i=n[1];return ao((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{i(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qa($a),n=t[0];return t=t[1],[fo(po.bind(null,t,e),[t,e]),n]}},bo={readContext:ra,useCallback:fo,useContext:ra,useEffect:ao,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:ho,useReducer:Za,useRef:to,useState:function(){return Za($a)},useDebugValue:so,useResponder:za,useDeferredValue:function(e,t){var n=Za($a),r=n[0],i=n[1];return ao((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{i(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za($a),n=t[0];return t=t[1],[fo(po.bind(null,t,e),[t,e]),n]}},xo=null,wo=null,Eo=!1;function ko(e,t){var n=Su(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function So(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function To(e){if(Eo){var t=wo;if(t){var n=t;if(!So(e,t)){if(!(t=wn(n.nextSibling))||!So(e,t))return e.effectTag=-1025&e.effectTag|2,Eo=!1,void(xo=e);ko(xo,n)}xo=e,wo=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Eo=!1,xo=e}}function Po(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xo=e}function Co(e){if(e!==xo)return!1;if(!Eo)return Po(e),Eo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!mn(t,e.memoizedProps))for(t=wo;t;)ko(e,t),t=wn(t.nextSibling);if(Po(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wo=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wo=null}}else wo=xo?wn(e.stateNode.nextSibling):null;return!0}function _o(){wo=xo=null,Eo=!1}var Mo=$.ReactCurrentOwner,Oo=!1;function No(e,t,n,r){t.child=null===e?Ta(t,null,n,r):Sa(t,e.child,n,r)}function Do(e,t,n,r,i){n=n.render;var a=t.ref;return na(t,i),r=Ha(e,t,n,r,a,i),null===e||Oo?(t.effectTag|=1,No(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Go(e,t,i))}function Io(e,t,n,r,i,a){if(null===e){var o=n.type;return"function"!=typeof o||Tu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Cu(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ao(e,t,o,r,i,a))}return o=e.child,i<a&&(i=o.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(i,r)&&e.ref===t.ref)?Go(e,t,a):(t.effectTag|=1,(e=Pu(o,r)).ref=t.ref,e.return=t,t.child=e)}function Ao(e,t,n,r,i,a){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Oo=!1,i<a)?(t.expirationTime=e.expirationTime,Go(e,t,a)):Bo(e,t,n,r,a)}function Lo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Bo(e,t,n,r,i){var a=vi(n)?hi:fi.current;return a=pi(t,a),na(t,i),n=Ha(e,t,n,r,a,i),null===e||Oo?(t.effectTag|=1,No(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Go(e,t,i))}function zo(e,t,n,r,i){if(vi(n)){var a=!0;bi(t)}else a=!1;if(na(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ya(t,n,r),ba(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var u=o.context,s=n.contextType;"object"==typeof s&&null!==s?s=ra(s):s=pi(t,s=vi(n)?hi:fi.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||u!==s)&&ma(t,o,r,s),ia=!1;var d=t.memoizedState;o.state=d,ca(t,r,o,i),u=t.memoizedState,l!==r||d!==u||di.current||ia?("function"==typeof c&&(pa(t,n,c,r),u=t.memoizedState),(l=ia||ga(t,n,l,r,d,u,s))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=s,r=l):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,oa(e,t),l=t.memoizedProps,o.props=t.type===t.elementType?l:Gi(t.type,l),u=o.context,"object"==typeof(s=n.contextType)&&null!==s?s=ra(s):s=pi(t,s=vi(n)?hi:fi.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||u!==s)&&ma(t,o,r,s),ia=!1,u=t.memoizedState,o.state=u,ca(t,r,o,i),d=t.memoizedState,l!==r||u!==d||di.current||ia?("function"==typeof c&&(pa(t,n,c,r),d=t.memoizedState),(c=ia||ga(t,n,l,r,u,d,s))?(f||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,d,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),o.props=r,o.state=d,o.context=s,r=c):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ro(e,t,n,r,a,i)}function Ro(e,t,n,r,i,a){Lo(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return i&&xi(t,n,!1),Go(e,t,a);r=t.stateNode,Mo.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):No(e,t,l,a),t.memoizedState=r.state,i&&xi(t,n,!0),t.child}function Fo(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),Na(e,t.containerInfo)}var jo,Vo,qo,Wo={dehydrated:null,retryTime:0};function Yo(e,t,n){var r,i=t.mode,a=t.pendingProps,o=La.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),si(La,1&o),null===e){if(void 0!==a.fallback&&To(t),l){if(l=a.fallback,(a=_u(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=_u(l,i,n,null)).return=t,a.sibling=n,t.memoizedState=Wo,t.child=a,n}return i=a.children,t.memoizedState=null,t.child=Ta(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,l){if(a=a.fallback,(n=Pu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(i=Pu(i,a)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Wo,t.child=n,i}return n=Sa(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=_u(null,i,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=_u(l,i,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Wo,t.child=a,n}return t.memoizedState=null,t.child=Sa(t,e,a.children,n)}function Uo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ta(e.return,t)}function Xo(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i,o.lastEffect=a)}function Ho(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(No(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uo(e,n);else if(19===e.tag)Uo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(La,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Ba(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Xo(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Ba(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Xo(t,!0,n,null,a,t.lastEffect);break;case"together":Xo(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Go(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ou(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Pu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Pu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ko(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $o(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&gi(),null;case 3:return Da(),ui(di),ui(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Co(t)||(t.effectTag|=4),null;case 5:Aa(t),n=Oa(Ma.current);var a=t.type;if(null!==e&&null!=t.stateNode)Vo(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Oa(Ca.current),Co(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[Sn]=t,r[Tn]=l,a){case"iframe":case"object":case"embed":Ht("load",r);break;case"video":case"audio":for(e=0;e<$e.length;e++)Ht($e[e],r);break;case"source":Ht("error",r);break;case"img":case"image":case"link":Ht("error",r),Ht("load",r);break;case"form":Ht("reset",r),Ht("submit",r);break;case"details":Ht("toggle",r);break;case"input":ke(r,l),Ht("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ht("invalid",r),un(n,"onChange");break;case"textarea":Ne(r,l),Ht("invalid",r),un(n,"onChange")}for(var u in an(a,l),e=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):S.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(a){case"input":xe(r),Pe(r,l,!0);break;case"textarea":xe(r),Ie(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Be(a)),e===ln?"script"===a?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(a,{is:r.is}):(e=u.createElement(a),"select"===a&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,a),e[Sn]=t,e[Tn]=r,jo(e,t),t.stateNode=e,u=on(a,r),a){case"iframe":case"object":case"embed":Ht("load",e),s=r;break;case"video":case"audio":for(s=0;s<$e.length;s++)Ht($e[s],e);s=r;break;case"source":Ht("error",e),s=r;break;case"img":case"image":case"link":Ht("error",e),Ht("load",e),s=r;break;case"form":Ht("reset",e),Ht("submit",e),s=r;break;case"details":Ht("toggle",e),s=r;break;case"input":ke(e,r),s=Ee(e,r),Ht("invalid",e),un(n,"onChange");break;case"option":s=_e(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=i({},r,{value:void 0}),Ht("invalid",e),un(n,"onChange");break;case"textarea":Ne(e,r),s=Oe(e,r),Ht("invalid",e),un(n,"onChange");break;default:s=r}an(a,s);var c=s;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===l?"string"==typeof f?("textarea"!==a||""!==f)&&je(e,f):"number"==typeof f&&je(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&Q(e,l,f,u))}switch(a){case"input":xe(e),Pe(e,r,!1);break;case"textarea":xe(e),Ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+me(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}yn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)qo(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Oa(Ma.current),Oa(Ca.current),Co(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return ui(La),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Co(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?Cl===xl&&(Cl=wl):(Cl!==xl&&Cl!==wl||(Cl=El),0!==Dl&&null!==Sl&&(Iu(Sl,Pl),Au(Sl,Dl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Da(),null;case 10:return ea(t),null;case 17:return vi(t.type)&&gi(),null;case 19:if(ui(La),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Ko(r,!1);else if(Cl!==xl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Ba(l))){for(t.effectTag|=64,Ko(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return si(La,1&La.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Ba(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ko(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fi()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Ko(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fi()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fi(),n.sibling=null,t=La.current,si(La,a?1&t|2:1&t),n):null}throw Error(o(156,t.tag))}function Qo(e){switch(e.tag){case 1:vi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Da(),ui(di),ui(fi),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return Aa(e),null;case 13:return ui(La),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ui(La),null;case 4:return Da(),null;case 10:return ea(e),null;default:return null}}function Zo(e,t){return{value:e,source:t,stack:ye(t)}}jo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Vo=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var l,u,s=t.stateNode;switch(Oa(Ca.current),e=null,n){case"input":o=Ee(s,o),r=Ee(s,r),e=[];break;case"option":o=_e(s,o),r=_e(s,r),e=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":o=Oe(s,o),r=Oe(s,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(l in an(n,r),n=null,o)if(!r.hasOwnProperty(l)&&o.hasOwnProperty(l)&&null!=o[l])if("style"===l)for(u in s=o[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=o?o[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(S.hasOwnProperty(l)?(null!=c&&un(a,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},qo=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Jo="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){mu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Gi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(o(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void il(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Gi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Bt(n)))));case 19:case 17:case 20:case 21:return}throw Error(o(163))}function ol(e,t,n){switch("function"==typeof Eu&&Eu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;qi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){mu(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){mu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(je(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,a=5===i||6===i;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,a=5===i||6===i;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,i,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(o(160));switch(r=l.stateNode,l.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,s=a,c=n,f=s;;)if(ol(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=r,s=a.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,i=!0,a.child.return=a,a=a.child;continue}}else if(ol(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Tn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),on(e,i),t=on(e,r),i=0;i<a.length;i+=2){var l=a[i],u=a[i+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Fe(n,u):"children"===l?je(n,u):Q(n,l,u,t)}switch(e){case"input":Te(n,r);break;case"textarea":De(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Bt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Al=Fi()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,a.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(o(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jo),t.forEach((function(t){var r=xu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var hl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=la(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bl||(Bl=!0,zl=r),el(e,t)},n}function vl(e,t,n){(n=la(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return el(e,t),r(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Rl?Rl=new Set([this]):Rl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var gl,yl=Math.ceil,ml=$.ReactCurrentDispatcher,bl=$.ReactCurrentOwner,xl=0,wl=3,El=4,kl=0,Sl=null,Tl=null,Pl=0,Cl=xl,_l=null,Ml=1073741823,Ol=1073741823,Nl=null,Dl=0,Il=!1,Al=0,Ll=null,Bl=!1,zl=null,Rl=null,Fl=!1,jl=null,Vl=90,ql=null,Wl=0,Yl=null,Ul=0;function Xl(){return 0!=(48&kl)?1073741821-(Fi()/10|0):0!==Ul?Ul:Ul=1073741821-(Fi()/10|0)}function Hl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=ji();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return Pl;if(null!==n)e=Hi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Hi(e,150,100);break;case 97:case 96:e=Hi(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==Sl&&e===Pl&&--e,e}function Gl(e,t){if(50<Wl)throw Wl=0,Yl=null,Error(o(185));if(null!==(e=Kl(e,t))){var n=ji();1073741823===t?0!=(8&kl)&&0==(48&kl)?Jl(e):(Ql(e),0===kl&&Ui()):Ql(e),0==(4&kl)||98!==n&&99!==n||(null===ql?ql=new Map([[e,t]]):(void 0===(n=ql.get(e))||n>t)&&ql.set(e,t))}}function Kl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Sl===i&&(ou(t),Cl===El&&Iu(i,Pl)),Au(i,t)),i}function $l(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Du(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Ql(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Yi(Jl.bind(null,e));else{var t=$l(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Xl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Di&&ki(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Yi(Jl.bind(null,e)):Wi(r,Zl.bind(null,e),{timeout:10*(1073741821-t)-Fi()}),e.callbackNode=t}}}function Zl(e,t){if(Ul=0,t)return Lu(e,t=Xl()),Ql(e),null;var n=$l(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(o(327));if(vu(),e===Sl&&n===Pl||nu(e,n),null!==Tl){var r=kl;kl|=16;for(var i=iu();;)try{uu();break}catch(t){ru(e,t)}if(Ji(),kl=r,ml.current=i,1===Cl)throw t=_l,nu(e,n),Iu(e,n),Ql(e),t;if(null===Tl)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Cl,Sl=null,r){case xl:case 1:throw Error(o(345));case 2:Lu(e,2<n?2:n);break;case wl:if(Iu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),1073741823===Ml&&10<(i=Al+500-Fi())){if(Il){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(a=$l(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),i);break}du(e);break;case El:if(Iu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),Il&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(i=$l(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ol?r=10*(1073741821-Ol)-Fi():1073741823===Ml?r=0:(r=10*(1073741821-Ml)-5e3,0>(r=(i=Fi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Ml&&null!==Nl){a=Ml;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(i=0|l.busyDelayMs,r=(a=Fi()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=i?0:i+r-a),10<r){Iu(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(o(329))}if(Ql(e),e.callbackNode===t)return Zl.bind(null,e)}}return null}function Jl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(o(327));if(vu(),e===Sl&&t===Pl||nu(e,t),null!==Tl){var n=kl;kl|=16;for(var r=iu();;)try{lu();break}catch(t){ru(e,t)}if(Ji(),kl=n,ml.current=r,1===Cl)throw n=_l,nu(e,t),Iu(e,t),Ql(e),n;if(null!==Tl)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Sl=null,du(e),Ql(e)}return null}function eu(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&Ui()}}function tu(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&Ui()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&gi();break;case 3:Da(),ui(di),ui(fi);break;case 5:Aa(r);break;case 4:Da();break;case 13:case 19:ui(La);break;case 10:ea(r)}n=n.return}Sl=e,Tl=Pu(e.current,null),Pl=t,Cl=xl,_l=null,Ol=Ml=1073741823,Nl=null,Dl=0,Il=!1}function ru(e,t){for(;;){try{if(Ji(),Ra.current=go,Ya)for(var n=Va.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(ja=0,Wa=qa=Va=null,Ya=!1,null===Tl||null===Tl.return)return Cl=1,_l=t,Tl=null;e:{var i=e,a=Tl.return,o=Tl,l=t;if(t=Pl,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&o.mode)){var s=o.alternate;s?(o.updateQueue=s.updateQueue,o.memoizedState=s.memoizedState,o.expirationTime=s.expirationTime):(o.updateQueue=null,o.memoizedState=null)}var c=0!=(1&La.current),f=a;do{var d;if(d=13===f.tag){var h=f.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var p=f.memoizedProps;d=void 0!==p.fallback&&(!0!==p.unstable_avoidThisFallback||!c)}}if(d){var v=f.updateQueue;if(null===v){var g=new Set;g.add(u),f.updateQueue=g}else v.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var y=la(1073741823,null);y.tag=2,ua(o,y)}o.expirationTime=1073741823;break e}l=void 0,o=t;var m=i.pingCache;if(null===m?(m=i.pingCache=new hl,l=new Set,m.set(u,l)):void 0===(l=m.get(u))&&(l=new Set,m.set(u,l)),!l.has(o)){l.add(o);var b=bu.bind(null,i,u,o);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ge(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(o))}5!==Cl&&(Cl=2),l=Zo(l,o),f=a;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,sa(f,pl(f,u,t));break e;case 1:u=l;var x=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Rl||!Rl.has(w)))){f.effectTag|=4096,f.expirationTime=t,sa(f,vl(f,u,t));break e}}f=f.return}while(null!==f)}Tl=cu(Tl)}catch(e){t=e;continue}break}}function iu(){var e=ml.current;return ml.current=go,null===e?go:e}function au(e,t){e<Ml&&2<e&&(Ml=e),null!==t&&e<Ol&&2<e&&(Ol=e,Nl=t)}function ou(e){e>Dl&&(Dl=e)}function lu(){for(;null!==Tl;)Tl=su(Tl)}function uu(){for(;null!==Tl&&!Ii();)Tl=su(Tl)}function su(e){var t=gl(e.alternate,e,Pl);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),bl.current=null,t}function cu(e){Tl=e;do{var t=Tl.alternate;if(e=Tl.return,0==(2048&Tl.effectTag)){if(t=$o(t,Tl,Pl),1===Pl||1!==Tl.childExpirationTime){for(var n=0,r=Tl.child;null!==r;){var i=r.expirationTime,a=r.childExpirationTime;i>n&&(n=i),a>n&&(n=a),r=r.sibling}Tl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Tl.firstEffect),null!==Tl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Tl.firstEffect),e.lastEffect=Tl.lastEffect),1<Tl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Tl:e.firstEffect=Tl,e.lastEffect=Tl))}else{if(null!==(t=Qo(Tl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Tl.sibling))return t;Tl=e}while(null!==Tl);return Cl===xl&&(Cl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=ji();return qi(99,hu.bind(null,e,t)),null}function hu(e,t){do{vu()}while(null!==jl);if(0!=(48&kl))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fu(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Sl&&(Tl=Sl=null,Pl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var a=kl;kl|=32,bl.current=null,vn=Xt;var l=hn();if(pn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,h=-1,p=-1,v=0,g=0,y=l,m=null;t:for(;;){for(var b;y!==u||0!==c&&3!==y.nodeType||(h=d+c),y!==f||0!==s&&3!==y.nodeType||(p=d+s),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)m=y,y=b;for(;;){if(y===l)break t;if(m===u&&++v===c&&(h=d),m===f&&++g===s&&(p=d),null!==(b=y.nextSibling))break;m=(y=m).parentNode}y=b}u=-1===h||-1===p?null:{start:h,end:p}}else u=null}u=u||{start:0,end:0}}else u=null;gn={activeElementDetached:null,focusedElem:l,selectionRange:u},Xt=!1,Ll=i;do{try{pu()}catch(e){if(null===Ll)throw Error(o(330));mu(Ll,e),Ll=Ll.nextEffect}}while(null!==Ll);Ll=i;do{try{for(l=e,u=t;null!==Ll;){var x=Ll.effectTag;if(16&x&&je(Ll.stateNode,""),128&x){var w=Ll.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&x){case 2:sl(Ll),Ll.effectTag&=-3;break;case 6:sl(Ll),Ll.effectTag&=-3,fl(Ll.alternate,Ll);break;case 1024:Ll.effectTag&=-1025;break;case 1028:Ll.effectTag&=-1025,fl(Ll.alternate,Ll);break;case 4:fl(Ll.alternate,Ll);break;case 8:cl(l,c=Ll,u),ll(c)}Ll=Ll.nextEffect}}catch(e){if(null===Ll)throw Error(o(330));mu(Ll,e),Ll=Ll.nextEffect}}while(null!==Ll);if(E=gn,w=hn(),x=E.focusedElem,u=E.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==u&&pn(x)&&(w=u.start,void 0===(E=u.end)&&(E=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(E,x.value.length)):(E=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),c=x.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!E.extend&&l>u&&(c=u,u=l,l=c),c=dn(x,l),f=dn(x,u),c&&f&&(1!==E.rangeCount||E.anchorNode!==c.node||E.anchorOffset!==c.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),E.removeAllRanges(),l>u?(E.addRange(w),E.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),E.addRange(w))))),w=[];for(E=x;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(E=w[x]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Xt=!!vn,gn=vn=null,e.current=n,Ll=i;do{try{for(x=e;null!==Ll;){var k=Ll.effectTag;if(36&k&&al(x,Ll.alternate,Ll),128&k){w=void 0;var S=Ll.ref;if(null!==S){var T=Ll.stateNode;switch(Ll.tag){case 5:w=T;break;default:w=T}"function"==typeof S?S(w):S.current=w}}Ll=Ll.nextEffect}}catch(e){if(null===Ll)throw Error(o(330));mu(Ll,e),Ll=Ll.nextEffect}}while(null!==Ll);Ll=null,Ai(),kl=a}else e.current=n;if(Fl)Fl=!1,jl=e,Vl=t;else for(Ll=i;null!==Ll;)t=Ll.nextEffect,Ll.nextEffect=null,Ll=t;if(0===(t=e.firstPendingTime)&&(Rl=null),1073741823===t?e===Yl?Wl++:(Wl=0,Yl=e):Wl=0,"function"==typeof wu&&wu(n.stateNode,r),Ql(e),Bl)throw Bl=!1,e=zl,zl=null,e;return 0!=(8&kl)||Ui(),null}function pu(){for(;null!==Ll;){var e=Ll.effectTag;0!=(256&e)&&nl(Ll.alternate,Ll),0==(512&e)||Fl||(Fl=!0,Wi(97,(function(){return vu(),null}))),Ll=Ll.nextEffect}}function vu(){if(90!==Vl){var e=97<Vl?97:Vl;return Vl=90,qi(e,gu)}}function gu(){if(null===jl)return!1;var e=jl;if(jl=null,0!=(48&kl))throw Error(o(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),il(5,n)}}catch(t){if(null===e)throw Error(o(330));mu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,Ui(),!0}function yu(e,t,n){ua(e,t=pl(e,t=Zo(n,t),1073741823)),null!==(e=Kl(e,1073741823))&&Ql(e)}function mu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Rl||!Rl.has(r))){ua(n,e=vl(n,e=Zo(t,e),1073741823)),null!==(n=Kl(n,1073741823))&&Ql(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Sl===e&&Pl===n?Cl===El||Cl===wl&&1073741823===Ml&&Fi()-Al<500?nu(e,Pl):Il=!0:Du(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Ql(e)))}function xu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Hl(t=Xl(),e,null)),null!==(e=Kl(e,t))&&Ql(e)}gl=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Oo=!0;else{if(r<n){switch(Oo=!1,t.tag){case 3:Fo(t),_o();break;case 5:if(Ia(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&bi(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,si(Ki,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Yo(e,t,n):(si(La,1&La.current),null!==(t=Go(e,t,n))?t.sibling:null);si(La,1&La.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ho(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),si(La,La.current),!r)return null}return Go(e,t,n)}Oo=!1}}else Oo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=pi(t,fi.current),na(t,n),i=Ha(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var a=!0;bi(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,aa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(t,r,l,e),i.updater=va,t.stateNode=i,i._reactInternalFiber=t,ba(t,r,e,n),t=Ro(null,t,r,!0,a,n)}else t.tag=0,No(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,a=t.tag=function(e){if("function"==typeof e)return Tu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(i),e=Gi(i,e),a){case 0:t=Bo(null,t,i,e,n);break e;case 1:t=zo(null,t,i,e,n);break e;case 11:t=Do(null,t,i,e,n);break e;case 14:t=Io(null,t,i,Gi(i.type,e),r,n);break e}throw Error(o(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Bo(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 1:return r=t.type,i=t.pendingProps,zo(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 3:if(Fo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,oa(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===i)_o(),t=Go(e,t,n);else{if((i=t.stateNode.hydrate)&&(wo=wn(t.stateNode.containerInfo.firstChild),xo=t,i=Eo=!0),i)for(n=Ta(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else No(e,t,r,n),_o();t=t.child}return t;case 5:return Ia(t),null===e&&To(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,l=i.children,mn(r,i)?l=null:null!==a&&mn(r,a)&&(t.effectTag|=16),Lo(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(No(e,t,l,n),t=t.child),t;case 6:return null===e&&To(t),null;case 13:return Yo(e,t,n);case 4:return Na(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):No(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Do(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 7:return No(e,t,t.pendingProps,n),t.child;case 8:case 12:return No(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,l=t.memoizedProps,a=i.value;var u=t.type._context;if(si(Ki,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=zr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===i.children&&!di.current){t=Go(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(n,null)).tag=2,ua(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ta(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}No(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(i=ra(i,a.unstable_observedBits)),t.effectTag|=1,No(e,t,r,n),t.child;case 14:return a=Gi(i=t.type,t.pendingProps),Io(e,t,i,a=Gi(i.type,a),r,n);case 15:return Ao(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Gi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,bi(t)):e=!1,na(t,n),ya(t,r,i),ba(t,r,i,n),Ro(null,t,r,!0,e,n);case 19:return Ho(e,t,n)}throw Error(o(156,t.tag))};var wu=null,Eu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Su(e,t,n,r){return new ku(e,t,n,r)}function Tu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pu(e,t){var n=e.alternate;return null===n?((n=Su(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Cu(e,t,n,r,i,a){var l=2;if(r=e,"function"==typeof e)Tu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return _u(n.children,i,a,t);case le:l=8,i|=7;break;case re:l=8,i|=1;break;case ie:return(e=Su(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=a,e;case se:return(e=Su(13,n,t,i)).type=se,e.elementType=se,e.expirationTime=a,e;case ce:return(e=Su(19,n,t,i)).elementType=ce,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case oe:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case he:l=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Su(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=a,t}function _u(e,t,n,r){return(e=Su(7,e,r,t)).expirationTime=n,e}function Mu(e,t,n){return(e=Su(6,e,null,t)).expirationTime=n,e}function Ou(e,t,n){return(t=Su(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Du(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Iu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Au(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Lu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Bu(e,t,n,r){var i=t.current,a=Xl(),l=da.suspense;a=Hl(a,i,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var s=n.type;if(vi(s)){n=mi(n,s,u);break e}}n=u}else n=ci;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(i,t),Gl(i,a),a}function zu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ru(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fu(e,t){Ru(e,t),(e=e.alternate)&&Ru(e,t)}function ju(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),i=Su(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,aa(i),e[Pn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Pt.forEach((function(e){pt(e,t,n)})),Ct.forEach((function(e){pt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Vu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function qu(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a._internalRoot;if("function"==typeof i){var l=i;i=function(){var e=zu(o);l.call(e)}}Bu(t,o,e,i)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ju(e,0,t?{hydrate:!0}:void 0)}(n,r),o=a._internalRoot,"function"==typeof i){var u=i;i=function(){var e=zu(o);u.call(e)}}tu((function(){Bu(t,o,e,i)}))}return zu(o)}function Wu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vu(t))throw Error(o(200));return Wu(e,t,null,n)}ju.prototype.render=function(e){Bu(e,this._internalRoot,null,null)},ju.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Bu(null,e,null,(function(){t[Pn]=null}))},vt=function(e){if(13===e.tag){var t=Hi(Xl(),150,100);Gl(e,t),Fu(e,t)}},gt=function(e){13===e.tag&&(Gl(e,3),Fu(e,3))},yt=function(e){if(13===e.tag){var t=Xl();Gl(e,t=Hl(t,e,null)),Fu(e,t)}},_=function(e,t,n){switch(t){case"input":if(Te(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=On(r);if(!i)throw Error(o(90));we(r),Te(r,i)}}}break;case"textarea":De(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},A=eu,L=function(e,t,n,r,i){var a=kl;kl|=4;try{return qi(98,e.bind(null,t,n,r,i))}finally{0===(kl=a)&&Ui()}},B=function(){0==(49&kl)&&(function(){if(null!==ql){var e=ql;ql=null,e.forEach((function(e,t){Lu(t,e),Ql(t)})),Ui()}}(),vu())},z=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&Ui()}};var Uu,Xu,Hu={Events:[_n,Mn,On,P,k,zn,function(e){it(e,Bn)},D,I,Qt,lt,vu,{current:!1}]};Xu=(Uu={findFiberByHostInstance:Cn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Eu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Uu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:$.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Xu?Xu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hu,t.createPortal=Yu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(o(187));var n=kl;kl|=1;try{return qi(99,e.bind(null,t))}finally{kl=n,Ui()}},t.hydrate=function(e,t,n){if(!Vu(t))throw Error(o(200));return qu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Vu(t))throw Error(o(200));return qu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Vu(e))throw Error(o(40));return!!e._reactRootContainer&&(tu((function(){qu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Pn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Yu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Vu(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return qu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(334)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,a,o,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},i=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},o=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,h=window.Date,p=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=h.now();t.unstable_now=function(){return h.now()-y}}var m=!1,b=null,x=-1,w=5,E=0;o=function(){return t.unstable_now()>=E},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,S=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();E=e+w;try{b(!0,e)?S.postMessage(null):(m=!1,b=null)}catch(e){throw S.postMessage(null),e}}else m=!1},r=function(e){b=e,m||(m=!0,S.postMessage(null))},i=function(e,n){x=p((function(){e(t.unstable_now())}),n)},a=function(){v(x),x=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<_(i,t)))break e;e[r]=t,e[n]=i,n=r}}function P(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var a=2*(r+1)-1,o=e[a],l=a+1,u=e[l];if(void 0!==o&&0>_(o,n))void 0!==u&&0>_(u,o)?(e[r]=u,e[l]=n,r=l):(e[r]=o,e[a]=n,r=a);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],O=[],N=1,D=null,I=3,A=!1,L=!1,B=!1;function z(e){for(var t=P(O);null!==t;){if(null===t.callback)C(O);else{if(!(t.startTime<=e))break;C(O),t.sortIndex=t.expirationTime,T(M,t)}t=P(O)}}function R(e){if(B=!1,z(e),!L)if(null!==P(M))L=!0,r(F);else{var t=P(O);null!==t&&i(R,t.startTime-e)}}function F(e,n){L=!1,B&&(B=!1,a()),A=!0;var r=I;try{for(z(n),D=P(M);null!==D&&(!(D.expirationTime>n)||e&&!o());){var l=D.callback;if(null!==l){D.callback=null,I=D.priorityLevel;var u=l(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?D.callback=u:D===P(M)&&C(M),z(n)}else C(M);D=P(M)}if(null!==D)var s=!0;else{var c=P(O);null!==c&&i(R,c.startTime-n),s=!1}return s}finally{D=null,I=r,A=!1}}function j(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var V=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||A||(L=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_getFirstCallbackNode=function(){return P(M)},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=V,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_scheduleCallback=function(e,n,o){var l=t.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?l+u:l,o="number"==typeof o.timeout?o.timeout:j(e)}else o=j(e),u=l;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>l?(e.sortIndex=u,T(O,e),null===P(M)&&e===P(O)&&(B?a():B=!0,i(R,u-l))):(e.sortIndex=o,T(M,e),L||A||(L=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();z(e);var n=P(M);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,a=void 0;try{for(var o,l=e[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw a}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){var r=n(138);e.exports=function(e){if(Array.isArray(e))return r(e)}},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){"use strict";var r=n(342);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,a,o){if(o!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";(function(t){function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var i=r(n(347)),a=r(n(348));function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var o,l=e[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f="undefined"==typeof window?null:window,d=f?f.navigator:null,h=(f&&f.document,o("")),p=o({}),v=o((function(){})),g="undefined"==typeof HTMLElement?"undefined":o(HTMLElement),y=function(e){return e&&e.instanceString&&b(e.instanceString)?e.instanceString():null},m=function(e){return null!=e&&o(e)==h},b=function(e){return null!=e&&o(e)===v},x=function(e){return Array.isArray?Array.isArray(e):null!=e&&e instanceof Array},w=function(e){return null!=e&&o(e)===p&&!x(e)&&e.constructor===Object},E=function(e){return null!=e&&o(e)===o(1)&&!isNaN(e)},k=function(e){return"undefined"===g?void 0:null!=e&&e instanceof HTMLElement},S=function(e){return T(e)||P(e)},T=function(e){return"collection"===y(e)&&e._private.single},P=function(e){return"collection"===y(e)&&!e._private.single},C=function(e){return"core"===y(e)},_=function(e){return"stylesheet"===y(e)},M=function(e){return null==e||!(""!==e&&!e.match(/^\s+$/))},O=function(e){return function(e){return null!=e&&o(e)===p}(e)&&b(e.then)},N=function(e,t){t||(t=function(){if(1===arguments.length)return arguments[0];if(0===arguments.length)return"undefined";for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);return e.join("$")});var n=function n(){var r,i=this,a=arguments,o=t.apply(i,a),l=n.cache;return(r=l[o])||(r=l[o]=e.apply(i,a)),r};return n.cache={},n},D=N((function(e){return e.replace(/([A-Z])/g,(function(e){return"-"+e.toLowerCase()}))})),I=N((function(e){return e.replace(/(-\w)/g,(function(e){return e[1].toUpperCase()}))})),A=N((function(e,t){return e+t[0].toUpperCase()+t.substring(1)}),(function(e,t){return e+"$"+t})),L=function(e){return M(e)?e:e.charAt(0).toUpperCase()+e.substring(1)},B="(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))",z=function(e,t){return e<t?-1:e>t?1:0},R=null!=Object.assign?Object.assign.bind(Object):function(e){for(var t=arguments,n=1;n<t.length;n++){var r=t[n];if(null!=r)for(var i=Object.keys(r),a=0;a<i.length;a++){var o=i[a];e[o]=r[o]}}return e},F=function(e){return(x(e)?e:null)||function(e){return j[e.toLowerCase()]}(e)||function(e){if((4===e.length||7===e.length)&&"#"===e[0]){var t,n,r;return 4===e.length?(t=parseInt(e[1]+e[1],16),n=parseInt(e[2]+e[2],16),r=parseInt(e[3]+e[3],16)):(t=parseInt(e[1]+e[2],16),n=parseInt(e[3]+e[4],16),r=parseInt(e[5]+e[6],16)),[t,n,r]}}(e)||function(e){var t,n=new RegExp("^rgb[a]?\\(((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)(?:\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)$").exec(e);if(n){t=[];for(var r=[],i=1;i<=3;i++){var a=n[i];if("%"===a[a.length-1]&&(r[i]=!0),a=parseFloat(a),r[i]&&(a=a/100*255),a<0||a>255)return;t.push(Math.floor(a))}var o=r[1]||r[2]||r[3],l=r[1]&&r[2]&&r[3];if(o&&!l)return;var u=n[4];if(void 0!==u){if((u=parseFloat(u))<0||u>1)return;t.push(u)}}return t}(e)||function(e){var t,n,r,i,a,o,l,u;function s(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}var c=new RegExp("^hsl[a]?\\(((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?)))\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])(?:\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)$").exec(e);if(c){if((n=parseInt(c[1]))<0?n=(360- -1*n%360)%360:n>360&&(n%=360),n/=360,(r=parseFloat(c[2]))<0||r>100)return;if(r/=100,(i=parseFloat(c[3]))<0||i>100)return;if(i/=100,void 0!==(a=c[4])&&((a=parseFloat(a))<0||a>1))return;if(0===r)o=l=u=Math.round(255*i);else{var f=i<.5?i*(1+r):i+r-i*r,d=2*i-f;o=Math.round(255*s(d,f,n+1/3)),l=Math.round(255*s(d,f,n)),u=Math.round(255*s(d,f,n-1/3))}t=[o,l,u,a]}return t}(e)},j={transparent:[0,0,0,0],aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},V=function(e){for(var t=e.map,n=e.keys,r=n.length,i=0;i<r;i++){var a=n[i];if(w(a))throw Error("Tried to set map with object key");i<n.length-1?(null==t[a]&&(t[a]={}),t=t[a]):t[a]=e.value}},q=function(e){for(var t=e.map,n=e.keys,r=n.length,i=0;i<r;i++){var a=n[i];if(w(a))throw Error("Tried to get map with object key");if(null==(t=t[a]))return t}return t},W=f?f.performance:null,Y=W&&W.now?function(){return W.now()}:function(){return Date.now()},U=function(){if(f){if(f.requestAnimationFrame)return function(e){f.requestAnimationFrame(e)};if(f.mozRequestAnimationFrame)return function(e){f.mozRequestAnimationFrame(e)};if(f.webkitRequestAnimationFrame)return function(e){f.webkitRequestAnimationFrame(e)};if(f.msRequestAnimationFrame)return function(e){f.msRequestAnimationFrame(e)}}return function(e){e&&setTimeout((function(){e(Y())}),1e3/60)}}(),X=function(e){return U(e)},H=Y,G=function(e){for(var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5381,r=n;!(t=e.next()).done;)r=33*r^t.value;return r>>>0},K=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5381;return(33*t^e)>>>0},$=function(e,t){var n={value:0,done:!1},r=0,i=e.length;return G({next:function(){return r<i?n.value=e[r++]:n.done=!0,n}},t)},Q=function(e,t){var n={value:0,done:!1},r=0,i=e.length;return G({next:function(){return r<i?n.value=e.charCodeAt(r++):n.done=!0,n}},t)},Z=function(){return J(arguments)},J=function(e){for(var t,n=0;n<e.length;n++){var r=e[n];t=0===n?Q(r):Q(r,t)}return t},ee=!0,te=null!=console.warn,ne=null!=console.trace,re=Number.MAX_SAFE_INTEGER||9007199254740991,ie=function(){return!0},ae=function(){return!1},oe=function(){return 0},le=function(){},ue=function(e){throw new Error(e)},se=function(e){if(void 0===e)return ee;ee=!!e},ce=function(e){se()&&(te?console.warn(e):(console.log(e),ne&&console.trace()))},fe=function(e){return null==e?e:x(e)?e.slice():w(e)?function(e){return R({},e)}(e):e},de=function(e,t){for(t=e="";e++<36;t+=51*e&52?(15^e?8^Math.random()*(20^e?16:4):4).toString(16):"-");return t},he={},pe=function(){return he},ve=function(e){var t=Object.keys(e);return function(n){for(var r={},i=0;i<t.length;i++){var a=t[i],o=null==n?void 0:n[a];r[a]=void 0===o?e[a]:o}return r}},ge=function(e,t,n){for(var r=e.length;r>=0&&(e[r]!==t||(e.splice(r,1),n));r--);},ye=function(e){e.splice(0,e.length)},me=function(e,t,n){return n&&(t=A(n,t)),e[t]},be=function(e,t,n,r){n&&(t=A(n,t)),e[t]=r},xe="undefined"!=typeof Map?Map:function(){function e(){l(this,e),this._obj={}}return s(e,[{key:"set",value:function(e,t){return this._obj[e]=t,this}},{key:"delete",value:function(e){return this._obj[e]=void 0,this}},{key:"clear",value:function(){this._obj={}}},{key:"has",value:function(e){return void 0!==this._obj[e]}},{key:"get",value:function(e){return this._obj[e]}}]),e}(),we=function(){function e(t){if(l(this,e),this._obj=Object.create(null),this.size=0,null!=t){var n;n=null!=t.instanceString&&t.instanceString()===this.instanceString()?t.toArray():t;for(var r=0;r<n.length;r++)this.add(n[r])}}return s(e,[{key:"instanceString",value:function(){return"set"}},{key:"add",value:function(e){var t=this._obj;1!==t[e]&&(t[e]=1,this.size++)}},{key:"delete",value:function(e){var t=this._obj;1===t[e]&&(t[e]=0,this.size--)}},{key:"clear",value:function(){this._obj=Object.create(null)}},{key:"has",value:function(e){return 1===this._obj[e]}},{key:"toArray",value:function(){var e=this;return Object.keys(this._obj).filter((function(t){return e.has(t)}))}},{key:"forEach",value:function(e,t){return this.toArray().forEach(e,t)}}]),e}(),Ee="undefined"!==("undefined"==typeof Set?"undefined":o(Set))?Set:we,ke=function(e,t,n){if(n=!(void 0!==n&&!n),void 0!==e&&void 0!==t&&C(e)){var r=t.group;if(null==r&&(r=t.data&&null!=t.data.source&&null!=t.data.target?"edges":"nodes"),"nodes"===r||"edges"===r){this.length=1,this[0]=this;var i=this._private={cy:e,single:!0,data:t.data||{},position:t.position||{x:0,y:0},autoWidth:void 0,autoHeight:void 0,autoPadding:void 0,compoundBoundsClean:!1,listeners:[],group:r,style:{},rstyle:{},styleCxts:[],styleKeys:{},removed:!0,selected:!!t.selected,selectable:void 0===t.selectable||!!t.selectable,locked:!!t.locked,grabbed:!1,grabbable:void 0===t.grabbable||!!t.grabbable,pannable:void 0===t.pannable?"edges"===r:!!t.pannable,active:!1,classes:new Ee,animation:{current:[],queue:[]},rscratch:{},scratch:t.scratch||{},edges:[],children:[],parent:null,traversalCache:{},backgrounding:!1,bbCache:null,bbCacheShift:{x:0,y:0},bodyBounds:null,overlayBounds:null,labelBounds:{all:null,source:null,target:null,main:null}};if(null==i.position.x&&(i.position.x=0),null==i.position.y&&(i.position.y=0),t.renderedPosition){var a=t.renderedPosition,o=e.pan(),l=e.zoom();i.position={x:(a.x-o.x)/l,y:(a.y-o.y)/l}}var u=[];x(t.classes)?u=t.classes:m(t.classes)&&(u=t.classes.split(/\s+/));for(var s=0,c=u.length;s<c;s++){var f=u[s];f&&""!==f&&i.classes.add(f)}this.createEmitter();var d=t.style||t.css;d&&(ce("Setting a `style` bypass at element creation is deprecated"),this.style(d)),(void 0===n||n)&&this.restore()}else ue("An element must be of type `nodes` or `edges`; you specified `"+r+"`")}else ue("An element must have a core reference and parameters set")},Se=function(e){return e={bfs:e.bfs||!e.dfs,dfs:e.dfs||!e.bfs},function(t,n,r){var i;w(t)&&!S(t)&&(t=(i=t).roots||i.root,n=i.visit,r=i.directed),r=2!==arguments.length||b(n)?r:n,n=b(n)?n:function(){};for(var a,o=this._private.cy,l=t=m(t)?this.filter(t):t,u=[],s=[],c={},f={},d={},h=0,p=this.byGroup(),v=p.nodes,g=p.edges,y=0;y<l.length;y++){var x=l[y],E=x.id();x.isNode()&&(u.unshift(x),e.bfs&&(d[E]=!0,s.push(x)),f[E]=0)}var k=function(){var t=e.bfs?u.shift():u.pop(),i=t.id();if(e.dfs){if(d[i])return"continue";d[i]=!0,s.push(t)}var o,l=f[i],p=c[i],y=null!=p?p.source():null,m=null!=p?p.target():null,b=null==p?void 0:t.same(y)?m[0]:y[0];if(!0===(o=n(t,p,b,h++,l)))return a=t,"break";if(!1===o)return"break";for(var x=t.connectedEdges().filter((function(e){return(!r||e.source().same(t))&&g.has(e)})),w=0;w<x.length;w++){var E=x[w],k=E.connectedNodes().filter((function(e){return!e.same(t)&&v.has(e)})),S=k.id();0===k.length||d[S]||(k=k[0],u.push(k),e.bfs&&(d[S]=!0,s.push(k)),c[S]=E,f[S]=f[i]+1)}};e:for(;0!==u.length;){var T=k();switch(T){case"continue":continue;case"break":break e}}for(var P=o.collection(),C=0;C<s.length;C++){var _=s[C],M=c[_.id()];null!=M&&P.merge(M),P.merge(_)}return{path:o.collection(P),found:o.collection(a)}}},Te={breadthFirstSearch:Se({bfs:!0}),depthFirstSearch:Se({dfs:!0})};Te.bfs=Te.breadthFirstSearch,Te.dfs=Te.depthFirstSearch;var Pe=ve({root:null,weight:function(e){return 1},directed:!1}),Ce={dijkstra:function(e){if(!w(e)){var t=arguments;e={root:t[0],weight:t[1],directed:t[2]}}var n=Pe(e),r=n.root,i=n.weight,o=n.directed,l=this,u=i,s=m(r)?this.filter(r)[0]:r[0],c={},f={},d={},h=this.byGroup(),p=h.nodes,v=h.edges;v.unmergeBy((function(e){return e.isLoop()}));for(var g=function(e){return c[e.id()]},y=function(e,t){c[e.id()]=t,b.updateItem(e)},b=new a((function(e,t){return g(e)-g(t)})),x=0;x<p.length;x++){var E=p[x];c[E.id()]=E.same(s)?0:1/0,b.push(E)}for(var k=function(e,t){for(var n,r=(o?e.edgesTo(t):e.edgesWith(t)).intersect(v),i=1/0,a=0;a<r.length;a++){var l=r[a],s=u(l);(s<i||!n)&&(i=s,n=l)}return{edge:n,dist:i}};b.size()>0;){var S=b.pop(),T=g(S),P=S.id();if(d[P]=T,T!==1/0)for(var C=S.neighborhood().intersect(p),_=0;_<C.length;_++){var M=C[_],O=M.id(),N=k(S,M),D=T+N.dist;D<g(M)&&(y(M,D),f[O]={node:S,edge:N.edge})}}return{distanceTo:function(e){var t=m(e)?p.filter(e)[0]:e[0];return d[t.id()]},pathTo:function(e){var t=m(e)?p.filter(e)[0]:e[0],n=[],r=t,i=r.id();if(t.length>0)for(n.unshift(t);f[i];){var a=f[i];n.unshift(a.edge),n.unshift(a.node),i=(r=a.node).id()}return l.spawn(n)}}}},_e={kruskal:function(e){e=e||function(e){return 1};for(var t=this.byGroup(),n=t.nodes,r=t.edges,i=n.length,a=new Array(i),o=n,l=function(e){for(var t=0;t<a.length;t++){if(a[t].has(e))return t}},u=0;u<i;u++)a[u]=this.spawn(n[u]);for(var s=r.sort((function(t,n){return e(t)-e(n)})),c=0;c<s.length;c++){var f=s[c],d=f.source()[0],h=f.target()[0],p=l(d),v=l(h),g=a[p],y=a[v];p!==v&&(o.merge(f),g.merge(y),a.splice(v,1))}return o}},Me=ve({root:null,goal:null,weight:function(e){return 1},heuristic:function(e){return 0},directed:!1}),Oe={aStar:function(e){var t=this.cy(),n=Me(e),r=n.root,i=n.goal,o=n.heuristic,l=n.directed,u=n.weight;r=t.collection(r)[0],i=t.collection(i)[0];var s,c,f=r.id(),d=i.id(),h={},p={},v={},g=new a((function(e,t){return p[e.id()]-p[t.id()]})),y=new Ee,m={},b={},x=function(e,t){g.push(e),y.add(t)};x(r,f),h[f]=0,p[f]=o(r);for(var w,E=0;g.size()>0;){if(s=g.pop(),c=s.id(),y.delete(c),E++,c===d){for(var k=[],S=i,T=d,P=b[T];k.unshift(S),null!=P&&k.unshift(P),null!=(S=m[T]);)P=b[T=S.id()];return{found:!0,distance:h[c],path:this.spawn(k),steps:E}}v[c]=!0;for(var C=s._private.edges,_=0;_<C.length;_++){var M=C[_];if(this.hasElementWithId(M.id())&&(!l||M.data("source")===c)){var O=M.source(),N=M.target(),D=O.id()!==c?O:N,I=D.id();if(this.hasElementWithId(I)&&!v[I]){var A=h[c]+u(M);w=I,y.has(w)?A<h[I]&&(h[I]=A,p[I]=A+o(D),m[I]=s):(h[I]=A,p[I]=A+o(D),x(D,I),m[I]=s,b[I]=M)}}}}return{found:!1,distance:void 0,path:void 0,steps:E}}},Ne=ve({weight:function(e){return 1},directed:!1}),De={floydWarshall:function(e){for(var t=this.cy(),n=Ne(e),r=n.weight,i=n.directed,a=r,o=this.byGroup(),l=o.nodes,u=o.edges,s=l.length,c=s*s,f=function(e){return l.indexOf(e)},d=function(e){return l[e]},h=new Array(c),p=0;p<c;p++){var v=p%s,g=(p-v)/s;h[p]=g===v?0:1/0}for(var y=new Array(c),b=new Array(c),x=0;x<u.length;x++){var w=u[x],E=w.source()[0],k=w.target()[0];if(E!==k){var S=f(E),T=f(k),P=S*s+T,C=a(w);if(h[P]>C&&(h[P]=C,y[P]=T,b[P]=w),!i){var _=T*s+S;!i&&h[_]>C&&(h[_]=C,y[_]=S,b[_]=w)}}}for(var M=0;M<s;M++)for(var O=0;O<s;O++)for(var N=O*s+M,D=0;D<s;D++){var I=O*s+D,A=M*s+D;h[N]+h[A]<h[I]&&(h[I]=h[N]+h[A],y[I]=y[N])}var L=function(e){return f(function(e){return(m(e)?t.filter(e):e)[0]}(e))};return{distance:function(e,t){var n=L(e),r=L(t);return h[n*s+r]},path:function(e,n){var r=L(e),i=L(n),a=d(r);if(r===i)return a.collection();if(null==y[r*s+i])return t.collection();var o,l=t.collection(),u=r;for(l.merge(a);r!==i;)u=r,r=y[r*s+i],o=b[u*s+r],l.merge(o),l.merge(d(r));return l}}}},Ie=ve({weight:function(e){return 1},directed:!1,root:null}),Ae={bellmanFord:function(e){var t=this,n=Ie(e),r=n.weight,i=n.directed,a=n.root,o=r,l=this,u=this.cy(),s=this.byGroup(),c=s.edges,f=s.nodes,d=f.length,h=new xe,p=!1;a=u.collection(a)[0],c.unmergeBy((function(e){return e.isLoop()}));for(var v=c.length,g=function(e){var t=h.get(e.id());return t||(t={},h.set(e.id(),t)),t},y=function(e){return(m(e)?u.$(e):e)[0]},b=0;b<d;b++){var x=f[b],w=g(x);x.same(a)?w.dist=0:w.dist=1/0,w.pred=null,w.edge=null}for(var E=!1,k=function(e,t,n,r,i,a){var o=r.dist+a;o<i.dist&&!n.same(r.edge)&&(i.dist=o,i.pred=e,i.edge=n,E=!0)},S=1;S<d;S++){E=!1;for(var T=0;T<v;T++){var P=c[T],C=P.source(),_=P.target(),M=o(P),O=g(C),N=g(_);k(C,0,P,O,N,M),i||k(_,0,P,N,O,M)}if(!E)break}if(E)for(var D=0;D<v;D++){var I=c[D],A=I.source(),L=I.target(),B=o(I),z=g(A).dist,R=g(L).dist;if(z+B<R||!i&&R+B<z){ce("Graph contains a negative weight cycle for Bellman-Ford"),p=!0;break}}return{distanceTo:function(e){return g(y(e)).dist},pathTo:function(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a,r=y(e),i=[],o=r;;){if(null==o)return t.spawn();var u=g(o),s=u.edge,c=u.pred;if(i.unshift(o[0]),o.same(n)&&i.length>0)break;null!=s&&i.unshift(s),o=c}return l.spawn(i)},hasNegativeWeightCycle:p,negativeWeightCycles:[]}}},Le=Math.sqrt(2),Be=function(e,t,n){0===n.length&&ue("Karger-Stein must be run on a connected (sub)graph");for(var r=n[e],i=r[1],a=r[2],o=t[i],l=t[a],u=n,s=u.length-1;s>=0;s--){var c=u[s],f=c[1],d=c[2];(t[f]===o&&t[d]===l||t[f]===l&&t[d]===o)&&u.splice(s,1)}for(var h=0;h<u.length;h++){var p=u[h];p[1]===l?(u[h]=p.slice(),u[h][1]=o):p[2]===l&&(u[h]=p.slice(),u[h][2]=o)}for(var v=0;v<t.length;v++)t[v]===l&&(t[v]=o);return u},ze=function(e,t,n,r){for(;n>r;){var i=Math.floor(Math.random()*t.length);t=Be(i,e,t),n--}return t},Re={kargerStein:function(){var e=this.byGroup(),t=e.nodes,n=e.edges;n.unmergeBy((function(e){return e.isLoop()}));var r=t.length,i=n.length,a=Math.ceil(Math.pow(Math.log(r)/Math.LN2,2)),o=Math.floor(r/Le);if(!(r<2)){for(var l=[],u=0;u<i;u++){var s=n[u];l.push([u,t.indexOf(s.source()),t.indexOf(s.target())])}for(var c=1/0,f=[],d=new Array(r),h=new Array(r),p=new Array(r),v=function(e,t){for(var n=0;n<r;n++)t[n]=e[n]},g=0;g<=a;g++){for(var y=0;y<r;y++)h[y]=y;var m=ze(h,l.slice(),r,o),b=m.slice();v(h,p);var x=ze(h,m,o,2),w=ze(p,b,o,2);x.length<=w.length&&x.length<c?(c=x.length,f=x,v(h,d)):w.length<=x.length&&w.length<c&&(c=w.length,f=w,v(p,d))}for(var E=this.spawn(f.map((function(e){return n[e[0]]}))),k=this.spawn(),S=this.spawn(),T=d[0],P=0;P<d.length;P++){var C=d[P],_=t[P];C===T?k.merge(_):S.merge(_)}return{cut:E,partition1:k,partition2:S}}ue("At least 2 nodes are required for Karger-Stein algorithm")}},Fe=function(e){return{x:e.x,y:e.y}},je=function(e,t,n){return{x:e.x*t+n.x,y:e.y*t+n.y}},Ve=function(e,t,n){return{x:(e.x-n.x)/t,y:(e.y-n.y)/t}},qe=function(e){return{x:e[0],y:e[1]}},We=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,r=1/0,i=t;i<n;i++){var a=e[i];isFinite(a)&&(r=Math.min(a,r))}return r},Ye=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,r=-1/0,i=t;i<n;i++){var a=e[i];isFinite(a)&&(r=Math.max(a,r))}return r},Ue=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,r=0,i=0,a=t;a<n;a++){var o=e[a];isFinite(o)&&(r+=o,i++)}return r/i},Xe=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];r?e=e.slice(t,n):(n<e.length&&e.splice(n,e.length-n),t>0&&e.splice(0,t));for(var o=0,l=e.length-1;l>=0;l--){var u=e[l];a?isFinite(u)||(e[l]=-1/0,o++):e.splice(l,1)}i&&e.sort((function(e,t){return e-t}));var s=e.length,c=Math.floor(s/2);return s%2!=0?e[c+1+o]:(e[c-1+o]+e[c+o])/2},He=function(e){return Math.PI*e/180},Ge=function(e,t){return Math.atan2(t,e)-Math.PI/2},Ke=Math.log2||function(e){return Math.log(e)/Math.log(2)},$e=function(e){return e>0?1:e<0?-1:0},Qe=function(e,t){return Math.sqrt(Ze(e,t))},Ze=function(e,t){var n=t.x-e.x,r=t.y-e.y;return n*n+r*r},Je=function(e){for(var t=e.length,n=0,r=0;r<t;r++)n+=e[r];for(var i=0;i<t;i++)e[i]=e[i]/n;return e},et=function(e,t,n,r){return(1-r)*(1-r)*e+2*(1-r)*r*t+r*r*n},tt=function(e,t,n,r){return{x:et(e.x,t.x,n.x,r),y:et(e.y,t.y,n.y,r)}},nt=function(e,t,n,r){var i=t.x-e.x,a=t.y-e.y,o=Qe(e,t),l=i/o,u=a/o;return n=null==n?0:n,r=null!=r?r:n*o,{x:e.x+l*r,y:e.y+u*r}},rt=function(e,t,n){return Math.max(e,Math.min(n,t))},it=function(e){if(null==e)return{x1:1/0,y1:1/0,x2:-1/0,y2:-1/0,w:0,h:0};if(null!=e.x1&&null!=e.y1){if(null!=e.x2&&null!=e.y2&&e.x2>=e.x1&&e.y2>=e.y1)return{x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2,w:e.x2-e.x1,h:e.y2-e.y1};if(null!=e.w&&null!=e.h&&e.w>=0&&e.h>=0)return{x1:e.x1,y1:e.y1,x2:e.x1+e.w,y2:e.y1+e.h,w:e.w,h:e.h}}},at=function(e){return{x1:e.x1,x2:e.x2,w:e.w,y1:e.y1,y2:e.y2,h:e.h}},ot=function(e){e.x1=1/0,e.y1=1/0,e.x2=-1/0,e.y2=-1/0,e.w=0,e.h=0},lt=function(e,t){e.x1=Math.min(e.x1,t.x1),e.x2=Math.max(e.x2,t.x2),e.w=e.x2-e.x1,e.y1=Math.min(e.y1,t.y1),e.y2=Math.max(e.y2,t.y2),e.h=e.y2-e.y1},ut=function(e,t,n){e.x1=Math.min(e.x1,t),e.x2=Math.max(e.x2,t),e.w=e.x2-e.x1,e.y1=Math.min(e.y1,n),e.y2=Math.max(e.y2,n),e.h=e.y2-e.y1},st=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e.x1-=t,e.x2+=t,e.y1-=t,e.y2+=t,e.w=e.x2-e.x1,e.h=e.y2-e.y1,e},ct=function(e,t){e.x1=t.x1,e.y1=t.y1,e.x2=t.x2,e.y2=t.y2,e.w=e.x2-e.x1,e.h=e.y2-e.y1},ft=function(e,t){e.x1+=t.x,e.x2+=t.x,e.y1+=t.y,e.y2+=t.y},dt=function(e,t){return!(e.x1>t.x2)&&(!(t.x1>e.x2)&&(!(e.x2<t.x1)&&(!(t.x2<e.x1)&&(!(e.y2<t.y1)&&(!(t.y2<e.y1)&&(!(e.y1>t.y2)&&!(t.y1>e.y2)))))))},ht=function(e,t,n){return e.x1<=t&&t<=e.x2&&e.y1<=n&&n<=e.y2},pt=function(e,t){return ht(e,t.x,t.y)},vt=function(e,t){return ht(e,t.x1,t.y1)&&ht(e,t.x2,t.y2)},gt=function(e,t,n,r,i,a,o){var l,u=zt(i,a),s=i/2,c=a/2,f=r-c-o;if((l=Nt(e,t,n,r,n-s+u-o,f,n+s-u+o,f,!1)).length>0)return l;var d=n+s+o;if((l=Nt(e,t,n,r,d,r-c+u-o,d,r+c-u+o,!1)).length>0)return l;var h=r+c+o;if((l=Nt(e,t,n,r,n-s+u-o,h,n+s-u+o,h,!1)).length>0)return l;var p,v=n-s-o;if((l=Nt(e,t,n,r,v,r-c+u-o,v,r+c-u+o,!1)).length>0)return l;var g=n-s+u,y=r-c+u;if((p=Mt(e,t,n,r,g,y,u+o)).length>0&&p[0]<=g&&p[1]<=y)return[p[0],p[1]];var m=n+s-u,b=r-c+u;if((p=Mt(e,t,n,r,m,b,u+o)).length>0&&p[0]>=m&&p[1]<=b)return[p[0],p[1]];var x=n+s-u,w=r+c-u;if((p=Mt(e,t,n,r,x,w,u+o)).length>0&&p[0]>=x&&p[1]>=w)return[p[0],p[1]];var E=n-s+u,k=r+c-u;return(p=Mt(e,t,n,r,E,k,u+o)).length>0&&p[0]<=E&&p[1]>=k?[p[0],p[1]]:[]},yt=function(e,t,n,r,i,a,o){var l=o,u=Math.min(n,i),s=Math.max(n,i),c=Math.min(r,a),f=Math.max(r,a);return u-l<=e&&e<=s+l&&c-l<=t&&t<=f+l},mt=function(e,t,n,r,i,a,o,l,u){var s=Math.min(n,o,i)-u,c=Math.max(n,o,i)+u,f=Math.min(r,l,a)-u,d=Math.max(r,l,a)+u;return!(e<s||e>c||t<f||t>d)},bt=function(e,t,n,r){var i=t*t-4*e*(n-=r);if(i<0)return[];var a=Math.sqrt(i),o=2*e;return[(-t+a)/o,(-t-a)/o]},xt=function(e,t,n,r,i){var a,o,l,u,s,c,f,d;return l=-27*(r/=e)+(t/=e)*(9*(n/=e)-t*t*2),a=(o=(3*n-t*t)/9)*o*o+(l/=54)*l,i[1]=0,f=t/3,a>0?(s=(s=l+Math.sqrt(a))<0?-Math.pow(-s,1/3):Math.pow(s,1/3),c=(c=l-Math.sqrt(a))<0?-Math.pow(-c,1/3):Math.pow(c,1/3),i[0]=-f+s+c,f+=(s+c)/2,i[4]=i[2]=-f,f=Math.sqrt(3)*(-c+s)/2,i[3]=f,void(i[5]=-f)):(i[5]=i[3]=0,0===a?(d=l<0?-Math.pow(-l,1/3):Math.pow(l,1/3),i[0]=2*d-f,void(i[4]=i[2]=-(d+f))):(u=(o=-o)*o*o,u=Math.acos(l/Math.sqrt(u)),d=2*Math.sqrt(o),i[0]=-f+d*Math.cos(u/3),i[2]=-f+d*Math.cos((u+2*Math.PI)/3),void(i[4]=-f+d*Math.cos((u+4*Math.PI)/3))))},wt=function(e,t,n,r,i,a,o,l){var u=[];xt(1*n*n-4*n*i+2*n*o+4*i*i-4*i*o+o*o+r*r-4*r*a+2*r*l+4*a*a-4*a*l+l*l,9*n*i-3*n*n-3*n*o-6*i*i+3*i*o+9*r*a-3*r*r-3*r*l-6*a*a+3*a*l,3*n*n-6*n*i+n*o-n*e+2*i*i+2*i*e-o*e+3*r*r-6*r*a+r*l-r*t+2*a*a+2*a*t-l*t,1*n*i-n*n+n*e-i*e+r*a-r*r+r*t-a*t,u);for(var s=[],c=0;c<6;c+=2)Math.abs(u[c+1])<1e-7&&u[c]>=0&&u[c]<=1&&s.push(u[c]);s.push(1),s.push(0);for(var f,d,h,p=-1,v=0;v<s.length;v++)f=Math.pow(1-s[v],2)*n+2*(1-s[v])*s[v]*i+s[v]*s[v]*o,d=Math.pow(1-s[v],2)*r+2*(1-s[v])*s[v]*a+s[v]*s[v]*l,h=Math.pow(f-e,2)+Math.pow(d-t,2),p>=0?h<p&&(p=h):p=h;return p},Et=function(e,t,n,r,i,a){var o=[e-n,t-r],l=[i-n,a-r],u=l[0]*l[0]+l[1]*l[1],s=o[0]*o[0]+o[1]*o[1],c=o[0]*l[0]+o[1]*l[1],f=c*c/u;return c<0?s:f>u?(e-i)*(e-i)+(t-a)*(t-a):s-f},kt=function(e,t,n){for(var r,i,a,o,l=0,u=0;u<n.length/2;u++)if(r=n[2*u],i=n[2*u+1],u+1<n.length/2?(a=n[2*(u+1)],o=n[2*(u+1)+1]):(a=n[2*(u+1-n.length/2)],o=n[2*(u+1-n.length/2)+1]),r==e&&a==e);else{if(!(r>=e&&e>=a||r<=e&&e<=a))continue;(e-r)/(a-r)*(o-i)+i>t&&l++}return l%2!=0},St=function(e,t,n,r,i,a,o,l,u){var s,c=new Array(n.length);null!=l[0]?(s=Math.atan(l[1]/l[0]),l[0]<0?s+=Math.PI/2:s=-s-Math.PI/2):s=l;for(var f,d=Math.cos(-s),h=Math.sin(-s),p=0;p<c.length/2;p++)c[2*p]=a/2*(n[2*p]*d-n[2*p+1]*h),c[2*p+1]=o/2*(n[2*p+1]*d+n[2*p]*h),c[2*p]+=r,c[2*p+1]+=i;if(u>0){var v=Pt(c,-u);f=Tt(v)}else f=c;return kt(e,t,f)},Tt=function(e){for(var t,n,r,i,a,o,l,u,s=new Array(e.length/2),c=0;c<e.length/4;c++){t=e[4*c],n=e[4*c+1],r=e[4*c+2],i=e[4*c+3],c<e.length/4-1?(a=e[4*(c+1)],o=e[4*(c+1)+1],l=e[4*(c+1)+2],u=e[4*(c+1)+3]):(a=e[0],o=e[1],l=e[2],u=e[3]);var f=Nt(t,n,r,i,a,o,l,u,!0);s[2*c]=f[0],s[2*c+1]=f[1]}return s},Pt=function(e,t){for(var n,r,i,a,o=new Array(2*e.length),l=0;l<e.length/2;l++){n=e[2*l],r=e[2*l+1],l<e.length/2-1?(i=e[2*(l+1)],a=e[2*(l+1)+1]):(i=e[0],a=e[1]);var u=a-r,s=-(i-n),c=Math.sqrt(u*u+s*s),f=u/c,d=s/c;o[4*l]=n+f*t,o[4*l+1]=r+d*t,o[4*l+2]=i+f*t,o[4*l+3]=a+d*t}return o},Ct=function(e,t,n,r,i,a){var o=n-e,l=r-t;o/=i,l/=a;var u=Math.sqrt(o*o+l*l),s=u-1;if(s<0)return[];var c=s/u;return[(n-e)*c+e,(r-t)*c+t]},_t=function(e,t,n,r,i,a,o){return e-=i,t-=a,(e/=n/2+o)*e+(t/=r/2+o)*t<=1},Mt=function(e,t,n,r,i,a,o){var l=[n-e,r-t],u=[e-i,t-a],s=l[0]*l[0]+l[1]*l[1],c=2*(u[0]*l[0]+u[1]*l[1]),f=c*c-4*s*(u[0]*u[0]+u[1]*u[1]-o*o);if(f<0)return[];var d=(-c+Math.sqrt(f))/(2*s),h=(-c-Math.sqrt(f))/(2*s),p=Math.min(d,h),v=Math.max(d,h),g=[];if(p>=0&&p<=1&&g.push(p),v>=0&&v<=1&&g.push(v),0===g.length)return[];var y=g[0]*l[0]+e,m=g[0]*l[1]+t;return g.length>1?g[0]==g[1]?[y,m]:[y,m,g[1]*l[0]+e,g[1]*l[1]+t]:[y,m]},Ot=function(e,t,n){return t<=e&&e<=n||n<=e&&e<=t?e:e<=t&&t<=n||n<=t&&t<=e?t:n},Nt=function(e,t,n,r,i,a,o,l,u){var s=e-i,c=n-e,f=o-i,d=t-a,h=r-t,p=l-a,v=f*d-p*s,g=c*d-h*s,y=p*c-f*h;if(0!==y){var m=v/y,b=g/y;return-.001<=m&&m<=1.001&&-.001<=b&&b<=1.001||u?[e+m*c,t+m*h]:[]}return 0===v||0===g?Ot(e,n,o)===o?[o,l]:Ot(e,n,i)===i?[i,a]:Ot(i,o,n)===n?[n,r]:[]:[]},Dt=function(e,t,n,r,i,a,o,l){var u,s,c,f,d,h,p=[],v=new Array(n.length),g=!0;if(null==a&&(g=!1),g){for(var y=0;y<v.length/2;y++)v[2*y]=n[2*y]*a+r,v[2*y+1]=n[2*y+1]*o+i;if(l>0){var m=Pt(v,-l);s=Tt(m)}else s=v}else s=n;for(var b=0;b<s.length/2;b++)c=s[2*b],f=s[2*b+1],b<s.length/2-1?(d=s[2*(b+1)],h=s[2*(b+1)+1]):(d=s[0],h=s[1]),0!==(u=Nt(e,t,r,i,c,f,d,h)).length&&p.push(u[0],u[1]);return p},It=function(e,t,n){var r=[e[0]-t[0],e[1]-t[1]],i=Math.sqrt(r[0]*r[0]+r[1]*r[1]),a=(i-n)/i;return a<0&&(a=1e-5),[t[0]+a*r[0],t[1]+a*r[1]]},At=function(e,t){var n=Bt(e,t);return n=Lt(n)},Lt=function(e){for(var t,n,r=e.length/2,i=1/0,a=1/0,o=-1/0,l=-1/0,u=0;u<r;u++)t=e[2*u],n=e[2*u+1],i=Math.min(i,t),o=Math.max(o,t),a=Math.min(a,n),l=Math.max(l,n);for(var s=2/(o-i),c=2/(l-a),f=0;f<r;f++)t=e[2*f]=e[2*f]*s,n=e[2*f+1]=e[2*f+1]*c,i=Math.min(i,t),o=Math.max(o,t),a=Math.min(a,n),l=Math.max(l,n);if(a<-1)for(var d=0;d<r;d++)n=e[2*d+1]=e[2*d+1]+(-1-a);return e},Bt=function(e,t){var n=1/e*2*Math.PI,r=e%2==0?Math.PI/2+n/2:Math.PI/2;r+=t;for(var i,a=new Array(2*e),o=0;o<e;o++)i=o*n+r,a[2*o]=Math.cos(i),a[2*o+1]=Math.sin(-i);return a},zt=function(e,t){return Math.min(e/4,t/4,8)},Rt=function(e,t,n){return[e-2*t+n,2*(t-e),e]},Ft=function(e,t){return{heightOffset:Math.min(15,.05*t),widthOffset:Math.min(100,.25*e),ctrlPtOffsetPct:.05}},jt=ve({dampingFactor:.8,precision:1e-6,iterations:200,weight:function(e){return 1}}),Vt={pageRank:function(e){for(var t=jt(e),n=t.dampingFactor,r=t.precision,i=t.iterations,a=t.weight,o=this._private.cy,l=this.byGroup(),u=l.nodes,s=l.edges,c=u.length,f=c*c,d=s.length,h=new Array(f),p=new Array(c),v=(1-n)/c,g=0;g<c;g++){for(var y=0;y<c;y++){h[g*c+y]=0}p[g]=0}for(var m=0;m<d;m++){var b=s[m],x=b.data("source"),w=b.data("target");if(x!==w){var E=u.indexOfId(x),k=u.indexOfId(w),S=a(b);h[k*c+E]+=S,p[E]+=S}}for(var T=1/c+v,P=0;P<c;P++)if(0===p[P])for(var C=0;C<c;C++){h[C*c+P]=T}else for(var _=0;_<c;_++){var M=_*c+P;h[M]=h[M]/p[P]+v}for(var O,N=new Array(c),D=new Array(c),I=0;I<c;I++)N[I]=1;for(var A=0;A<i;A++){for(var L=0;L<c;L++)D[L]=0;for(var B=0;B<c;B++)for(var z=0;z<c;z++){var R=B*c+z;D[B]+=h[R]*N[z]}Je(D),O=N,N=D,D=O;for(var F=0,j=0;j<c;j++){var V=O[j]-N[j];F+=V*V}if(F<r)break}return{rank:function(e){return e=o.collection(e)[0],N[u.indexOf(e)]}}}},qt=ve({root:null,weight:function(e){return 1},directed:!1,alpha:0}),Wt={degreeCentralityNormalized:function(e){e=qt(e);var t=this.cy(),n=this.nodes(),r=n.length;if(e.directed){for(var i={},a={},o=0,l=0,u=0;u<r;u++){var s=n[u],c=s.id();e.root=s;var f=this.degreeCentrality(e);o<f.indegree&&(o=f.indegree),l<f.outdegree&&(l=f.outdegree),i[c]=f.indegree,a[c]=f.outdegree}return{indegree:function(e){return 0==o?0:(m(e)&&(e=t.filter(e)),i[e.id()]/o)},outdegree:function(e){return 0===l?0:(m(e)&&(e=t.filter(e)),a[e.id()]/l)}}}for(var d={},h=0,p=0;p<r;p++){var v=n[p];e.root=v;var g=this.degreeCentrality(e);h<g.degree&&(h=g.degree),d[v.id()]=g.degree}return{degree:function(e){return 0===h?0:(m(e)&&(e=t.filter(e)),d[e.id()]/h)}}},degreeCentrality:function(e){e=qt(e);var t=this.cy(),n=this,r=e,i=r.root,a=r.weight,o=r.directed,l=r.alpha;if(i=t.collection(i)[0],o){for(var u=i.connectedEdges(),s=u.filter((function(e){return e.target().same(i)&&n.has(e)})),c=u.filter((function(e){return e.source().same(i)&&n.has(e)})),f=s.length,d=c.length,h=0,p=0,v=0;v<s.length;v++)h+=a(s[v]);for(var g=0;g<c.length;g++)p+=a(c[g]);return{indegree:Math.pow(f,1-l)*Math.pow(h,l),outdegree:Math.pow(d,1-l)*Math.pow(p,l)}}for(var y=i.connectedEdges().intersection(n),m=y.length,b=0,x=0;x<y.length;x++)b+=a(y[x]);return{degree:Math.pow(m,1-l)*Math.pow(b,l)}}};Wt.dc=Wt.degreeCentrality,Wt.dcn=Wt.degreeCentralityNormalised=Wt.degreeCentralityNormalized;var Yt=ve({harmonic:!0,weight:function(){return 1},directed:!1,root:null}),Ut={closenessCentralityNormalized:function(e){for(var t=Yt(e),n=t.harmonic,r=t.weight,i=t.directed,a=this.cy(),o={},l=0,u=this.nodes(),s=this.floydWarshall({weight:r,directed:i}),c=0;c<u.length;c++){for(var f=0,d=u[c],h=0;h<u.length;h++)if(c!==h){var p=s.distance(d,u[h]);f+=n?1/p:p}n||(f=1/f),l<f&&(l=f),o[d.id()]=f}return{closeness:function(e){return 0==l?0:(e=m(e)?a.filter(e)[0].id():e.id(),o[e]/l)}}},closenessCentrality:function(e){var t=Yt(e),n=t.root,r=t.weight,i=t.directed,a=t.harmonic;n=this.filter(n)[0];for(var o=this.dijkstra({root:n,weight:r,directed:i}),l=0,u=this.nodes(),s=0;s<u.length;s++){var c=u[s];if(!c.same(n)){var f=o.distanceTo(c);l+=a?1/f:f}}return a?l:1/l}};Ut.cc=Ut.closenessCentrality,Ut.ccn=Ut.closenessCentralityNormalised=Ut.closenessCentralityNormalized;var Xt=ve({weight:null,directed:!1}),Ht={betweennessCentrality:function(e){for(var t=Xt(e),n=t.directed,r=t.weight,i=null!=r,o=this.cy(),l=this.nodes(),u={},s={},c=0,f=function(e,t){s[e]=t,t>c&&(c=t)},d=function(e){return s[e]},h=0;h<l.length;h++){var p=l[h],v=p.id();u[v]=n?p.outgoers().nodes():p.openNeighborhood().nodes(),f(v,0)}for(var g=function(e){for(var t=l[e].id(),n=[],s={},c={},h={},p=new a((function(e,t){return h[e]-h[t]})),v=0;v<l.length;v++){var g=l[v].id();s[g]=[],c[g]=0,h[g]=1/0}for(c[t]=1,h[t]=0,p.push(t);!p.empty();){var y=p.pop();if(n.push(y),i)for(var m=0;m<u[y].length;m++){var b=u[y][m],x=o.getElementById(y),w=void 0;w=x.edgesTo(b).length>0?x.edgesTo(b)[0]:b.edgesTo(x)[0];var E=r(w);b=b.id(),h[b]>h[y]+E&&(h[b]=h[y]+E,p.nodes.indexOf(b)<0?p.push(b):p.updateItem(b),c[b]=0,s[b]=[]),h[b]==h[y]+E&&(c[b]=c[b]+c[y],s[b].push(y))}else for(var k=0;k<u[y].length;k++){var S=u[y][k].id();h[S]==1/0&&(p.push(S),h[S]=h[y]+1),h[S]==h[y]+1&&(c[S]=c[S]+c[y],s[S].push(y))}}for(var T={},P=0;P<l.length;P++)T[l[P].id()]=0;for(;n.length>0;)for(var C=n.pop(),_=0;_<s[C].length;_++){var M=s[C][_];T[M]=T[M]+c[M]/c[C]*(1+T[C]),C!=l[e].id()&&f(C,d(C)+T[C])}},y=0;y<l.length;y++)g(y);var m={betweenness:function(e){var t=o.collection(e).id();return d(t)},betweennessNormalized:function(e){if(0==c)return 0;var t=o.collection(e).id();return d(t)/c}};return m.betweennessNormalised=m.betweennessNormalized,m}};Ht.bc=Ht.betweennessCentrality;var Gt=ve({expandFactor:2,inflateFactor:2,multFactor:1,maxIterations:20,attributes:[function(e){return 1}]}),Kt=function(e,t){for(var n=0,r=0;r<t.length;r++)n+=t[r](e);return n},$t=function(e,t){for(var n,r=0;r<t;r++){n=0;for(var i=0;i<t;i++)n+=e[i*t+r];for(var a=0;a<t;a++)e[a*t+r]=e[a*t+r]/n}},Qt=function(e,t,n){for(var r=new Array(n*n),i=0;i<n;i++){for(var a=0;a<n;a++)r[i*n+a]=0;for(var o=0;o<n;o++)for(var l=0;l<n;l++)r[i*n+l]+=e[i*n+o]*t[o*n+l]}return r},Zt=function(e,t,n){for(var r=e.slice(0),i=1;i<n;i++)e=Qt(e,r,t);return e},Jt=function(e,t,n){for(var r=new Array(t*t),i=0;i<t*t;i++)r[i]=Math.pow(e[i],n);return $t(r,t),r},en=function(e,t,n,r){for(var i=0;i<n;i++){if(Math.round(e[i]*Math.pow(10,r))/Math.pow(10,r)!==Math.round(t[i]*Math.pow(10,r))/Math.pow(10,r))return!1}return!0},tn=function(e,t){for(var n=0;n<e.length;n++)if(!t[n]||e[n].id()!==t[n].id())return!1;return!0},nn=function(e){for(var t=this.nodes(),n=this.edges(),r=this.cy(),i=function(e){return Gt(e)}(e),a={},o=0;o<t.length;o++)a[t[o].id()]=o;for(var l,u=t.length,s=u*u,c=new Array(s),f=0;f<s;f++)c[f]=0;for(var d=0;d<n.length;d++){var h=n[d],p=a[h.source().id()],v=a[h.target().id()],g=Kt(h,i.attributes);c[p*u+v]+=g,c[v*u+p]+=g}!function(e,t,n){for(var r=0;r<t;r++)e[r*t+r]=n}(c,u,i.multFactor),$t(c,u);for(var y=!0,m=0;y&&m<i.maxIterations;)y=!1,l=Zt(c,u,i.expandFactor),c=Jt(l,u,i.inflateFactor),en(c,l,s,4)||(y=!0),m++;var b=function(e,t,n,r){for(var i=[],a=0;a<t;a++){for(var o=[],l=0;l<t;l++)Math.round(1e3*e[a*t+l])/1e3>0&&o.push(n[l]);0!==o.length&&i.push(r.collection(o))}return i}(c,u,t,r);return b=function(e){for(var t=0;t<e.length;t++)for(var n=0;n<e.length;n++)t!=n&&tn(e[t],e[n])&&e.splice(n,1);return e}(b)},rn={markovClustering:nn,mcl:nn},an=function(e){return e},on=function(e,t){return Math.abs(t-e)},ln=function(e,t,n){return e+on(t,n)},un=function(e,t,n){return e+Math.pow(n-t,2)},sn=function(e){return Math.sqrt(e)},cn=function(e,t,n){return Math.max(e,on(t,n))},fn=function(e,t,n,r,i){for(var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:an,o=r,l=0;l<e;l++)o=i(o,t(l),n(l));return a(o)},dn={euclidean:function(e,t,n){return e>=2?fn(e,t,n,0,un,sn):fn(e,t,n,0,ln)},squaredEuclidean:function(e,t,n){return fn(e,t,n,0,un)},manhattan:function(e,t,n){return fn(e,t,n,0,ln)},max:function(e,t,n){return fn(e,t,n,-1/0,cn)}};function hn(e,t,n,r,i,a){var o;return o=b(e)?e:dn[e]||dn.euclidean,0===t&&b(e)?o(i,a):o(t,n,r,i,a)}dn["squared-euclidean"]=dn.squaredEuclidean,dn.squaredeuclidean=dn.squaredEuclidean;var pn=ve({k:2,m:2,sensitivityThreshold:1e-4,distance:"euclidean",maxIterations:10,attributes:[],testMode:!1,testCentroids:null}),vn=function(e){return pn(e)},gn=function(e,t,n,r,i){var a="kMedoids"!==i?function(e){return n[e]}:function(e){return r[e](n)},o=n,l=t;return hn(e,r.length,a,(function(e){return r[e](t)}),o,l)},yn=function(e,t,n){for(var r=n.length,i=new Array(r),a=new Array(r),o=new Array(t),l=null,u=0;u<r;u++)i[u]=e.min(n[u]).value,a[u]=e.max(n[u]).value;for(var s=0;s<t;s++){l=[];for(var c=0;c<r;c++)l[c]=Math.random()*(a[c]-i[c])+i[c];o[s]=l}return o},mn=function(e,t,n,r,i){for(var a=1/0,o=0,l=0;l<t.length;l++){var u=gn(n,e,t[l],r,i);u<a&&(a=u,o=l)}return o},bn=function(e,t,n){for(var r=[],i=null,a=0;a<t.length;a++)n[(i=t[a]).id()]===e&&r.push(i);return r},xn=function(e,t,n){for(var r=0;r<e.length;r++)for(var i=0;i<e[r].length;i++){if(Math.abs(e[r][i]-t[r][i])>n)return!1}return!0},wn=function(e,t,n){for(var r=0;r<n;r++)if(e===t[r])return!0;return!1},En=function(e,t){var n=new Array(t);if(e.length<50)for(var r=0;r<t;r++){for(var i=e[Math.floor(Math.random()*e.length)];wn(i,n,r);)i=e[Math.floor(Math.random()*e.length)];n[r]=i}else for(var a=0;a<t;a++)n[a]=e[Math.floor(Math.random()*e.length)];return n},kn=function(e,t,n){for(var r=0,i=0;i<t.length;i++)r+=gn("manhattan",t[i],e,n,"kMedoids");return r},Sn=function(e,t,n,r,i){for(var a,o,l=0;l<t.length;l++)for(var u=0;u<e.length;u++)r[l][u]=Math.pow(n[l][u],i.m);for(var s=0;s<e.length;s++)for(var c=0;c<i.attributes.length;c++){a=0,o=0;for(var f=0;f<t.length;f++)a+=r[f][s]*i.attributes[c](t[f]),o+=r[f][s];e[s][c]=a/o}},Tn=function(e,t,n,r,i){for(var a=0;a<e.length;a++)t[a]=e[a].slice();for(var o,l,u,s=2/(i.m-1),c=0;c<n.length;c++)for(var f=0;f<r.length;f++){o=0;for(var d=0;d<n.length;d++)l=gn(i.distance,r[f],n[c],i.attributes,"cmeans"),u=gn(i.distance,r[f],n[d],i.attributes,"cmeans"),o+=Math.pow(l/u,s);e[f][c]=1/o}},Pn=function(e){var t,n,r,i,a=this.cy(),o=this.nodes(),l=vn(e);r=new Array(o.length);for(var u=0;u<o.length;u++)r[u]=new Array(l.k);n=new Array(o.length);for(var s=0;s<o.length;s++)n[s]=new Array(l.k);for(var c=0;c<o.length;c++){for(var f=0,d=0;d<l.k;d++)n[c][d]=Math.random(),f+=n[c][d];for(var h=0;h<l.k;h++)n[c][h]=n[c][h]/f}t=new Array(l.k);for(var p=0;p<l.k;p++)t[p]=new Array(l.attributes.length);i=new Array(o.length);for(var v=0;v<o.length;v++)i[v]=new Array(l.k);for(var g=!0,y=0;g&&y<l.maxIterations;)g=!1,Sn(t,o,n,i,l),Tn(n,r,t,o,l),xn(n,r,l.sensitivityThreshold)||(g=!0),y++;return{clusters:function(e,t,n,r){for(var i,a,o=new Array(n.k),l=0;l<o.length;l++)o[l]=[];for(var u=0;u<t.length;u++){i=-1/0,a=-1;for(var s=0;s<t[0].length;s++)t[u][s]>i&&(i=t[u][s],a=s);o[a].push(e[u])}for(var c=0;c<o.length;c++)o[c]=r.collection(o[c]);return o}(o,n,l,a),degreeOfMembership:n}},Cn={kMeans:function(e){var t,n=this.cy(),r=this.nodes(),i=null,a=vn(e),l=new Array(a.k),u={};if(a.testMode)if("number"==typeof a.testCentroids){a.testCentroids;t=yn(r,a.k,a.attributes)}else t="object"===o(a.testCentroids)?a.testCentroids:yn(r,a.k,a.attributes);else t=yn(r,a.k,a.attributes);for(var s,c,f,d=!0,h=0;d&&h<a.maxIterations;){for(var p=0;p<r.length;p++)u[(i=r[p]).id()]=mn(i,t,a.distance,a.attributes,"kMeans");d=!1;for(var v=0;v<a.k;v++){var g=bn(v,r,u);if(0!==g.length){for(var y=a.attributes.length,m=t[v],b=new Array(y),x=new Array(y),w=0;w<y;w++){x[w]=0;for(var E=0;E<g.length;E++)i=g[E],x[w]+=a.attributes[w](i);b[w]=x[w]/g.length,s=b[w],c=m[w],f=a.sensitivityThreshold,Math.abs(c-s)<=f||(d=!0)}t[v]=b,l[v]=n.collection(g)}}h++}return l},kMedoids:function(e){var t,n,r=this.cy(),i=this.nodes(),a=null,l=vn(e),u=new Array(l.k),s={},c=new Array(l.k);l.testMode?"number"==typeof l.testCentroids||(t="object"===o(l.testCentroids)?l.testCentroids:En(i,l.k)):t=En(i,l.k);for(var f=!0,d=0;f&&d<l.maxIterations;){for(var h=0;h<i.length;h++)s[(a=i[h]).id()]=mn(a,t,l.distance,l.attributes,"kMedoids");f=!1;for(var p=0;p<t.length;p++){var v=bn(p,i,s);if(0!==v.length){c[p]=kn(t[p],v,l.attributes);for(var g=0;g<v.length;g++)(n=kn(v[g],v,l.attributes))<c[p]&&(c[p]=n,t[p]=v[g],f=!0);u[p]=r.collection(v)}}d++}return u},fuzzyCMeans:Pn,fcm:Pn},_n=ve({distance:"euclidean",linkage:"min",mode:"threshold",threshold:1/0,addDendrogram:!1,dendrogramDepth:0,attributes:[]}),Mn={single:"min",complete:"max"},On=function(e,t,n,r,i){for(var a,o=0,l=1/0,u=i.attributes,s=function(e,t){return hn(i.distance,u.length,(function(t){return u[t](e)}),(function(e){return u[e](t)}),e,t)},c=0;c<e.length;c++){var f=e[c].key,d=n[f][r[f]];d<l&&(o=f,l=d)}if("threshold"===i.mode&&l>=i.threshold||"dendrogram"===i.mode&&1===e.length)return!1;var h,p=t[o],v=t[r[o]];h="dendrogram"===i.mode?{left:p,right:v,key:p.key}:{value:p.value.concat(v.value),key:p.key},e[p.index]=h,e.splice(v.index,1),t[p.key]=h;for(var g=0;g<e.length;g++){var y=e[g];p.key===y.key?a=1/0:"min"===i.linkage?(a=n[p.key][y.key],n[p.key][y.key]>n[v.key][y.key]&&(a=n[v.key][y.key])):"max"===i.linkage?(a=n[p.key][y.key],n[p.key][y.key]<n[v.key][y.key]&&(a=n[v.key][y.key])):a="mean"===i.linkage?(n[p.key][y.key]*p.size+n[v.key][y.key]*v.size)/(p.size+v.size):"dendrogram"===i.mode?s(y.value,p.value):s(y.value[0],p.value[0]),n[p.key][y.key]=n[y.key][p.key]=a}for(var m=0;m<e.length;m++){var b=e[m].key;if(r[b]===p.key||r[b]===v.key){for(var x=b,w=0;w<e.length;w++){var E=e[w].key;n[b][E]<n[b][x]&&(x=E)}r[b]=x}e[m].index=m}return p.key=v.key=p.index=v.index=null,!0},Nn=function e(t,n,r){t&&(t.value?n.push(t.value):(t.left&&e(t.left,n,r),t.right&&e(t.right,n,r)))},Dn=function(e){for(var t=this.cy(),n=this.nodes(),r=function(e){var t=_n(e),n=Mn[t.linkage];return null!=n&&(t.linkage=n),t}(e),i=r.attributes,a=function(e,t){return hn(r.distance,i.length,(function(t){return i[t](e)}),(function(e){return i[e](t)}),e,t)},o=[],l=[],u=[],s=[],c=0;c<n.length;c++){var f={value:"dendrogram"===r.mode?n[c]:[n[c]],key:c,index:c};o[c]=f,s[c]=f,l[c]=[],u[c]=0}for(var d=0;d<o.length;d++)for(var h=0;h<=d;h++){var p=void 0;p="dendrogram"===r.mode?d===h?1/0:a(o[d].value,o[h].value):d===h?1/0:a(o[d].value[0],o[h].value[0]),l[d][h]=p,l[h][d]=p,p<l[d][u[d]]&&(u[d]=h)}for(var v,g=On(o,s,l,u,r);g;)g=On(o,s,l,u,r);return"dendrogram"===r.mode?(v=function e(t,n,r){if(!t)return[];var i=[],a=[],o=[];return 0===n?(t.left&&Nn(t.left,i,r),t.right&&Nn(t.right,a,r),o=i.concat(a),[r.collection(o)]):1===n?t.value?[r.collection(t.value)]:(t.left&&Nn(t.left,i,r),t.right&&Nn(t.right,a,r),[r.collection(i),r.collection(a)]):t.value?[r.collection(t.value)]:(t.left&&(i=e(t.left,n-1,r)),t.right&&(a=e(t.right,n-1,r)),i.concat(a))}(o[0],r.dendrogramDepth,t),r.addDendrogram&&function e(t,n){if(!t)return"";if(t.left&&t.right){var r=e(t.left,n),i=e(t.right,n),a=n.add({group:"nodes",data:{id:r+","+i}});return n.add({group:"edges",data:{source:r,target:a.id()}}),n.add({group:"edges",data:{source:i,target:a.id()}}),a.id()}return t.value?t.value.id():void 0}(o[0],t)):(v=new Array(o.length),o.forEach((function(e,n){e.key=e.index=null,v[n]=t.collection(e.value)}))),v},In={hierarchicalClustering:Dn,hca:Dn},An=ve({distance:"euclidean",preference:"median",damping:.8,maxIterations:1e3,minIterations:100,attributes:[]}),Ln=function(e,t,n,r){var i=function(e,t){return r[t](e)};return-hn(e,r.length,(function(e){return i(t,e)}),(function(e){return i(n,e)}),t,n)},Bn=function(e,t){return"median"===t?Xe(e):"mean"===t?Ue(e):"min"===t?We(e):"max"===t?Ye(e):t},zn=function(e,t,n){for(var r=[],i=0;i<e;i++){for(var a=-1,o=-1/0,l=0;l<n.length;l++){var u=n[l];t[i*e+u]>o&&(a=u,o=t[i*e+u])}a>0&&r.push(a)}for(var s=0;s<n.length;s++)r[n[s]]=n[s];return r},Rn=function(e){for(var t,n,r,i,a,o,l=this.cy(),u=this.nodes(),s=function(e){var t=e.damping,n=e.preference;.5<=t&&t<1||ue("Damping must range on [0.5, 1).  Got: ".concat(t));var r=["median","mean","min","max"];return r.some((function(e){return e===n}))||E(n)||ue("Preference must be one of [".concat(r.map((function(e){return"'".concat(e,"'")})).join(", "),"] or a number.  Got: ").concat(n)),An(e)}(e),c={},f=0;f<u.length;f++)c[u[f].id()]=f;n=(t=u.length)*t,r=new Array(n);for(var d=0;d<n;d++)r[d]=-1/0;for(var h=0;h<t;h++)for(var p=0;p<t;p++)h!==p&&(r[h*t+p]=Ln(s.distance,u[h],u[p],s.attributes));i=Bn(r,s.preference);for(var v=0;v<t;v++)r[v*t+v]=i;a=new Array(n);for(var g=0;g<n;g++)a[g]=0;o=new Array(n);for(var y=0;y<n;y++)o[y]=0;for(var m=new Array(t),b=new Array(t),x=new Array(t),w=0;w<t;w++)m[w]=0,b[w]=0,x[w]=0;for(var k,S=new Array(t*s.minIterations),T=0;T<S.length;T++)S[T]=0;for(k=0;k<s.maxIterations;k++){for(var P=0;P<t;P++){for(var C=-1/0,_=-1/0,M=-1,O=0,N=0;N<t;N++)m[N]=a[P*t+N],(O=o[P*t+N]+r[P*t+N])>=C?(_=C,C=O,M=N):O>_&&(_=O);for(var D=0;D<t;D++)a[P*t+D]=(1-s.damping)*(r[P*t+D]-C)+s.damping*m[D];a[P*t+M]=(1-s.damping)*(r[P*t+M]-_)+s.damping*m[M]}for(var I=0;I<t;I++){for(var A=0,L=0;L<t;L++)m[L]=o[L*t+I],b[L]=Math.max(0,a[L*t+I]),A+=b[L];A-=b[I],b[I]=a[I*t+I],A+=b[I];for(var B=0;B<t;B++)o[B*t+I]=(1-s.damping)*Math.min(0,A-b[B])+s.damping*m[B];o[I*t+I]=(1-s.damping)*(A-b[I])+s.damping*m[I]}for(var z=0,R=0;R<t;R++){var F=o[R*t+R]+a[R*t+R]>0?1:0;S[k%s.minIterations*t+R]=F,z+=F}if(z>0&&(k>=s.minIterations-1||k==s.maxIterations-1)){for(var j=0,V=0;V<t;V++){x[V]=0;for(var q=0;q<s.minIterations;q++)x[V]+=S[q*t+V];0!==x[V]&&x[V]!==s.minIterations||j++}if(j===t)break}}for(var W=function(e,t,n){for(var r=[],i=0;i<e;i++)t[i*e+i]+n[i*e+i]>0&&r.push(i);return r}(t,a,o),Y=function(e,t,n){for(var r=zn(e,t,n),i=0;i<n.length;i++){for(var a=[],o=0;o<r.length;o++)r[o]===n[i]&&a.push(o);for(var l=-1,u=-1/0,s=0;s<a.length;s++){for(var c=0,f=0;f<a.length;f++)c+=t[a[f]*e+a[s]];c>u&&(l=s,u=c)}n[i]=a[l]}return r=zn(e,t,n)}(t,r,W),U={},X=0;X<W.length;X++)U[W[X]]=[];for(var H=0;H<u.length;H++){var G=Y[c[u[H].id()]];null!=G&&U[G].push(u[H])}for(var K=new Array(W.length),$=0;$<W.length;$++)K[$]=l.collection(U[W[$]]);return K},Fn={};[Te,Ce,_e,Oe,De,Ae,Re,Vt,Wt,Ut,Ht,rn,Cn,In,{affinityPropagation:Rn,ap:Rn}].forEach((function(e){R(Fn,e)}));
/*!
Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
Licensed under The MIT License (http://opensource.org/licenses/MIT)
*/
var jn=function e(t){if(!(this instanceof e))return new e(t);this.id="Thenable/1.0.7",this.state=0,this.fulfillValue=void 0,this.rejectReason=void 0,this.onFulfilled=[],this.onRejected=[],this.proxy={then:this.then.bind(this)},"function"==typeof t&&t.call(this,this.fulfill.bind(this),this.reject.bind(this))};jn.prototype={fulfill:function(e){return Vn(this,1,"fulfillValue",e)},reject:function(e){return Vn(this,2,"rejectReason",e)},then:function(e,t){var n=new jn;return this.onFulfilled.push(Yn(e,n,"fulfill")),this.onRejected.push(Yn(t,n,"reject")),qn(this),n.proxy}};var Vn=function(e,t,n,r){return 0===e.state&&(e.state=t,e[n]=r,qn(e)),e},qn=function(e){1===e.state?Wn(e,"onFulfilled",e.fulfillValue):2===e.state&&Wn(e,"onRejected",e.rejectReason)},Wn=function(e,n,r){if(0!==e[n].length){var i=e[n];e[n]=[];var a=function(){for(var e=0;e<i.length;e++)i[e](r)};"function"==typeof t?t(a):setTimeout(a,0)}},Yn=function(e,t,n){return function(r){if("function"!=typeof e)t[n].call(t,r);else{var i;try{i=e(r)}catch(e){return void t.reject(e)}Un(t,i)}}},Un=function e(t,n){if(t!==n&&t.proxy!==n){var r;if("object"===o(n)&&null!==n||"function"==typeof n)try{r=n.then}catch(e){return void t.reject(e)}if("function"!=typeof r)t.fulfill(n);else{var i=!1;try{r.call(n,(function(r){i||(i=!0,r===n?t.reject(new TypeError("circular thenable chain")):e(t,r))}),(function(e){i||(i=!0,t.reject(e))}))}catch(e){i||t.reject(e)}}}else t.reject(new TypeError("cannot resolve promise with itself"))};jn.all=function(e){return new jn((function(t,n){for(var r=new Array(e.length),i=0,a=function(n,a){r[n]=a,++i===e.length&&t(r)},o=0;o<e.length;o++)!function(t){var r=e[t];null!=r&&null!=r.then?r.then((function(e){a(t,e)}),(function(e){n(e)})):a(t,r)}(o)}))},jn.resolve=function(e){return new jn((function(t,n){t(e)}))},jn.reject=function(e){return new jn((function(t,n){n(e)}))};var Xn="undefined"!=typeof Promise?Promise:jn,Hn=function(e,t,n){var r=C(e),i=!r,a=this._private=R({duration:1e3},t,n);if(a.target=e,a.style=a.style||a.css,a.started=!1,a.playing=!1,a.hooked=!1,a.applying=!1,a.progress=0,a.completes=[],a.frames=[],a.complete&&b(a.complete)&&a.completes.push(a.complete),i){var o=e.position();a.startPosition=a.startPosition||{x:o.x,y:o.y},a.startStyle=a.startStyle||e.cy().style().getAnimationStartStyle(e,a.style)}if(r){var l=e.pan();a.startPan={x:l.x,y:l.y},a.startZoom=e.zoom()}this.length=1,this[0]=this},Gn=Hn.prototype;R(Gn,{instanceString:function(){return"animation"},hook:function(){var e=this._private;if(!e.hooked){var t=e.target._private.animation;(e.queue?t.queue:t.current).push(this),S(e.target)&&e.target.cy().addToAnimationPool(e.target),e.hooked=!0}return this},play:function(){var e=this._private;return 1===e.progress&&(e.progress=0),e.playing=!0,e.started=!1,e.stopped=!1,this.hook(),this},playing:function(){return this._private.playing},apply:function(){var e=this._private;return e.applying=!0,e.started=!1,e.stopped=!1,this.hook(),this},applying:function(){return this._private.applying},pause:function(){var e=this._private;return e.playing=!1,e.started=!1,this},stop:function(){var e=this._private;return e.playing=!1,e.started=!1,e.stopped=!0,this},rewind:function(){return this.progress(0)},fastforward:function(){return this.progress(1)},time:function(e){var t=this._private;return void 0===e?t.progress*t.duration:this.progress(e/t.duration)},progress:function(e){var t=this._private,n=t.playing;return void 0===e?t.progress:(n&&this.pause(),t.progress=e,t.started=!1,n&&this.play(),this)},completed:function(){return 1===this._private.progress},reverse:function(){var e=this._private,t=e.playing;t&&this.pause(),e.progress=1-e.progress,e.started=!1;var n=function(t,n){var r=e[t];null!=r&&(e[t]=e[n],e[n]=r)};if(n("zoom","startZoom"),n("pan","startPan"),n("position","startPosition"),e.style)for(var r=0;r<e.style.length;r++){var i=e.style[r],a=i.name,o=e.startStyle[a];e.startStyle[a]=i,e.style[r]=o}return t&&this.play(),this},promise:function(e){var t,n=this._private;switch(e){case"frame":t=n.frames;break;default:case"complete":case"completed":t=n.completes}return new Xn((function(e,n){t.push((function(){e()}))}))}}),Gn.complete=Gn.completed,Gn.run=Gn.play,Gn.running=Gn.playing;var Kn={};[{animated:function(){return function(){var e=void 0!==this.length?this:[this];if(!(this._private.cy||this).styleEnabled())return!1;var t=e[0];return t?t._private.animation.current.length>0:void 0}},clearQueue:function(){return function(){var e=void 0!==this.length?this:[this];if(!(this._private.cy||this).styleEnabled())return this;for(var t=0;t<e.length;t++){e[t]._private.animation.queue=[]}return this}},delay:function(){return function(e,t){return(this._private.cy||this).styleEnabled()?this.animate({delay:e,duration:e,complete:t}):this}},delayAnimation:function(){return function(e,t){return(this._private.cy||this).styleEnabled()?this.animation({delay:e,duration:e,complete:t}):this}},animation:function(){return function(e,t){var n=void 0!==this.length,r=n?this:[this],i=this._private.cy||this,a=!n,o=!a;if(!i.styleEnabled())return this;var l=i.style();if(e=R({},e,t),0===Object.keys(e).length)return new Hn(r[0],e);switch(void 0===e.duration&&(e.duration=400),e.duration){case"slow":e.duration=600;break;case"fast":e.duration=200}if(o&&(e.style=l.getPropsList(e.style||e.css),e.css=void 0),o&&null!=e.renderedPosition){var u=e.renderedPosition,s=i.pan(),c=i.zoom();e.position=Ve(u,c,s)}if(a&&null!=e.panBy){var f=e.panBy,d=i.pan();e.pan={x:d.x+f.x,y:d.y+f.y}}var h=e.center||e.centre;if(a&&null!=h){var p=i.getCenterPan(h.eles,e.zoom);null!=p&&(e.pan=p)}if(a&&null!=e.fit){var v=e.fit,g=i.getFitViewport(v.eles||v.boundingBox,v.padding);null!=g&&(e.pan=g.pan,e.zoom=g.zoom)}if(a&&w(e.zoom)){var y=i.getZoomedViewport(e.zoom);null!=y&&(y.zoomed&&(e.zoom=y.zoom),y.panned&&(e.pan=y.pan))}return new Hn(r[0],e)}},animate:function(){return function(e,t){var n=void 0!==this.length?this:[this];if(!(this._private.cy||this).styleEnabled())return this;t&&(e=R({},e,t));for(var r=0;r<n.length;r++){var i=n[r],a=i.animated()&&(void 0===e.queue||e.queue);i.animation(e,a?{queue:!0}:void 0).play()}return this}},stop:function(){return function(e,t){var n=void 0!==this.length?this:[this],r=this._private.cy||this;if(!r.styleEnabled())return this;for(var i=0;i<n.length;i++){for(var a=n[i]._private,o=a.animation.current,l=0;l<o.length;l++){var u=o[l]._private;t&&(u.duration=0)}e&&(a.animation.queue=[]),t||(a.animation.current=[])}return r.notify("draw"),this}}},{data:function(e){return e=R({},{field:"data",bindingEvent:"data",allowBinding:!1,allowSetting:!1,allowGetting:!1,settingEvent:"data",settingTriggersEvent:!1,triggerFnName:"trigger",immutableKeys:{},updateStyle:!1,beforeGet:function(e){},beforeSet:function(e,t){},onSet:function(e){},canSet:function(e){return!0}},e),function(t,n){var r=e,i=void 0!==this.length,a=i?this:[this],o=i?this[0]:this;if(m(t)){var l;if(r.allowGetting&&void 0===n)return o&&(r.beforeGet(o),l=o._private[r.field][t]),l;if(r.allowSetting&&void 0!==n&&!r.immutableKeys[t]){var u=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n);r.beforeSet(this,u);for(var s=0,c=a.length;s<c;s++){var f=a[s];r.canSet(f)&&(f._private[r.field][t]=n)}r.updateStyle&&this.updateStyle(),r.onSet(this),r.settingTriggersEvent&&this[r.triggerFnName](r.settingEvent)}}else if(r.allowSetting&&w(t)){var d,h,p=t,v=Object.keys(p);r.beforeSet(this,p);for(var g=0;g<v.length;g++){if(h=p[d=v[g]],!r.immutableKeys[d])for(var y=0;y<a.length;y++){var x=a[y];r.canSet(x)&&(x._private[r.field][d]=h)}}r.updateStyle&&this.updateStyle(),r.onSet(this),r.settingTriggersEvent&&this[r.triggerFnName](r.settingEvent)}else if(r.allowBinding&&b(t)){var E=t;this.on(r.bindingEvent,E)}else if(r.allowGetting&&void 0===t){var k;return o&&(r.beforeGet(o),k=o._private[r.field]),k}return this}},removeData:function(e){return e=R({},{field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!1,immutableKeys:{}},e),function(t){var n=e,r=void 0!==this.length?this:[this];if(m(t)){for(var i=t.split(/\s+/),a=i.length,o=0;o<a;o++){var l=i[o];if(!M(l))if(!n.immutableKeys[l])for(var u=0,s=r.length;u<s;u++)r[u]._private[n.field][l]=void 0}n.triggerEvent&&this[n.triggerFnName](n.event)}else if(void 0===t){for(var c=0,f=r.length;c<f;c++)for(var d=r[c]._private[n.field],h=Object.keys(d),p=0;p<h.length;p++){var v=h[p];!n.immutableKeys[v]&&(d[v]=void 0)}n.triggerEvent&&this[n.triggerFnName](n.event)}return this}}},{eventAliasesOn:function(e){var t=e;t.addListener=t.listen=t.bind=t.on,t.unlisten=t.unbind=t.off=t.removeListener,t.trigger=t.emit,t.pon=t.promiseOn=function(e,t){var n=this,r=Array.prototype.slice.call(arguments,0);return new Xn((function(e,t){var i=r.concat([function(t){n.off.apply(n,a),e(t)}]),a=i.concat([]);n.on.apply(n,i)}))}}}].forEach((function(e){R(Kn,e)}));var $n={animate:Kn.animate(),animation:Kn.animation(),animated:Kn.animated(),clearQueue:Kn.clearQueue(),delay:Kn.delay(),delayAnimation:Kn.delayAnimation(),stop:Kn.stop()},Qn={classes:function(e){if(void 0===e){var t=[];return this[0]._private.classes.forEach((function(e){return t.push(e)})),t}x(e)||(e=(e||"").match(/\S+/g)||[]);for(var n=[],r=new Ee(e),i=0;i<this.length;i++){for(var a=this[i],o=a._private,l=o.classes,u=!1,s=0;s<e.length;s++){var c=e[s];if(!l.has(c)){u=!0;break}}u||(u=l.size!==e.length),u&&(o.classes=r,n.push(a))}return n.length>0&&this.spawn(n).updateStyle().emit("class"),this},addClass:function(e){return this.toggleClass(e,!0)},hasClass:function(e){var t=this[0];return null!=t&&t._private.classes.has(e)},toggleClass:function(e,t){x(e)||(e=e.match(/\S+/g)||[]);for(var n=void 0===t,r=[],i=0,a=this.length;i<a;i++)for(var o=this[i],l=o._private.classes,u=!1,s=0;s<e.length;s++){var c=e[s],f=l.has(c),d=!1;t||n&&!f?(l.add(c),d=!0):(!t||n&&f)&&(l.delete(c),d=!0),!u&&d&&(r.push(o),u=!0)}return r.length>0&&this.spawn(r).updateStyle().emit("class"),this},removeClass:function(e){return this.toggleClass(e,!1)},flashClass:function(e,t){var n=this;if(null==t)t=250;else if(0===t)return n;return n.addClass(e),setTimeout((function(){n.removeClass(e)}),t),n}};Qn.className=Qn.classNames=Qn.classes;var Zn={metaChar:"[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]",comparatorOp:"=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=",boolOp:"\\?|\\!|\\^",string:"\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'",number:B,meta:"degree|indegree|outdegree",separator:"\\s*,\\s*",descendant:"\\s+",child:"\\s+>\\s+",subject:"\\$",group:"node|edge|\\*",directedEdge:"\\s+->\\s+",undirectedEdge:"\\s+<->\\s+"};Zn.variable="(?:[\\w-]|(?:\\\\"+Zn.metaChar+"))+",Zn.value=Zn.string+"|"+Zn.number,Zn.className=Zn.variable,Zn.id=Zn.variable,function(){var e,t,n;for(e=Zn.comparatorOp.split("|"),n=0;n<e.length;n++)t=e[n],Zn.comparatorOp+="|@"+t;for(e=Zn.comparatorOp.split("|"),n=0;n<e.length;n++)(t=e[n]).indexOf("!")>=0||"="!==t&&(Zn.comparatorOp+="|\\!"+t)}();var Jn=0,er=1,tr=2,nr=3,rr=4,ir=5,ar=6,or=7,lr=8,ur=9,sr=10,cr=11,fr=12,dr=13,hr=14,pr=15,vr=16,gr=17,yr=18,mr=19,br=20,xr=[{selector:":selected",matches:function(e){return e.selected()}},{selector:":unselected",matches:function(e){return!e.selected()}},{selector:":selectable",matches:function(e){return e.selectable()}},{selector:":unselectable",matches:function(e){return!e.selectable()}},{selector:":locked",matches:function(e){return e.locked()}},{selector:":unlocked",matches:function(e){return!e.locked()}},{selector:":visible",matches:function(e){return e.visible()}},{selector:":hidden",matches:function(e){return!e.visible()}},{selector:":transparent",matches:function(e){return e.transparent()}},{selector:":grabbed",matches:function(e){return e.grabbed()}},{selector:":free",matches:function(e){return!e.grabbed()}},{selector:":removed",matches:function(e){return e.removed()}},{selector:":inside",matches:function(e){return!e.removed()}},{selector:":grabbable",matches:function(e){return e.grabbable()}},{selector:":ungrabbable",matches:function(e){return!e.grabbable()}},{selector:":animated",matches:function(e){return e.animated()}},{selector:":unanimated",matches:function(e){return!e.animated()}},{selector:":parent",matches:function(e){return e.isParent()}},{selector:":childless",matches:function(e){return e.isChildless()}},{selector:":child",matches:function(e){return e.isChild()}},{selector:":orphan",matches:function(e){return e.isOrphan()}},{selector:":nonorphan",matches:function(e){return e.isChild()}},{selector:":compound",matches:function(e){return e.isNode()?e.isParent():e.source().isParent()||e.target().isParent()}},{selector:":loop",matches:function(e){return e.isLoop()}},{selector:":simple",matches:function(e){return e.isSimple()}},{selector:":active",matches:function(e){return e.active()}},{selector:":inactive",matches:function(e){return!e.active()}},{selector:":backgrounding",matches:function(e){return e.backgrounding()}},{selector:":nonbackgrounding",matches:function(e){return!e.backgrounding()}}].sort((function(e,t){return function(e,t){return-1*z(e,t)}(e.selector,t.selector)})),wr=function(){for(var e,t={},n=0;n<xr.length;n++)t[(e=xr[n]).selector]=e.matches;return t}(),Er="("+xr.map((function(e){return e.selector})).join("|")+")",kr=function(e){return e.replace(new RegExp("\\\\("+Zn.metaChar+")","g"),(function(e,t){return t}))},Sr=function(e,t,n){e[e.length-1]=n},Tr=[{name:"group",query:!0,regex:"("+Zn.group+")",populate:function(e,t,n){var r=c(n,1)[0];t.checks.push({type:Jn,value:"*"===r?r:r+"s"})}},{name:"state",query:!0,regex:Er,populate:function(e,t,n){var r=c(n,1)[0];t.checks.push({type:or,value:r})}},{name:"id",query:!0,regex:"\\#("+Zn.id+")",populate:function(e,t,n){var r=c(n,1)[0];t.checks.push({type:lr,value:kr(r)})}},{name:"className",query:!0,regex:"\\.("+Zn.className+")",populate:function(e,t,n){var r=c(n,1)[0];t.checks.push({type:ur,value:kr(r)})}},{name:"dataExists",query:!0,regex:"\\[\\s*("+Zn.variable+")\\s*\\]",populate:function(e,t,n){var r=c(n,1)[0];t.checks.push({type:rr,field:kr(r)})}},{name:"dataCompare",query:!0,regex:"\\[\\s*("+Zn.variable+")\\s*("+Zn.comparatorOp+")\\s*("+Zn.value+")\\s*\\]",populate:function(e,t,n){var r=c(n,3),i=r[0],a=r[1],o=r[2];o=null!=new RegExp("^"+Zn.string+"$").exec(o)?o.substring(1,o.length-1):parseFloat(o),t.checks.push({type:nr,field:kr(i),operator:a,value:o})}},{name:"dataBool",query:!0,regex:"\\[\\s*("+Zn.boolOp+")\\s*("+Zn.variable+")\\s*\\]",populate:function(e,t,n){var r=c(n,2),i=r[0],a=r[1];t.checks.push({type:ir,field:kr(a),operator:i})}},{name:"metaCompare",query:!0,regex:"\\[\\[\\s*("+Zn.meta+")\\s*("+Zn.comparatorOp+")\\s*("+Zn.number+")\\s*\\]\\]",populate:function(e,t,n){var r=c(n,3),i=r[0],a=r[1],o=r[2];t.checks.push({type:ar,field:kr(i),operator:a,value:parseFloat(o)})}},{name:"nextQuery",separator:!0,regex:Zn.separator,populate:function(e,t){var n=e.currentSubject,r=e.edgeCount,i=e.compoundCount,a=e[e.length-1];return null!=n&&(a.subject=n,e.currentSubject=null),a.edgeCount=r,a.compoundCount=i,e.edgeCount=0,e.compoundCount=0,e[e.length++]={checks:[]}}},{name:"directedEdge",separator:!0,regex:Zn.directedEdge,populate:function(e,t){if(null==e.currentSubject){var n={checks:[]},r=t,i={checks:[]};return n.checks.push({type:cr,source:r,target:i}),Sr(e,0,n),e.edgeCount++,i}var a={checks:[]},o=t,l={checks:[]};return a.checks.push({type:fr,source:o,target:l}),Sr(e,0,a),e.edgeCount++,l}},{name:"undirectedEdge",separator:!0,regex:Zn.undirectedEdge,populate:function(e,t){if(null==e.currentSubject){var n={checks:[]},r=t,i={checks:[]};return n.checks.push({type:sr,nodes:[r,i]}),Sr(e,0,n),e.edgeCount++,i}var a={checks:[]},o=t,l={checks:[]};return a.checks.push({type:hr,node:o,neighbor:l}),Sr(e,0,a),l}},{name:"child",separator:!0,regex:Zn.child,populate:function(e,t){if(null==e.currentSubject){var n={checks:[]},r={checks:[]},i=e[e.length-1];return n.checks.push({type:pr,parent:i,child:r}),Sr(e,0,n),e.compoundCount++,r}if(e.currentSubject===t){var a={checks:[]},o=e[e.length-1],l={checks:[]},u={checks:[]},s={checks:[]},c={checks:[]};return a.checks.push({type:mr,left:o,right:l,subject:u}),u.checks=t.checks,t.checks=[{type:br}],c.checks.push({type:br}),l.checks.push({type:gr,parent:c,child:s}),Sr(e,0,a),e.currentSubject=u,e.compoundCount++,s}var f={checks:[]},d={checks:[]},h=[{type:gr,parent:f,child:d}];return f.checks=t.checks,t.checks=h,e.compoundCount++,d}},{name:"descendant",separator:!0,regex:Zn.descendant,populate:function(e,t){if(null==e.currentSubject){var n={checks:[]},r={checks:[]},i=e[e.length-1];return n.checks.push({type:vr,ancestor:i,descendant:r}),Sr(e,0,n),e.compoundCount++,r}if(e.currentSubject===t){var a={checks:[]},o=e[e.length-1],l={checks:[]},u={checks:[]},s={checks:[]},c={checks:[]};return a.checks.push({type:mr,left:o,right:l,subject:u}),u.checks=t.checks,t.checks=[{type:br}],c.checks.push({type:br}),l.checks.push({type:yr,ancestor:c,descendant:s}),Sr(e,0,a),e.currentSubject=u,e.compoundCount++,s}var f={checks:[]},d={checks:[]},h=[{type:yr,ancestor:f,descendant:d}];return f.checks=t.checks,t.checks=h,e.compoundCount++,d}},{name:"subject",modifier:!0,regex:Zn.subject,populate:function(e,t){if(null!=e.currentSubject&&e.currentSubject!==t)return ce("Redefinition of subject in selector `"+e.toString()+"`"),!1;e.currentSubject=t;var n=e[e.length-1].checks[0],r=null==n?null:n.type;r===cr?n.type=dr:r===sr&&(n.type=hr,n.node=n.nodes[1],n.neighbor=n.nodes[0],n.nodes=null)}}];Tr.forEach((function(e){return e.regexObj=new RegExp("^"+e.regex)}));var Pr=function(e){for(var t,n,r,i=0;i<Tr.length;i++){var a=Tr[i],o=a.name,l=e.match(a.regexObj);if(null!=l){n=l,t=a,r=o;var u=l[0];e=e.substring(u.length);break}}return{expr:t,match:n,name:r,remaining:e}},Cr={parse:function(e){var t=this.inputText=e,n=this[0]={checks:[]};for(this.length=1,t=function(e){var t=e.match(/^\s+/);if(t){var n=t[0];e=e.substring(n.length)}return e}(t);;){var r=Pr(t);if(null==r.expr)return ce("The selector `"+e+"`is invalid"),!1;var i=r.match.slice(1),a=r.expr.populate(this,n,i);if(!1===a)return!1;if(null!=a&&(n=a),(t=r.remaining).match(/^\s*$/))break}var o=this[this.length-1];null!=this.currentSubject&&(o.subject=this.currentSubject),o.edgeCount=this.edgeCount,o.compoundCount=this.compoundCount;for(var l=0;l<this.length;l++){var u=this[l];if(u.compoundCount>0&&u.edgeCount>0)return ce("The selector `"+e+"` is invalid because it uses both a compound selector and an edge selector"),!1;if(u.edgeCount>1)return ce("The selector `"+e+"` is invalid because it uses multiple edge selectors"),!1;1===u.edgeCount&&ce("The selector `"+e+"` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.")}return!0},toString:function(){if(null!=this.toStringCache)return this.toStringCache;for(var e=function(e){return null==e?"":e},t=function(t){return m(t)?'"'+t+'"':e(t)},n=function(e){return" "+e+" "},r=function(r,a){var o=r.type,l=r.value;switch(o){case Jn:var u=e(l);return u.substring(0,u.length-1);case nr:var s=r.field,c=r.operator;return"["+s+n(e(c))+t(l)+"]";case ir:var f=r.operator,d=r.field;return"["+e(f)+d+"]";case rr:return"["+r.field+"]";case ar:var h=r.operator;return"[["+r.field+n(e(h))+t(l)+"]]";case or:return l;case lr:return"#"+l;case ur:return"."+l;case gr:case pr:return i(r.parent,a)+n(">")+i(r.child,a);case yr:case vr:return i(r.ancestor,a)+" "+i(r.descendant,a);case mr:var p=i(r.left,a),v=i(r.subject,a),g=i(r.right,a);return p+(p.length>0?" ":"")+v+g;case br:return""}},i=function(e,t){return e.checks.reduce((function(n,i,a){return n+(t===e&&0===a?"$":"")+r(i,t)}),"")},a="",o=0;o<this.length;o++){var l=this[o];a+=i(l,l.subject),this.length>1&&o<this.length-1&&(a+=", ")}return this.toStringCache=a,a}},_r=function(e,t,n){var r,i,a,o=m(e),l=E(e),u=m(n),s=!1,c=!1,f=!1;switch(t.indexOf("!")>=0&&(t=t.replace("!",""),c=!0),t.indexOf("@")>=0&&(t=t.replace("@",""),s=!0),(o||u||s)&&(i=o||l?""+e:"",a=""+n),s&&(e=i=i.toLowerCase(),n=a=a.toLowerCase()),t){case"*=":r=i.indexOf(a)>=0;break;case"$=":r=i.indexOf(a,i.length-a.length)>=0;break;case"^=":r=0===i.indexOf(a);break;case"=":r=e===n;break;case">":f=!0,r=e>n;break;case">=":f=!0,r=e>=n;break;case"<":f=!0,r=e<n;break;case"<=":f=!0,r=e<=n;break;default:r=!1}return!c||null==e&&f||(r=!r),r},Mr=function(e,t){return e.data(t)},Or=[],Nr=function(e,t){return e.checks.every((function(e){return Or[e.type](e,t)}))};Or[Jn]=function(e,t){var n=e.value;return"*"===n||n===t.group()},Or[or]=function(e,t){return function(e,t){return wr[e](t)}(e.value,t)},Or[lr]=function(e,t){var n=e.value;return t.id()===n},Or[ur]=function(e,t){var n=e.value;return t.hasClass(n)},Or[ar]=function(e,t){var n=e.field,r=e.operator,i=e.value;return _r(function(e,t){return e[t]()}(t,n),r,i)},Or[nr]=function(e,t){var n=e.field,r=e.operator,i=e.value;return _r(Mr(t,n),r,i)},Or[ir]=function(e,t){var n=e.field,r=e.operator;return function(e,t){switch(t){case"?":return!!e;case"!":return!e;case"^":return void 0===e}}(Mr(t,n),r)},Or[rr]=function(e,t){var n=e.field;e.operator;return void 0!==Mr(t,n)},Or[sr]=function(e,t){var n=e.nodes[0],r=e.nodes[1],i=t.source(),a=t.target();return Nr(n,i)&&Nr(r,a)||Nr(r,i)&&Nr(n,a)},Or[hr]=function(e,t){return Nr(e.node,t)&&t.neighborhood().some((function(t){return t.isNode()&&Nr(e.neighbor,t)}))},Or[cr]=function(e,t){return Nr(e.source,t.source())&&Nr(e.target,t.target())},Or[fr]=function(e,t){return Nr(e.source,t)&&t.outgoers().some((function(t){return t.isNode()&&Nr(e.target,t)}))},Or[dr]=function(e,t){return Nr(e.target,t)&&t.incomers().some((function(t){return t.isNode()&&Nr(e.source,t)}))},Or[pr]=function(e,t){return Nr(e.child,t)&&Nr(e.parent,t.parent())},Or[gr]=function(e,t){return Nr(e.parent,t)&&t.children().some((function(t){return Nr(e.child,t)}))},Or[vr]=function(e,t){return Nr(e.descendant,t)&&t.ancestors().some((function(t){return Nr(e.ancestor,t)}))},Or[yr]=function(e,t){return Nr(e.ancestor,t)&&t.descendants().some((function(t){return Nr(e.descendant,t)}))},Or[mr]=function(e,t){return Nr(e.subject,t)&&Nr(e.left,t)&&Nr(e.right,t)},Or[br]=function(){return!0},Or[er]=function(e,t){return e.value.has(t)},Or[tr]=function(e,t){return(0,e.value)(t)};var Dr=function(e){this.inputText=e,this.currentSubject=null,this.compoundCount=0,this.edgeCount=0,this.length=0,null==e||m(e)&&e.match(/^\s*$/)||(S(e)?this.addQuery({checks:[{type:er,value:e.collection()}]}):b(e)?this.addQuery({checks:[{type:tr,value:e}]}):m(e)?this.parse(e)||(this.invalid=!0):ue("A selector must be created from a string; found "))},Ir=Dr.prototype;[Cr,{matches:function(e){for(var t=0;t<this.length;t++){var n=this[t];if(Nr(n,e))return!0}return!1},filter:function(e){var t=this;if(1===t.length&&1===t[0].checks.length&&t[0].checks[0].type===lr)return e.getElementById(t[0].checks[0].value).collection();var n=function(e){for(var n=0;n<t.length;n++){var r=t[n];if(Nr(r,e))return!0}return!1};return null==t.text()&&(n=function(){return!0}),e.filter(n)}}].forEach((function(e){return R(Ir,e)})),Ir.text=function(){return this.inputText},Ir.size=function(){return this.length},Ir.eq=function(e){return this[e]},Ir.sameText=function(e){return!this.invalid&&!e.invalid&&this.text()===e.text()},Ir.addQuery=function(e){this[this.length++]=e},Ir.selector=Ir.toString;var Ar={allAre:function(e){var t=new Dr(e);return this.every((function(e){return t.matches(e)}))},is:function(e){var t=new Dr(e);return this.some((function(e){return t.matches(e)}))},some:function(e,t){for(var n=0;n<this.length;n++){if(t?e.apply(t,[this[n],n,this]):e(this[n],n,this))return!0}return!1},every:function(e,t){for(var n=0;n<this.length;n++){if(!(t?e.apply(t,[this[n],n,this]):e(this[n],n,this)))return!1}return!0},same:function(e){if(this===e)return!0;e=this.cy().collection(e);var t=this.length;return t===e.length&&(1===t?this[0]===e[0]:this.every((function(t){return e.hasElementWithId(t.id())})))},anySame:function(e){return e=this.cy().collection(e),this.some((function(t){return e.hasElementWithId(t.id())}))},allAreNeighbors:function(e){e=this.cy().collection(e);var t=this.neighborhood();return e.every((function(e){return t.hasElementWithId(e.id())}))},contains:function(e){e=this.cy().collection(e);var t=this;return e.every((function(e){return t.hasElementWithId(e.id())}))}};Ar.allAreNeighbours=Ar.allAreNeighbors,Ar.has=Ar.contains,Ar.equal=Ar.equals=Ar.same;var Lr,Br,zr=function(e,t){return function(n,r,i,a){var o,l=n;if(null==l?o="":S(l)&&1===l.length&&(o=l.id()),1===this.length&&o){var u=this[0]._private,s=u.traversalCache=u.traversalCache||{},c=s[t]=s[t]||[],f=Q(o),d=c[f];return d||(c[f]=e.call(this,n,r,i,a))}return e.call(this,n,r,i,a)}},Rr={parent:function(e){var t=[];if(1===this.length){var n=this[0]._private.parent;if(n)return n}for(var r=0;r<this.length;r++){var i=this[r]._private.parent;i&&t.push(i)}return this.spawn(t,{unique:!0}).filter(e)},parents:function(e){for(var t=[],n=this.parent();n.nonempty();){for(var r=0;r<n.length;r++){var i=n[r];t.push(i)}n=n.parent()}return this.spawn(t,{unique:!0}).filter(e)},commonAncestors:function(e){for(var t,n=0;n<this.length;n++){var r=this[n].parents();t=(t=t||r).intersect(r)}return t.filter(e)},orphans:function(e){return this.stdFilter((function(e){return e.isOrphan()})).filter(e)},nonorphans:function(e){return this.stdFilter((function(e){return e.isChild()})).filter(e)},children:zr((function(e){for(var t=[],n=0;n<this.length;n++)for(var r=this[n]._private.children,i=0;i<r.length;i++)t.push(r[i]);return this.spawn(t,{unique:!0}).filter(e)}),"children"),siblings:function(e){return this.parent().children().not(this).filter(e)},isParent:function(){var e=this[0];if(e)return e.isNode()&&0!==e._private.children.length},isChildless:function(){var e=this[0];if(e)return e.isNode()&&0===e._private.children.length},isChild:function(){var e=this[0];if(e)return e.isNode()&&null!=e._private.parent},isOrphan:function(){var e=this[0];if(e)return e.isNode()&&null==e._private.parent},descendants:function(e){var t=[];return function e(n){for(var r=0;r<n.length;r++){var i=n[r];t.push(i),i.children().nonempty()&&e(i.children())}}(this.children()),this.spawn(t,{unique:!0}).filter(e)}};function Fr(e,t,n,r){for(var i=[],a=new Ee,o=e.cy().hasCompoundNodes(),l=0;l<e.length;l++){var u=e[l];n?i.push(u):o&&r(i,a,u)}for(;i.length>0;){var s=i.shift();t(s),a.add(s.id()),o&&r(i,a,s)}return e}function jr(e,t,n){if(n.isParent())for(var r=n._private.children,i=0;i<r.length;i++){var a=r[i];t.has(a.id())||e.push(a)}}function Vr(e,t,n){if(n.isChild()){var r=n._private.parent;t.has(r.id())||e.push(r)}}function qr(e,t,n){Vr(e,t,n),jr(e,t,n)}Rr.forEachDown=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return Fr(this,e,t,jr)},Rr.forEachUp=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return Fr(this,e,t,Vr)},Rr.forEachUpAndDown=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return Fr(this,e,t,qr)},Rr.ancestors=Rr.parents,(Lr=Br={data:Kn.data({field:"data",bindingEvent:"data",allowBinding:!0,allowSetting:!0,settingEvent:"data",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),removeData:Kn.removeData({field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),scratch:Kn.data({field:"scratch",bindingEvent:"scratch",allowBinding:!0,allowSetting:!0,settingEvent:"scratch",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,updateStyle:!0}),removeScratch:Kn.removeData({field:"scratch",event:"scratch",triggerFnName:"trigger",triggerEvent:!0,updateStyle:!0}),rscratch:Kn.data({field:"rscratch",allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,allowGetting:!0}),removeRscratch:Kn.removeData({field:"rscratch",triggerEvent:!1}),id:function(){var e=this[0];if(e)return e._private.data.id}}).attr=Lr.data,Lr.removeAttr=Lr.removeData;var Wr,Yr,Ur=Br,Xr={};function Hr(e){return function(t){if(void 0===t&&(t=!0),0!==this.length&&this.isNode()&&!this.removed()){for(var n=0,r=this[0],i=r._private.edges,a=0;a<i.length;a++){var o=i[a];!t&&o.isLoop()||(n+=e(r,o))}return n}}}function Gr(e,t){return function(n){for(var r,i=this.nodes(),a=0;a<i.length;a++){var o=i[a][e](n);void 0===o||void 0!==r&&!t(o,r)||(r=o)}return r}}R(Xr,{degree:Hr((function(e,t){return t.source().same(t.target())?2:1})),indegree:Hr((function(e,t){return t.target().same(e)?1:0})),outdegree:Hr((function(e,t){return t.source().same(e)?1:0}))}),R(Xr,{minDegree:Gr("degree",(function(e,t){return e<t})),maxDegree:Gr("degree",(function(e,t){return e>t})),minIndegree:Gr("indegree",(function(e,t){return e<t})),maxIndegree:Gr("indegree",(function(e,t){return e>t})),minOutdegree:Gr("outdegree",(function(e,t){return e<t})),maxOutdegree:Gr("outdegree",(function(e,t){return e>t}))}),R(Xr,{totalDegree:function(e){for(var t=0,n=this.nodes(),r=0;r<n.length;r++)t+=n[r].degree(e);return t}});var Kr=function(e,t,n){for(var r=0;r<e.length;r++){var i=e[r];if(!i.locked()){var a=i._private.position,o={x:null!=t.x?t.x-a.x:0,y:null!=t.y?t.y-a.y:0};!i.isParent()||0===o.x&&0===o.y||i.children().shift(o,n),i.shiftCachedBoundingBox(o)}}},$r={field:"position",bindingEvent:"position",allowBinding:!0,allowSetting:!0,settingEvent:"position",settingTriggersEvent:!0,triggerFnName:"emitAndNotify",allowGetting:!0,validKeys:["x","y"],beforeGet:function(e){e.updateCompoundBounds()},beforeSet:function(e,t){Kr(e,t,!1)},onSet:function(e){e.dirtyCompoundBoundsCache()},canSet:function(e){return!e.locked()}};(Wr=Yr={position:Kn.data($r),silentPosition:Kn.data(R({},$r,{allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,allowGetting:!1,beforeSet:function(e,t){Kr(e,t,!0)}})),positions:function(e,t){if(w(e))t?this.silentPosition(e):this.position(e);else if(b(e)){var n=e,r=this.cy();r.startBatch();for(var i=0;i<this.length;i++){var a,o=this[i];(a=n(o,i))&&(t?o.silentPosition(a):o.position(a))}r.endBatch()}return this},silentPositions:function(e){return this.positions(e,!0)},shift:function(e,t,n){var r;if(w(e)?(r={x:E(e.x)?e.x:0,y:E(e.y)?e.y:0},n=t):m(e)&&E(t)&&((r={x:0,y:0})[e]=t),null!=r){var i=this.cy();i.startBatch();for(var a=0;a<this.length;a++){var o=this[a],l=o.position(),u={x:l.x+r.x,y:l.y+r.y};n?o.silentPosition(u):o.position(u)}i.endBatch()}return this},silentShift:function(e,t){return w(e)?this.shift(e,!0):m(e)&&E(t)&&this.shift(e,t,!0),this},renderedPosition:function(e,t){var n=this[0],r=this.cy(),i=r.zoom(),a=r.pan(),o=w(e)?e:void 0,l=void 0!==o||void 0!==t&&m(e);if(n&&n.isNode()){if(!l){var u=n.position();return o=je(u,i,a),void 0===e?o:o[e]}for(var s=0;s<this.length;s++){var c=this[s];void 0!==t?c.position(e,(t-a[e])/i):void 0!==o&&c.position(Ve(o,i,a))}}else if(!l)return;return this},relativePosition:function(e,t){var n=this[0],r=this.cy(),i=w(e)?e:void 0,a=void 0!==i||void 0!==t&&m(e),o=r.hasCompoundNodes();if(n&&n.isNode()){if(!a){var l=n.position(),u=o?n.parent():null,s=u&&u.length>0,c=s;s&&(u=u[0]);var f=c?u.position():{x:0,y:0};return i={x:l.x-f.x,y:l.y-f.y},void 0===e?i:i[e]}for(var d=0;d<this.length;d++){var h=this[d],p=o?h.parent():null,v=p&&p.length>0,g=v;v&&(p=p[0]);var y=g?p.position():{x:0,y:0};void 0!==t?h.position(e,t+y[e]):void 0!==i&&h.position({x:i.x+y.x,y:i.y+y.y})}}else if(!a)return;return this}}).modelPosition=Wr.point=Wr.position,Wr.modelPositions=Wr.points=Wr.positions,Wr.renderedPoint=Wr.renderedPosition,Wr.relativePoint=Wr.relativePosition;var Qr,Zr,Jr=Yr;Qr=Zr={},Zr.renderedBoundingBox=function(e){var t=this.boundingBox(e),n=this.cy(),r=n.zoom(),i=n.pan(),a=t.x1*r+i.x,o=t.x2*r+i.x,l=t.y1*r+i.y,u=t.y2*r+i.y;return{x1:a,x2:o,y1:l,y2:u,w:o-a,h:u-l}},Zr.dirtyCompoundBoundsCache=function(){var e=this.cy();return e.styleEnabled()&&e.hasCompoundNodes()?(this.forEachUp((function(e){if(e.isParent()){var t=e._private;t.compoundBoundsClean=!1,t.bbCache=null,e.emitAndNotify("bounds")}})),this):this},Zr.updateCompoundBounds=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.cy();if(!t.styleEnabled()||!t.hasCompoundNodes())return this;if(!e&&t.batching())return this;function n(e){if(e.isParent()){var t=e._private,n=e.children(),r="include"===e.pstyle("compound-sizing-wrt-labels").value,i={width:{val:e.pstyle("min-width").pfValue,left:e.pstyle("min-width-bias-left"),right:e.pstyle("min-width-bias-right")},height:{val:e.pstyle("min-height").pfValue,top:e.pstyle("min-height-bias-top"),bottom:e.pstyle("min-height-bias-bottom")}},a=n.filter((function(e){return"element"===e.pstyle("display").value})).boundingBox({includeLabels:r,includeOverlays:!1,useCache:!1}),o=t.position;0!==a.w&&0!==a.h||((a={w:e.pstyle("width").pfValue,h:e.pstyle("height").pfValue}).x1=o.x-a.w/2,a.x2=o.x+a.w/2,a.y1=o.y-a.h/2,a.y2=o.y+a.h/2);var l=i.width.left.value;"px"===i.width.left.units&&i.width.val>0&&(l=100*l/i.width.val);var u=i.width.right.value;"px"===i.width.right.units&&i.width.val>0&&(u=100*u/i.width.val);var s=i.height.top.value;"px"===i.height.top.units&&i.height.val>0&&(s=100*s/i.height.val);var c=i.height.bottom.value;"px"===i.height.bottom.units&&i.height.val>0&&(c=100*c/i.height.val);var f=y(i.width.val-a.w,l,u),d=f.biasDiff,h=f.biasComplementDiff,p=y(i.height.val-a.h,s,c),v=p.biasDiff,g=p.biasComplementDiff;t.autoPadding=function(e,t,n,r){if("%"!==n.units)return"px"===n.units?n.pfValue:0;switch(r){case"width":return e>0?n.pfValue*e:0;case"height":return t>0?n.pfValue*t:0;case"average":return e>0&&t>0?n.pfValue*(e+t)/2:0;case"min":return e>0&&t>0?e>t?n.pfValue*t:n.pfValue*e:0;case"max":return e>0&&t>0?e>t?n.pfValue*e:n.pfValue*t:0;default:return 0}}(a.w,a.h,e.pstyle("padding"),e.pstyle("padding-relative-to").value),t.autoWidth=Math.max(a.w,i.width.val),o.x=(-d+a.x1+a.x2+h)/2,t.autoHeight=Math.max(a.h,i.height.val),o.y=(-v+a.y1+a.y2+g)/2}function y(e,t,n){var r=0,i=0,a=t+n;return e>0&&a>0&&(r=t/a*e,i=n/a*e),{biasDiff:r,biasComplementDiff:i}}}for(var r=0;r<this.length;r++){var i=this[r],a=i._private;a.compoundBoundsClean||(n(i),t.batching()||(a.compoundBoundsClean=!0))}return this};var ei=function(e){return e===1/0||e===-1/0?0:e},ti=function(e,t,n,r,i){r-t!=0&&i-n!=0&&null!=t&&null!=n&&null!=r&&null!=i&&(e.x1=t<e.x1?t:e.x1,e.x2=r>e.x2?r:e.x2,e.y1=n<e.y1?n:e.y1,e.y2=i>e.y2?i:e.y2,e.w=e.x2-e.x1,e.h=e.y2-e.y1)},ni=function(e,t){return null==t?e:ti(e,t.x1,t.y1,t.x2,t.y2)},ri=function(e,t,n){return me(e,t,n)},ii=function(e,t,n){if(!t.cy().headless()){var r,i,a=t._private,o=a.rstyle,l=o.arrowWidth/2;if("none"!==t.pstyle(n+"-arrow-shape").value){"source"===n?(r=o.srcX,i=o.srcY):"target"===n?(r=o.tgtX,i=o.tgtY):(r=o.midX,i=o.midY);var u=a.arrowBounds=a.arrowBounds||{},s=u[n]=u[n]||{};s.x1=r-l,s.y1=i-l,s.x2=r+l,s.y2=i+l,s.w=s.x2-s.x1,s.h=s.y2-s.y1,st(s,1),ti(e,s.x1,s.y1,s.x2,s.y2)}}},ai=function(e,t,n){if(!t.cy().headless()){var r;r=n?n+"-":"";var i=t._private,a=i.rstyle;if(t.pstyle(r+"label").strValue){var o,l,u,s,c=t.pstyle("text-halign"),f=t.pstyle("text-valign"),d=ri(a,"labelWidth",n),h=ri(a,"labelHeight",n),p=ri(a,"labelX",n),v=ri(a,"labelY",n),g=t.pstyle(r+"text-margin-x").pfValue,y=t.pstyle(r+"text-margin-y").pfValue,m=t.isEdge(),b=t.pstyle(r+"text-rotation"),x=t.pstyle("text-outline-width").pfValue,w=t.pstyle("text-border-width").pfValue/2,E=t.pstyle("text-background-padding").pfValue,k=h,S=d,T=S/2,P=k/2;if(m)o=p-T,l=p+T,u=v-P,s=v+P;else{switch(c.value){case"left":o=p-S,l=p;break;case"center":o=p-T,l=p+T;break;case"right":o=p,l=p+S}switch(f.value){case"top":u=v-k,s=v;break;case"center":u=v-P,s=v+P;break;case"bottom":u=v,s=v+k}}o+=g-Math.max(x,w)-E,l+=g+Math.max(x,w)+E,u+=y-Math.max(x,w)-E,s+=y+Math.max(x,w)+E;var C=n||"main",_=i.labelBounds,M=_[C]=_[C]||{};M.x1=o,M.y1=u,M.x2=l,M.y2=s,M.w=l-o,M.h=s-u,st(M,1);var O=m&&"autorotate"===b.strValue,N=null!=b.pfValue&&0!==b.pfValue;if(O||N){var D=O?ri(i.rstyle,"labelAngle",n):b.pfValue,I=Math.cos(D),A=Math.sin(D),L=(o+l)/2,B=(u+s)/2;if(!m){switch(c.value){case"left":L=l;break;case"right":L=o}switch(f.value){case"top":B=s;break;case"bottom":B=u}}var z=function(e,t){return{x:(e-=L)*I-(t-=B)*A+L,y:e*A+t*I+B}},R=z(o,u),F=z(o,s),j=z(l,u),V=z(l,s);o=Math.min(R.x,F.x,j.x,V.x),l=Math.max(R.x,F.x,j.x,V.x),u=Math.min(R.y,F.y,j.y,V.y),s=Math.max(R.y,F.y,j.y,V.y)}ti(e,o,u,l,s),ti(i.labelBounds.all,o,u,l,s)}return e}},oi=function(e){var t=0,n=function(e){return(e?1:0)<<t++},r=0;return r+=n(e.incudeNodes),r+=n(e.includeEdges),r+=n(e.includeLabels),r+=n(e.includeOverlays)},li=function(e){if(e.isEdge()){var t=e.source().position(),n=e.target().position(),r=function(e){return Math.round(e)};return $([r(t.x),r(t.y),r(n.x),r(n.y)])}return 0},ui=function(e,t){var n,r=e._private,i=(null==t?ci:oi(t))===ci,a=li(e),o=r.bbCachePosKey===a,l=!(t.useCache&&o)||null==r.bbCache;if(l?(o||e.recalculateRenderedStyle(),n=function(e,t){var n,r,i,a,o,l,u=e._private.cy,s=u.styleEnabled(),c=u.headless(),f=it(),d=e._private,h=s?e.pstyle("display").value:"element",p=e.isNode(),v=e.isEdge(),g="none"!==h,y=d.rstyle,m=p&&s?e.pstyle("bounds-expansion").pfValue:0;if(g){var b=0;s&&t.includeOverlays&&0!==e.pstyle("overlay-opacity").value&&(b=e.pstyle("overlay-padding").value);var x=0;if(s&&(x=e.pstyle("width").pfValue/2),p&&t.includeNodes){var w=e.position();o=w.x,l=w.y;var E=e.outerWidth()/2,k=e.outerHeight()/2;ti(f,n=o-E,i=l-k,r=o+E,a=l+k)}else if(v&&t.includeEdges)if(s&&!c&&(n=Math.min(y.srcX,y.midX,y.tgtX),r=Math.max(y.srcX,y.midX,y.tgtX),i=Math.min(y.srcY,y.midY,y.tgtY),a=Math.max(y.srcY,y.midY,y.tgtY),ti(f,n-=x,i-=x,r+=x,a+=x)),s&&!c&&"haystack"===e.pstyle("curve-style").strValue){var S=y.haystackPts||[];if(n=S[0].x,i=S[0].y,n>(r=S[1].x)){var T=n;n=r,r=T}if(i>(a=S[1].y)){var P=i;i=a,a=P}ti(f,n-x,i-x,r+x,a+x)}else{for(var C=y.bezierPts||y.linePts||[],_=0;_<C.length;_++){var M=C[_];n=M.x-x,r=M.x+x,i=M.y-x,a=M.y+x,ti(f,n,i,r,a)}if(0===C.length){var O=e.source().position(),N=e.target().position();if((n=O.x)>(r=N.x)){var D=n;n=r,r=D}if((i=O.y)>(a=N.y)){var I=i;i=a,a=I}ti(f,n-=x,i-=x,r+=x,a+=x)}}if(s&&t.includeEdges&&v&&(ii(f,e,"mid-source"),ii(f,e,"mid-target"),ii(f,e,"source"),ii(f,e,"target")),s)if("yes"===e.pstyle("ghost").value){var A=e.pstyle("ghost-offset-x").pfValue,L=e.pstyle("ghost-offset-y").pfValue;ti(f,f.x1+A,f.y1+L,f.x2+A,f.y2+L)}var B=d.bodyBounds=d.bodyBounds||{};ct(B,f),st(B,m),st(B,1),s&&(n=f.x1,r=f.x2,i=f.y1,a=f.y2,ti(f,n-b,i-b,r+b,a+b));var z=d.overlayBounds=d.overlayBounds||{};ct(z,f),st(z,m),st(z,1);var R=d.labelBounds=d.labelBounds||{};null!=R.all?ot(R.all):R.all=it(),s&&t.includeLabels&&(ai(f,e,null),v&&(ai(f,e,"source"),ai(f,e,"target")))}return f.x1=ei(f.x1),f.y1=ei(f.y1),f.x2=ei(f.x2),f.y2=ei(f.y2),f.w=ei(f.x2-f.x1),f.h=ei(f.y2-f.y1),f.w>0&&f.h>0&&g&&(st(f,m),st(f,1)),f}(e,si),r.bbCache=n,r.bbCacheShift.x=r.bbCacheShift.y=0,r.bbCachePosKey=a):n=r.bbCache,!l&&(0!==r.bbCacheShift.x||0!==r.bbCacheShift.y)){var u=ft,s=r.bbCacheShift,c=function(e,t){null!=e&&u(e,t)};u(n,s);var f=r.bodyBounds,d=r.overlayBounds,h=r.labelBounds,p=r.arrowBounds;c(f,s),c(d,s),null!=p&&(c(p.source,s),c(p.target,s),c(p["mid-source"],s),c(p["mid-target"],s)),null!=h&&(c(h.main,s),c(h.all,s),c(h.source,s),c(h.target,s))}if(r.bbCacheShift.x=r.bbCacheShift.y=0,!i){var v=e.isNode();n=it(),(t.includeNodes&&v||t.includeEdges&&!v)&&(t.includeOverlays?ni(n,r.overlayBounds):ni(n,r.bodyBounds)),t.includeLabels&&ni(n,r.labelBounds.all),n.w=n.x2-n.x1,n.h=n.y2-n.y1}return n},si={includeNodes:!0,includeEdges:!0,includeLabels:!0,includeOverlays:!0,useCache:!0},ci=oi(si),fi=ve(si);Zr.boundingBox=function(e){if(1===this.length&&null!=this[0]._private.bbCache&&(void 0===e||void 0===e.useCache||!0===e.useCache))return e=void 0===e?si:fi(e),ui(this[0],e);var t=it(),n=fi(e=e||si);if(this.cy().styleEnabled())for(var r=0;r<this.length;r++){var i=this[r],a=i._private,o=li(i),l=a.bbCachePosKey===o,u=n.useCache&&l;i.recalculateRenderedStyle(u)}this.updateCompoundBounds();for(var s=0;s<this.length;s++){var c=this[s];ni(t,ui(c,n))}return t.x1=ei(t.x1),t.y1=ei(t.y1),t.x2=ei(t.x2),t.y2=ei(t.y2),t.w=ei(t.x2-t.x1),t.h=ei(t.y2-t.y1),t},Zr.dirtyBoundingBoxCache=function(){for(var e=0;e<this.length;e++){var t=this[e]._private;t.bbCache=null,t.bbCacheShift.x=t.bbCacheShift.y=0,t.bbCachePosKey=null}return this.emitAndNotify("bounds"),this},Zr.shiftCachedBoundingBox=function(e){for(var t=0;t<this.length;t++){var n=this[t]._private;null!=n.bbCache&&(n.bbCacheShift.x+=e.x,n.bbCacheShift.y+=e.y)}return this.emitAndNotify("bounds"),this},Zr.boundingBoxAt=function(e){var t=this.nodes(),n=this.cy(),r=n.hasCompoundNodes();if(r&&(t=t.filter((function(e){return!e.isParent()}))),w(e)){var i=e;e=function(){return i}}n.startBatch(),t.forEach((function(t,n){return t._private.bbAtOldPos=e(t,n)})).silentPositions(e),r&&this.updateCompoundBounds(!0);var a=at(this.boundingBox({useCache:!1}));return t.silentPositions((function(e){return e._private.bbAtOldPos})),n.endBatch(),a},Qr.boundingbox=Qr.bb=Qr.boundingBox,Qr.renderedBoundingbox=Qr.renderedBoundingBox;var di,hi,pi=Zr;di=hi={};var vi=function(e){e.uppercaseName=L(e.name),e.autoName="auto"+e.uppercaseName,e.labelName="label"+e.uppercaseName,e.outerName="outer"+e.uppercaseName,e.uppercaseOuterName=L(e.outerName),di[e.name]=function(){var t=this[0],n=t._private,r=n.cy._private.styleEnabled;if(t){if(!r)return 1;if(t.isParent())return t.updateCompoundBounds(),n[e.autoName]||0;var i=t.pstyle(e.name);switch(i.strValue){case"label":return t.recalculateRenderedStyle(),n.rstyle[e.labelName]||0;default:return i.pfValue}}},di["outer"+e.uppercaseName]=function(){var t=this[0],n=t._private.cy._private.styleEnabled;if(t)return n?t[e.name]()+t.pstyle("border-width").pfValue+2*t.padding():1},di["rendered"+e.uppercaseName]=function(){var t=this[0];if(t)return t[e.name]()*this.cy().zoom()},di["rendered"+e.uppercaseOuterName]=function(){var t=this[0];if(t)return t[e.outerName]()*this.cy().zoom()}};vi({name:"width"}),vi({name:"height"}),hi.padding=function(){var e=this[0],t=e._private;return e.isParent()?(e.updateCompoundBounds(),void 0!==t.autoPadding?t.autoPadding:e.pstyle("padding").pfValue):e.pstyle("padding").pfValue};var gi=hi,yi={controlPoints:{get:function(e){return e.renderer().getControlPoints(e)},mult:!0},segmentPoints:{get:function(e){return e.renderer().getSegmentPoints(e)},mult:!0},sourceEndpoint:{get:function(e){return e.renderer().getSourceEndpoint(e)}},targetEndpoint:{get:function(e){return e.renderer().getTargetEndpoint(e)}},midpoint:{get:function(e){return e.renderer().getEdgeMidpoint(e)}}},mi=Object.keys(yi).reduce((function(e,t){var n=yi[t],r=function(e){return"rendered"+e[0].toUpperCase()+e.substr(1)}(t);return e[t]=function(){return function(e,t){if(e.isEdge())return t(e)}(this,n.get)},n.mult?e[r]=function(){return function(e,t){if(e.isEdge()){var n=e.cy(),r=n.pan(),i=n.zoom();return t(e).map((function(e){return je(e,i,r)}))}}(this,n.get)}:e[r]=function(){return function(e,t){if(e.isEdge()){var n=e.cy();return je(t(e),n.zoom(),n.pan())}}(this,n.get)},e}),{}),bi=R({},Jr,pi,gi,mi),xi=function(e,t){this.recycle(e,t)};function wi(){return!1}function Ei(){return!0}xi.prototype={instanceString:function(){return"event"},recycle:function(e,t){if(this.isImmediatePropagationStopped=this.isPropagationStopped=this.isDefaultPrevented=wi,null!=e&&e.preventDefault?(this.type=e.type,this.isDefaultPrevented=e.defaultPrevented?Ei:wi):null!=e&&e.type?t=e:this.type=e,null!=t&&(this.originalEvent=t.originalEvent,this.type=null!=t.type?t.type:this.type,this.cy=t.cy,this.target=t.target,this.position=t.position,this.renderedPosition=t.renderedPosition,this.namespace=t.namespace,this.layout=t.layout),null!=this.cy&&null!=this.position&&null==this.renderedPosition){var n=this.position,r=this.cy.zoom(),i=this.cy.pan();this.renderedPosition={x:n.x*r+i.x,y:n.y*r+i.y}}this.timeStamp=e&&e.timeStamp||Date.now()},preventDefault:function(){this.isDefaultPrevented=Ei;var e=this.originalEvent;e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){this.isPropagationStopped=Ei;var e=this.originalEvent;e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=Ei,this.stopPropagation()},isDefaultPrevented:wi,isPropagationStopped:wi,isImmediatePropagationStopped:wi};var ki=/^([^.]+)(\.(?:[^.]+))?$/,Si={qualifierCompare:function(e,t){return e===t},eventMatches:function(){return!0},addEventFields:function(){},callbackContext:function(e){return e},beforeEmit:function(){},afterEmit:function(){},bubble:function(){return!1},parent:function(){return null},context:null},Ti=Object.keys(Si),Pi={};function Ci(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pi,t=arguments.length>1?arguments[1]:void 0,n=0;n<Ti.length;n++){var r=Ti[n];this[r]=e[r]||Si[r]}this.context=t||this.context,this.listeners=[],this.emitting=0}var _i=Ci.prototype,Mi=function(e,t,n,r,i,a,o){b(r)&&(i=r,r=null),o&&(a=null==a?o:R({},a,o));for(var l=x(n)?n:n.split(/\s+/),u=0;u<l.length;u++){var s=l[u];if(!M(s)){var c=s.match(ki);if(c)if(!1===t(e,s,c[1],c[2]?c[2]:null,r,i,a))break}}},Oi=function(e,t){return e.addEventFields(e.context,t),new xi(t.type,t)},Ni=function(e,t,n){if("event"!==y(n))if(w(n))t(e,Oi(e,n));else for(var r=x(n)?n:n.split(/\s+/),i=0;i<r.length;i++){var a=r[i];if(!M(a)){var o=a.match(ki);if(o){var l=o[1],u=o[2]?o[2]:null;t(e,Oi(e,{type:l,namespace:u,target:e.context}))}}}else t(e,n)};_i.on=_i.addListener=function(e,t,n,r,i){return Mi(this,(function(e,t,n,r,i,a,o){b(a)&&e.listeners.push({event:t,callback:a,type:n,namespace:r,qualifier:i,conf:o})}),e,t,n,r,i),this},_i.one=function(e,t,n,r){return this.on(e,t,n,r,{one:!0})},_i.removeListener=_i.off=function(e,t,n,r){var i=this;0!==this.emitting&&(this.listeners=this.listeners.slice());for(var a=this.listeners,o=function(o){var l=a[o];Mi(i,(function(t,n,r,i,u,s){if((l.type===r||"*"===e)&&(!i&&".*"!==l.namespace||l.namespace===i)&&(!u||t.qualifierCompare(l.qualifier,u))&&(!s||l.callback===s))return a.splice(o,1),!1}),e,t,n,r)},l=a.length-1;l>=0;l--)o(l);return this},_i.removeAllListeners=function(){return this.removeListener("*")},_i.emit=_i.trigger=function(e,t,n){var r=this.listeners,i=r.length;return this.emitting++,x(t)||(t=[t]),Ni(this,(function(e,a){null!=n&&(r=[{event:a.event,type:a.type,namespace:a.namespace,callback:n}],i=r.length);for(var o=function(n){var i=r[n];if(i.type===a.type&&(!i.namespace||i.namespace===a.namespace||".*"===i.namespace)&&e.eventMatches(e.context,i,a)){var o=[a];null!=t&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.push(r)}}(o,t),e.beforeEmit(e.context,i,a),i.conf&&i.conf.one&&(e.listeners=e.listeners.filter((function(e){return e!==i})));var l=e.callbackContext(e.context,i,a),u=i.callback.apply(l,o);e.afterEmit(e.context,i,a),!1===u&&(a.stopPropagation(),a.preventDefault())}},l=0;l<i;l++)o(l);e.bubble(e.context)&&!a.isPropagationStopped()&&e.parent(e.context).emit(a,t)}),e),this.emitting--,this};var Di={qualifierCompare:function(e,t){return null==e||null==t?null==e&&null==t:e.sameText(t)},eventMatches:function(e,t,n){var r=t.qualifier;return null==r||e!==n.target&&T(n.target)&&r.matches(n.target)},addEventFields:function(e,t){t.cy=e.cy(),t.target=e},callbackContext:function(e,t,n){return null!=t.qualifier?n.target:e},beforeEmit:function(e,t){t.conf&&t.conf.once&&t.conf.onceCollection.removeListener(t.event,t.qualifier,t.callback)},bubble:function(){return!0},parent:function(e){return e.isChild()?e.parent():e.cy()}},Ii=function(e){return m(e)?new Dr(e):e},Ai={createEmitter:function(){for(var e=0;e<this.length;e++){var t=this[e],n=t._private;n.emitter||(n.emitter=new Ci(Di,t))}return this},emitter:function(){return this._private.emitter},on:function(e,t,n){for(var r=Ii(t),i=0;i<this.length;i++){this[i].emitter().on(e,r,n)}return this},removeListener:function(e,t,n){for(var r=Ii(t),i=0;i<this.length;i++){this[i].emitter().removeListener(e,r,n)}return this},removeAllListeners:function(){for(var e=0;e<this.length;e++){this[e].emitter().removeAllListeners()}return this},one:function(e,t,n){for(var r=Ii(t),i=0;i<this.length;i++){this[i].emitter().one(e,r,n)}return this},once:function(e,t,n){for(var r=Ii(t),i=0;i<this.length;i++){this[i].emitter().on(e,r,n,{once:!0,onceCollection:this})}},emit:function(e,t){for(var n=0;n<this.length;n++){this[n].emitter().emit(e,t)}return this},emitAndNotify:function(e,t){if(0!==this.length)return this.cy().notify(e,this),this.emit(e,t),this}};Kn.eventAliasesOn(Ai);var Li={nodes:function(e){return this.filter((function(e){return e.isNode()})).filter(e)},edges:function(e){return this.filter((function(e){return e.isEdge()})).filter(e)},byGroup:function(){for(var e=this.spawn(),t=this.spawn(),n=0;n<this.length;n++){var r=this[n];r.isNode()?e.merge(r):t.merge(r)}return{nodes:e,edges:t}},filter:function(e,t){if(void 0===e)return this;if(m(e)||S(e))return new Dr(e).filter(this);if(b(e)){for(var n=this.spawn(),r=0;r<this.length;r++){var i=this[r];(t?e.apply(t,[i,r,this]):e(i,r,this))&&n.merge(i)}return n}return this.spawn()},not:function(e){if(e){m(e)&&(e=this.filter(e));for(var t=[],n=e._private.map,r=0;r<this.length;r++){var i=this[r];n.has(i.id())||t.push(i)}return this.spawn(t)}return this},absoluteComplement:function(){return this.cy().mutableElements().not(this)},intersect:function(e){if(m(e)){var t=e;return this.filter(t)}for(var n=[],r=e,i=this.length<e.length,a=i?r._private.map:this._private.map,o=i?this:r,l=0;l<o.length;l++){var u=o[l]._private.data.id,s=a.get(u);s&&n.push(s.ele)}return this.spawn(n)},xor:function(e){var t=this._private.cy;m(e)&&(e=t.$(e));var n=[],r=e,i=function(e,t){for(var r=0;r<e.length;r++){var i=e[r],a=i._private.data.id;t.hasElementWithId(a)||n.push(i)}};return i(this,r),i(r,this),this.spawn(n)},diff:function(e){var t=this._private.cy;m(e)&&(e=t.$(e));var n=[],r=[],i=[],a=e,o=function(e,t,n){for(var r=0;r<e.length;r++){var a=e[r],o=a._private.data.id;t.hasElementWithId(o)?i.push(a):n.push(a)}};return o(this,a,n),o(a,this,r),{left:this.spawn(n,{unique:!0}),right:this.spawn(r,{unique:!0}),both:this.spawn(i,{unique:!0})}},add:function(e){var t=this._private.cy;if(!e)return this;if(m(e)){var n=e;e=t.mutableElements().filter(n)}for(var r=[],i=0;i<this.length;i++)r.push(this[i]);for(var a=this._private.map,o=0;o<e.length;o++){var l=!a.has(e[o].id());l&&r.push(e[o])}return this.spawn(r)},merge:function(e){var t=this._private,n=t.cy;if(!e)return this;if(e&&m(e)){var r=e;e=n.mutableElements().filter(r)}for(var i=t.map,a=0;a<e.length;a++){var o=e[a],l=o._private.data.id;if(!i.has(l)){var u=this.length++;this[u]=o,i.set(l,{ele:o,index:u})}else{var s=i.get(l).index;this[s]=o,i.set(l,{ele:o,index:s})}}return this},unmergeAt:function(e){var t=this[e].id(),n=this._private.map;this[e]=void 0,n.delete(t);var r=e===this.length-1;if(this.length>1&&!r){var i=this.length-1,a=this[i],o=a._private.data.id;this[i]=void 0,this[e]=a,n.set(o,{ele:a,index:e})}return this.length--,this},unmergeOne:function(e){e=e[0];var t=this._private,n=e._private.data.id,r=t.map.get(n);if(!r)return this;var i=r.index;return this.unmergeAt(i),this},unmerge:function(e){var t=this._private.cy;if(!e)return this;if(e&&m(e)){var n=e;e=t.mutableElements().filter(n)}for(var r=0;r<e.length;r++)this.unmergeOne(e[r]);return this},unmergeBy:function(e){for(var t=this.length-1;t>=0;t--){e(this[t])&&this.unmergeAt(t)}return this},map:function(e,t){for(var n=[],r=0;r<this.length;r++){var i=this[r],a=t?e.apply(t,[i,r,this]):e(i,r,this);n.push(a)}return n},reduce:function(e,t){for(var n=t,r=0;r<this.length;r++)n=e(n,this[r],r,this);return n},max:function(e,t){for(var n,r=-1/0,i=0;i<this.length;i++){var a=this[i],o=t?e.apply(t,[a,i,this]):e(a,i,this);o>r&&(r=o,n=a)}return{value:r,ele:n}},min:function(e,t){for(var n,r=1/0,i=0;i<this.length;i++){var a=this[i],o=t?e.apply(t,[a,i,this]):e(a,i,this);o<r&&(r=o,n=a)}return{value:r,ele:n}}},Bi=Li;Bi.u=Bi["|"]=Bi["+"]=Bi.union=Bi.or=Bi.add,Bi["\\"]=Bi["!"]=Bi["-"]=Bi.difference=Bi.relativeComplement=Bi.subtract=Bi.not,Bi.n=Bi["&"]=Bi["."]=Bi.and=Bi.intersection=Bi.intersect,Bi["^"]=Bi["(+)"]=Bi["(-)"]=Bi.symmetricDifference=Bi.symdiff=Bi.xor,Bi.fnFilter=Bi.filterFn=Bi.stdFilter=Bi.filter,Bi.complement=Bi.abscomp=Bi.absoluteComplement;var zi=function(e,t){var n=e.cy().hasCompoundNodes();function r(e){var t=e.pstyle("z-compound-depth");return"auto"===t.value?n?e.zDepth():0:"bottom"===t.value?-1:"top"===t.value?re:0}var i=r(e)-r(t);if(0!==i)return i;function a(e){return"auto"===e.pstyle("z-index-compare").value&&e.isNode()?1:0}var o=a(e)-a(t);if(0!==o)return o;var l=e.pstyle("z-index").value-t.pstyle("z-index").value;return 0!==l?l:e.poolIndex()-t.poolIndex()},Ri={forEach:function(e,t){if(b(e))for(var n=this.length,r=0;r<n;r++){var i=this[r];if(!1===(t?e.apply(t,[i,r,this]):e(i,r,this)))break}return this},toArray:function(){for(var e=[],t=0;t<this.length;t++)e.push(this[t]);return e},slice:function(e,t){var n=[],r=this.length;null==t&&(t=r),null==e&&(e=0),e<0&&(e=r+e),t<0&&(t=r+t);for(var i=e;i>=0&&i<t&&i<r;i++)n.push(this[i]);return this.spawn(n)},size:function(){return this.length},eq:function(e){return this[e]||this.spawn()},first:function(){return this[0]||this.spawn()},last:function(){return this[this.length-1]||this.spawn()},empty:function(){return 0===this.length},nonempty:function(){return!this.empty()},sort:function(e){if(!b(e))return this;var t=this.toArray().sort(e);return this.spawn(t)},sortByZIndex:function(){return this.sort(zi)},zDepth:function(){var e=this[0];if(e){var t=e._private;if("nodes"===t.group){var n=t.data.parent?e.parents().size():0;return e.isParent()?n:re-1}var r=t.source,i=t.target,a=r.zDepth(),o=i.zDepth();return Math.max(a,o,0)}}};Ri.each=Ri.forEach;var Fi=ve({nodeDimensionsIncludeLabels:!1}),ji={layoutDimensions:function(e){if((e=Fi(e)).nodeDimensionsIncludeLabels){var t=this.boundingBox();return{w:t.w,h:t.h}}return{w:this.outerWidth(),h:this.outerHeight()}},layoutPositions:function(e,t,n){var r=this.nodes(),i=this.cy(),a=t.eles,o=function(e){return e.id()},l=N(n,o);e.emit({type:"layoutstart",layout:e}),e.animations=[];var u=t.spacingFactor&&1!==t.spacingFactor,s=function(){if(!u)return null;for(var e=it(),t=0;t<r.length;t++){var n=r[t],i=l(n,t);ut(e,i.x,i.y)}return e}(),c=N((function(e,n){var r=l(e,n);u&&(r=function(e,t,n){var r=t.x1+t.w/2,i=t.y1+t.h/2;return{x:r+(n.x-r)*e,y:i+(n.y-i)*e}}(Math.abs(t.spacingFactor),s,r));return null!=t.transform&&(r=t.transform(e,r)),r}),o);if(t.animate){for(var f=0;f<r.length;f++){var d=r[f],h=c(d,f);if(null==t.animateFilter||t.animateFilter(d,f)){var p=d.animation({position:h,duration:t.animationDuration,easing:t.animationEasing});e.animations.push(p)}else d.position(h)}if(t.fit){var v=i.animation({fit:{boundingBox:a.boundingBoxAt(c),padding:t.padding},duration:t.animationDuration,easing:t.animationEasing});e.animations.push(v)}else if(void 0!==t.zoom&&void 0!==t.pan){var g=i.animation({zoom:t.zoom,pan:t.pan,duration:t.animationDuration,easing:t.animationEasing});e.animations.push(g)}e.animations.forEach((function(e){return e.play()})),e.one("layoutready",t.ready),e.emit({type:"layoutready",layout:e}),Xn.all(e.animations.map((function(e){return e.promise()}))).then((function(){e.one("layoutstop",t.stop),e.emit({type:"layoutstop",layout:e})}))}else r.positions(c),t.fit&&i.fit(t.eles,t.padding),null!=t.zoom&&i.zoom(t.zoom),t.pan&&i.pan(t.pan),e.one("layoutready",t.ready),e.emit({type:"layoutready",layout:e}),e.one("layoutstop",t.stop),e.emit({type:"layoutstop",layout:e});return this},layout:function(e){return this.cy().makeLayout(R({},e,{eles:this}))}};function Vi(e,t,n){var r,i=n._private,a=i.styleCache=i.styleCache||[];return null!=(r=a[e])?r:r=a[e]=t(n)}function qi(e,t){return e=Q(e),function(n){return Vi(e,t,n)}}function Wi(e,t){e=Q(e);var n=function(e){return t.call(e)};return function(){var t=this[0];if(t)return Vi(e,n,t)}}ji.createLayout=ji.makeLayout=ji.layout;var Yi={recalculateRenderedStyle:function(e){var t=this.cy(),n=t.renderer(),r=t.styleEnabled();return n&&r&&n.recalculateRenderedStyle(this,e),this},dirtyStyleCache:function(){var e,t=this.cy(),n=function(e){return e._private.styleCache=null};t.hasCompoundNodes()?((e=this.spawnSelf().merge(this.descendants()).merge(this.parents())).merge(e.connectedEdges()),e.forEach(n)):this.forEach((function(e){n(e),e.connectedEdges().forEach(n)}));return this},updateStyle:function(e){var t=this._private.cy;if(!t.styleEnabled())return this;if(t.batching())return t._private.batchStyleEles.merge(this),this;var n=t.hasCompoundNodes(),r=t.style(),i=this;e=!(!e&&void 0!==e),n&&(i=this.spawnSelf().merge(this.descendants()).merge(this.parents()));var a=r.apply(i);return e?a.emitAndNotify("style"):a.emit("style"),this},parsedStyle:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this[0],r=n.cy();if(r.styleEnabled()&&n){var i=n._private.style[e];return null!=i?i:t?r.style().getDefaultProperty(e):null}},numericStyle:function(e){var t=this[0];if(t.cy().styleEnabled()&&t){var n=t.pstyle(e);return void 0!==n.pfValue?n.pfValue:n.value}},numericStyleUnits:function(e){var t=this[0];if(t.cy().styleEnabled())return t?t.pstyle(e).units:void 0},renderedStyle:function(e){var t=this.cy();if(!t.styleEnabled())return this;var n=this[0];return n?t.style().getRenderedStyle(n,e):void 0},style:function(e,t){var n=this.cy();if(!n.styleEnabled())return this;var r=n.style();if(w(e)){var i=e;r.applyBypass(this,i,!1),this.emitAndNotify("style")}else if(m(e)){if(void 0===t){var a=this[0];return a?r.getStylePropertyValue(a,e):void 0}r.applyBypass(this,e,t,!1),this.emitAndNotify("style")}else if(void 0===e){var o=this[0];return o?r.getRawStyle(o):void 0}return this},removeStyle:function(e){var t=this.cy();if(!t.styleEnabled())return this;var n=t.style();if(void 0===e)for(var r=0;r<this.length;r++){var i=this[r];n.removeAllBypasses(i,!1)}else{e=e.split(/\s+/);for(var a=0;a<this.length;a++){var o=this[a];n.removeBypasses(o,e,!1)}}return this.emitAndNotify("style"),this},show:function(){return this.css("display","element"),this},hide:function(){return this.css("display","none"),this},effectiveOpacity:function(){var e=this.cy();if(!e.styleEnabled())return 1;var t=e.hasCompoundNodes(),n=this[0];if(n){var r=n._private,i=n.pstyle("opacity").value;if(!t)return i;var a=r.data.parent?n.parents():null;if(a)for(var o=0;o<a.length;o++){i*=a[o].pstyle("opacity").value}return i}},transparent:function(){if(!this.cy().styleEnabled())return!1;var e=this[0],t=e.cy().hasCompoundNodes();return e?t?0===e.effectiveOpacity():0===e.pstyle("opacity").value:void 0},backgrounding:function(){return!!this.cy().styleEnabled()&&!!this[0]._private.backgrounding}};function Ui(e,t){var n=e._private.data.parent?e.parents():null;if(n)for(var r=0;r<n.length;r++){if(!t(n[r]))return!1}return!0}function Xi(e){var t=e.ok,n=e.edgeOkViaNode||e.ok,r=e.parentOk||e.ok;return function(){var e=this.cy();if(!e.styleEnabled())return!0;var i=this[0],a=e.hasCompoundNodes();if(i){var o=i._private;if(!t(i))return!1;if(i.isNode())return!a||Ui(i,r);var l=o.source,u=o.target;return n(l)&&(!a||Ui(l,n))&&(l===u||n(u)&&(!a||Ui(u,n)))}}}var Hi=qi("eleTakesUpSpace",(function(e){return"element"===e.pstyle("display").value&&0!==e.width()&&(!e.isNode()||0!==e.height())}));Yi.takesUpSpace=Wi("takesUpSpace",Xi({ok:Hi}));var Gi=qi("eleInteractive",(function(e){return"yes"===e.pstyle("events").value&&"visible"===e.pstyle("visibility").value&&Hi(e)})),Ki=qi("parentInteractive",(function(e){return"visible"===e.pstyle("visibility").value&&Hi(e)}));Yi.interactive=Wi("interactive",Xi({ok:Gi,parentOk:Ki,edgeOkViaNode:Hi})),Yi.noninteractive=function(){var e=this[0];if(e)return!e.interactive()};var $i=qi("eleVisible",(function(e){return"visible"===e.pstyle("visibility").value&&0!==e.pstyle("opacity").pfValue&&Hi(e)})),Qi=Hi;Yi.visible=Wi("visible",Xi({ok:$i,edgeOkViaNode:Qi})),Yi.hidden=function(){var e=this[0];if(e)return!e.visible()},Yi.isBundledBezier=Wi("isBundledBezier",(function(){return!!this.cy().styleEnabled()&&(!this.removed()&&"bezier"===this.pstyle("curve-style").value&&this.takesUpSpace())})),Yi.bypass=Yi.css=Yi.style,Yi.renderedCss=Yi.renderedStyle,Yi.removeBypass=Yi.removeCss=Yi.removeStyle,Yi.pstyle=Yi.parsedStyle;var Zi={};function Ji(e){return function(){var t=arguments,n=[];if(2===t.length){var r=t[0],i=t[1];this.on(e.event,r,i)}else if(1===t.length&&b(t[0])){var a=t[0];this.on(e.event,a)}else if(0===t.length||1===t.length&&x(t[0])){for(var o=1===t.length?t[0]:null,l=0;l<this.length;l++){var u=this[l],s=!e.ableField||u._private[e.ableField],c=u._private[e.field]!=e.value;if(e.overrideAble){var f=e.overrideAble(u);if(void 0!==f&&(s=f,!f))return this}s&&(u._private[e.field]=e.value,c&&n.push(u))}var d=this.spawn(n);d.updateStyle(),d.emit(e.event),o&&d.emit(o)}return this}}function ea(e){Zi[e.field]=function(){var t=this[0];if(t){if(e.overrideField){var n=e.overrideField(t);if(void 0!==n)return n}return t._private[e.field]}},Zi[e.on]=Ji({event:e.on,field:e.field,ableField:e.ableField,overrideAble:e.overrideAble,value:!0}),Zi[e.off]=Ji({event:e.off,field:e.field,ableField:e.ableField,overrideAble:e.overrideAble,value:!1})}ea({field:"locked",overrideField:function(e){return!!e.cy().autolock()||void 0},on:"lock",off:"unlock"}),ea({field:"grabbable",overrideField:function(e){return!e.cy().autoungrabify()&&!e.pannable()&&void 0},on:"grabify",off:"ungrabify"}),ea({field:"selected",ableField:"selectable",overrideAble:function(e){return!e.cy().autounselectify()&&void 0},on:"select",off:"unselect"}),ea({field:"selectable",overrideField:function(e){return!e.cy().autounselectify()&&void 0},on:"selectify",off:"unselectify"}),Zi.deselect=Zi.unselect,Zi.grabbed=function(){var e=this[0];if(e)return e._private.grabbed},ea({field:"active",on:"activate",off:"unactivate"}),ea({field:"pannable",on:"panify",off:"unpanify"}),Zi.inactive=function(){var e=this[0];if(e)return!e._private.active};var ta={},na=function(e){return function(t){for(var n=[],r=0;r<this.length;r++){var i=this[r];if(i.isNode()){for(var a=!1,o=i.connectedEdges(),l=0;l<o.length;l++){var u=o[l],s=u.source(),c=u.target();if(e.noIncomingEdges&&c===i&&s!==i||e.noOutgoingEdges&&s===i&&c!==i){a=!0;break}}a||n.push(i)}}return this.spawn(n,{unique:!0}).filter(t)}},ra=function(e){return function(t){for(var n=[],r=0;r<this.length;r++){var i=this[r];if(i.isNode())for(var a=i.connectedEdges(),o=0;o<a.length;o++){var l=a[o],u=l.source(),s=l.target();e.outgoing&&u===i?(n.push(l),n.push(s)):e.incoming&&s===i&&(n.push(l),n.push(u))}}return this.spawn(n,{unique:!0}).filter(t)}},ia=function(e){return function(t){for(var n=this,r=[],i={};;){var a=e.outgoing?n.outgoers():n.incomers();if(0===a.length)break;for(var o=!1,l=0;l<a.length;l++){var u=a[l],s=u.id();i[s]||(i[s]=!0,r.push(u),o=!0)}if(!o)break;n=a}return this.spawn(r,{unique:!0}).filter(t)}};function aa(e){return function(t){for(var n=[],r=0;r<this.length;r++){var i=this[r]._private[e.attr];i&&n.push(i)}return this.spawn(n,{unique:!0}).filter(t)}}function oa(e){return function(t){var n=[],r=this._private.cy,i=e||{};m(t)&&(t=r.$(t));for(var a=0;a<t.length;a++)for(var o=t[a]._private.edges,l=0;l<o.length;l++){var u=o[l],s=u._private.data,c=this.hasElementWithId(s.source)&&t.hasElementWithId(s.target),f=t.hasElementWithId(s.source)&&this.hasElementWithId(s.target);if(c||f){if(i.thisIsSrc||i.thisIsTgt){if(i.thisIsSrc&&!c)continue;if(i.thisIsTgt&&!f)continue}n.push(u)}}return this.spawn(n,{unique:!0})}}function la(e){return e=R({},{codirected:!1},e),function(t){for(var n=[],r=this.edges(),i=e,a=0;a<r.length;a++)for(var o=r[a]._private,l=o.source,u=l._private.data.id,s=o.data.target,c=l._private.edges,f=0;f<c.length;f++){var d=c[f],h=d._private.data,p=h.target,v=h.source,g=p===s&&v===u,y=u===p&&s===v;(i.codirected&&g||!i.codirected&&(g||y))&&n.push(d)}return this.spawn(n,{unique:!0}).filter(t)}}ta.clearTraversalCache=function(){for(var e=0;e<this.length;e++)this[e]._private.traversalCache=null},R(ta,{roots:na({noIncomingEdges:!0}),leaves:na({noOutgoingEdges:!0}),outgoers:zr(ra({outgoing:!0}),"outgoers"),successors:ia({outgoing:!0}),incomers:zr(ra({incoming:!0}),"incomers"),predecessors:ia({incoming:!0})}),R(ta,{neighborhood:zr((function(e){for(var t=[],n=this.nodes(),r=0;r<n.length;r++)for(var i=n[r],a=i.connectedEdges(),o=0;o<a.length;o++){var l=a[o],u=l.source(),s=l.target(),c=i===u?s:u;c.length>0&&t.push(c[0]),t.push(l[0])}return this.spawn(t,{unique:!0}).filter(e)}),"neighborhood"),closedNeighborhood:function(e){return this.neighborhood().add(this).filter(e)},openNeighborhood:function(e){return this.neighborhood(e)}}),ta.neighbourhood=ta.neighborhood,ta.closedNeighbourhood=ta.closedNeighborhood,ta.openNeighbourhood=ta.openNeighborhood,R(ta,{source:zr((function(e){var t,n=this[0];return n&&(t=n._private.source||n.cy().collection()),t&&e?t.filter(e):t}),"source"),target:zr((function(e){var t,n=this[0];return n&&(t=n._private.target||n.cy().collection()),t&&e?t.filter(e):t}),"target"),sources:aa({attr:"source"}),targets:aa({attr:"target"})}),R(ta,{edgesWith:zr(oa(),"edgesWith"),edgesTo:zr(oa({thisIsSrc:!0}),"edgesTo")}),R(ta,{connectedEdges:zr((function(e){for(var t=[],n=0;n<this.length;n++){var r=this[n];if(r.isNode())for(var i=r._private.edges,a=0;a<i.length;a++){var o=i[a];t.push(o)}}return this.spawn(t,{unique:!0}).filter(e)}),"connectedEdges"),connectedNodes:zr((function(e){for(var t=[],n=0;n<this.length;n++){var r=this[n];r.isEdge()&&(t.push(r.source()[0]),t.push(r.target()[0]))}return this.spawn(t,{unique:!0}).filter(e)}),"connectedNodes"),parallelEdges:zr(la(),"parallelEdges"),codirectedEdges:zr(la({codirected:!0}),"codirectedEdges")}),R(ta,{components:function(e){var t=this,n=t.cy(),r=n.collection(),i=null==e?t.nodes():e.nodes(),a=[];null!=e&&i.empty()&&(i=e.sources());var o=function(e,t){r.merge(e),i.unmerge(e),t.merge(e)};if(i.empty())return t.spawn();var l=function(){var e=n.collection();a.push(e);var r=i[0];o(r,e),t.bfs({directed:!1,roots:r,visit:function(t){return o(t,e)}}),e.forEach((function(t){t.connectedEdges().forEach((function(t){e.has(t.source())&&e.has(t.target())&&e.merge(t)}))}))};do{l()}while(i.length>0);return a},component:function(){var e=this[0];return e.cy().mutableElements().components(e)[0]}}),ta.componentsOf=ta.components;var ua=function(e,t,n){for(var r=null!=n?n:de();e.hasElementWithId(r);)r=de();return r},sa=function(e,t,n){if(void 0!==e&&C(e)){var r=new xe,i=!1;if(t){if(t.length>0&&w(t[0])&&!T(t[0])){i=!0;for(var a=[],o=new Ee,l=0,u=t.length;l<u;l++){var s=t[l];null==s.data&&(s.data={});var c=s.data;if(null==c.id)c.id=ua(e,s);else if(e.hasElementWithId(c.id)||o.has(c.id))continue;var f=new ke(e,s,!1);a.push(f),o.add(c.id)}t=a}}else t=[];this.length=0;for(var d=0,h=t.length;d<h;d++){var p=t[d][0];if(null!=p){var v=p._private.data.id;(null==n||n.unique&&!r.has(v))&&(r.set(v,{index:this.length,ele:p}),this[this.length]=p,this.length++)}}this._private={cy:e,map:r},i&&this.restore()}else ue("A collection must have a reference to the core")},ca=ke.prototype=sa.prototype;ca.instanceString=function(){return"collection"},ca.spawn=function(e,t,n){return C(e)||(n=t,t=e,e=this.cy()),new sa(e,t,n)},ca.spawnSelf=function(){return this.spawn(this)},ca.cy=function(){return this._private.cy},ca.renderer=function(){return this._private.cy.renderer()},ca.element=function(){return this[0]},ca.collection=function(){return P(this)?this:new sa(this._private.cy,[this])},ca.unique=function(){return new sa(this._private.cy,this,{unique:!0})},ca.hasElementWithId=function(e){return e=""+e,this._private.map.has(e)},ca.getElementById=function(e){e=""+e;var t=this._private.cy,n=this._private.map.get(e);return n?n.ele:new sa(t)},ca.$id=ca.getElementById,ca.poolIndex=function(){var e=this._private.cy._private.elements,t=this[0]._private.data.id;return e._private.map.get(t).index},ca.indexOf=function(e){var t=e[0]._private.data.id;return this._private.map.get(t).index},ca.indexOfId=function(e){return e=""+e,this._private.map.get(e).index},ca.json=function(e){var t=this.element(),n=this.cy();if(null==t&&e)return this;if(null!=t){var r=t._private;if(w(e)){if(n.startBatch(),e.data){t.data(e.data);var i=r.data;if(t.isEdge()){var a=!1,o={},l=e.data.source,u=e.data.target;null!=l&&l!=i.source&&(o.source=""+l,a=!0),null!=u&&u!=i.target&&(o.target=""+u,a=!0),a&&(t=t.move(o))}else{var s=e.data.parent;null==s&&null==i.parent||s==i.parent||(void 0===s&&(s=null),null!=s&&(s=""+s),t=t.move({parent:s}))}}e.position&&t.position(e.position);var c=function(n,i,a){var o=e[n];null!=o&&o!==r[n]&&(o?t[i]():t[a]())};return c("removed","remove","restore"),c("selected","select","unselect"),c("selectable","selectify","unselectify"),c("locked","lock","unlock"),c("grabbable","grabify","ungrabify"),c("pannable","panify","unpanify"),null!=e.classes&&t.classes(e.classes),n.endBatch(),this}if(void 0===e){var f={data:fe(r.data),position:fe(r.position),group:r.group,removed:r.removed,selected:r.selected,selectable:r.selectable,locked:r.locked,grabbable:r.grabbable,pannable:r.pannable,classes:null};f.classes="";var d=0;return r.classes.forEach((function(e){return f.classes+=0==d++?e:" "+e})),f}}},ca.jsons=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t].json();e.push(n)}return e},ca.clone=function(){for(var e=this.cy(),t=[],n=0;n<this.length;n++){var r=this[n].json(),i=new ke(e,r,!1);t.push(i)}return new sa(e,t)},ca.copy=ca.clone,ca.restore=function(){for(var e,t,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this,a=i.cy(),o=a._private,l=[],u=[],s=0,c=i.length;s<c;s++){var f=i[s];r&&!f.removed()||(f.isNode()?l.push(f):u.push(f))}e=l.concat(u);var d=function(){e.splice(t,1),t--};for(t=0;t<e.length;t++){var h=e[t],p=h._private,v=p.data;if(h.clearTraversalCache(),r||p.removed)if(void 0===v.id)v.id=ua(a,h);else if(E(v.id))v.id=""+v.id;else{if(M(v.id)||!m(v.id)){ue("Can not create element with invalid string ID `"+v.id+"`"),d();continue}if(a.hasElementWithId(v.id)){ue("Can not create second element with ID `"+v.id+"`"),d();continue}}else;var g=v.id;if(h.isNode()){var y=p.position;null==y.x&&(y.x=0),null==y.y&&(y.y=0)}if(h.isEdge()){for(var b=h,x=["source","target"],w=x.length,k=!1,S=0;S<w;S++){var T=x[S],P=v[T];E(P)&&(P=v[T]=""+v[T]),null==P||""===P?(ue("Can not create edge `"+g+"` with unspecified "+T),k=!0):a.hasElementWithId(P)||(ue("Can not create edge `"+g+"` with nonexistant "+T+" `"+P+"`"),k=!0)}if(k){d();continue}var C=a.getElementById(v.source),_=a.getElementById(v.target);C.same(_)?C._private.edges.push(b):(C._private.edges.push(b),_._private.edges.push(b)),b._private.source=C,b._private.target=_}p.map=new xe,p.map.set(g,{ele:h,index:0}),p.removed=!1,r&&a.addToPool(h)}for(var O=0;O<l.length;O++){var N=l[O],D=N._private.data;E(D.parent)&&(D.parent=""+D.parent);var I=D.parent,A=null!=I;if(A){var L=a.getElementById(I);if(L.empty())D.parent=void 0;else{for(var B=!1,z=L;!z.empty();){if(N.same(z)){B=!0,D.parent=void 0;break}z=z.parent()}B||(L[0]._private.children.push(N),N._private.parent=L[0],o.hasCompoundNodes=!0)}}}if(e.length>0){for(var R=new sa(a,e),F=0;F<R.length;F++){var j=R[F];j.isNode()||(j.parallelEdges().clearTraversalCache(),j.source().clearTraversalCache(),j.target().clearTraversalCache())}(o.hasCompoundNodes?a.collection().merge(R).merge(R.connectedNodes()).merge(R.parent()):R).dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(n),n?R.emitAndNotify("add"):r&&R.emit("add")}return i},ca.removed=function(){var e=this[0];return e&&e._private.removed},ca.inside=function(){var e=this[0];return e&&!e._private.removed},ca.remove=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this,r=[],i={},a=n._private.cy;function o(e){for(var t=e._private.edges,n=0;n<t.length;n++)u(t[n])}function l(e){for(var t=e._private.children,n=0;n<t.length;n++)u(t[n])}function u(e){var n=i[e.id()];t&&e.removed()||n||(i[e.id()]=!0,e.isNode()?(r.push(e),o(e),l(e)):r.unshift(e))}for(var s=0,c=n.length;s<c;s++){var f=n[s];u(f)}function d(e,t){var n=e._private.edges;ge(n,t),e.clearTraversalCache()}function h(e){e.clearTraversalCache()}var p=[];function v(e,t){t=t[0];var n=(e=e[0])._private.children,r=e.id();ge(n,t),t._private.parent=null,p.ids[r]||(p.ids[r]=!0,p.push(e))}p.ids={},n.dirtyCompoundBoundsCache(),t&&a.removeFromPool(r);for(var g=0;g<r.length;g++){var y=r[g];if(y.isEdge()){var m=y.source()[0],b=y.target()[0];d(m,y),d(b,y);for(var x=y.parallelEdges(),w=0;w<x.length;w++){var E=x[w];h(E),E.isBundledBezier()&&E.dirtyBoundingBoxCache()}}else{var k=y.parent();0!==k.length&&v(k,y)}t&&(y._private.removed=!0)}var S=a._private.elements;a._private.hasCompoundNodes=!1;for(var T=0;T<S.length;T++){var P=S[T];if(P.isParent()){a._private.hasCompoundNodes=!0;break}}var C=new sa(this.cy(),r);C.size()>0&&(e?C.emitAndNotify("remove"):t&&C.emit("remove"));for(var _=0;_<p.length;_++){var M=p[_];t&&M.removed()||M.updateStyle()}return C},ca.move=function(e){var t=this._private.cy,n=this,r=function(e){return null==e?e:""+e};if(void 0!==e.source||void 0!==e.target){var i=r(e.source),a=r(e.target),o=null!=i&&t.hasElementWithId(i),l=null!=a&&t.hasElementWithId(a);(o||l)&&(t.batch((function(){n.remove(!1,!1),n.emitAndNotify("moveout");for(var e=0;e<n.length;e++){var t=n[e],r=t._private.data;t.isEdge()&&(o&&(r.source=i),l&&(r.target=a))}n.restore(!1,!1)})),n.emitAndNotify("move"))}else if(void 0!==e.parent){var u=r(e.parent);if(null===u||t.hasElementWithId(u)){var s=null===u?void 0:u;t.batch((function(){var e=n.remove(!1,!1);e.emitAndNotify("moveout");for(var t=0;t<n.length;t++){var r=n[t],i=r._private.data;r.isNode()&&(i.parent=s)}e.restore(!1,!1)})),n.emitAndNotify("move")}}return this},[Fn,$n,Qn,Ar,Rr,Ur,Xr,bi,Ai,Li,{isNode:function(){return"nodes"===this.group()},isEdge:function(){return"edges"===this.group()},isLoop:function(){return this.isEdge()&&this.source()[0]===this.target()[0]},isSimple:function(){return this.isEdge()&&this.source()[0]!==this.target()[0]},group:function(){var e=this[0];if(e)return e._private.group}},Ri,ji,Yi,Zi,ta].forEach((function(e){R(ca,e)}));var fa={add:function(e){var t,n=this;if(S(e)){var r=e;if(r._private.cy===n)t=r.restore();else{for(var i=[],a=0;a<r.length;a++){var o=r[a];i.push(o.json())}t=new sa(n,i)}}else if(x(e)){t=new sa(n,e)}else if(w(e)&&(x(e.nodes)||x(e.edges))){for(var l=e,u=[],s=["nodes","edges"],c=0,f=s.length;c<f;c++){var d=s[c],h=l[d];if(x(h))for(var p=0,v=h.length;p<v;p++){var g=R({group:d},h[p]);u.push(g)}}t=new sa(n,u)}else{t=new ke(n,e).collection()}return t},remove:function(e){if(S(e));else if(m(e)){var t=e;e=this.$(t)}return e.remove()}};
/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
var da=function(){function e(e){return-e.tension*e.x-e.friction*e.v}function t(t,n,r){var i={x:t.x+r.dx*n,v:t.v+r.dv*n,tension:t.tension,friction:t.friction};return{dx:i.v,dv:e(i)}}function n(n,r){var i={dx:n.v,dv:e(n)},a=t(n,.5*r,i),o=t(n,.5*r,a),l=t(n,r,o),u=1/6*(i.dx+2*(a.dx+o.dx)+l.dx),s=1/6*(i.dv+2*(a.dv+o.dv)+l.dv);return n.x=n.x+u*r,n.v=n.v+s*r,n}return function e(t,r,i){var a,o,l,u={x:-1,v:0,tension:null,friction:null},s=[0],c=0;for(t=parseFloat(t)||500,r=parseFloat(r)||20,i=i||null,u.tension=t,u.friction=r,o=(a=null!==i)?(c=e(t,r))/i*.016:.016;l=n(l||u,o),s.push(1+l.x),c+=16,Math.abs(l.x)>1e-4&&Math.abs(l.v)>1e-4;);return a?function(e){return s[e*(s.length-1)|0]}:c}}(),ha=function(e,t,n,r){var i=function(e,t,n,r){var i=4,a=.001,o=1e-7,l=10,u=11,s=1/(u-1),c="undefined"!=typeof Float32Array;if(4!==arguments.length)return!1;for(var f=0;f<4;++f)if("number"!=typeof arguments[f]||isNaN(arguments[f])||!isFinite(arguments[f]))return!1;e=Math.min(e,1),n=Math.min(n,1),e=Math.max(e,0),n=Math.max(n,0);var d=c?new Float32Array(u):new Array(u);function h(e,t){return 1-3*t+3*e}function p(e,t){return 3*t-6*e}function v(e){return 3*e}function g(e,t,n){return((h(t,n)*e+p(t,n))*e+v(t))*e}function y(e,t,n){return 3*h(t,n)*e*e+2*p(t,n)*e+v(t)}function m(t,r){for(var a=0;a<i;++a){var o=y(r,e,n);if(0===o)return r;r-=(g(r,e,n)-t)/o}return r}function b(){for(var t=0;t<u;++t)d[t]=g(t*s,e,n)}function x(t,r,i){var a,u,s=0;do{(a=g(u=r+(i-r)/2,e,n)-t)>0?i=u:r=u}while(Math.abs(a)>o&&++s<l);return u}function w(t){for(var r=0,i=1,o=u-1;i!==o&&d[i]<=t;++i)r+=s;--i;var l=r+(t-d[i])/(d[i+1]-d[i])*s,c=y(l,e,n);return c>=a?m(t,l):0===c?l:x(t,r,r+s)}var E=!1;function k(){E=!0,e===t&&n===r||b()}var S=function(i){return E||k(),e===t&&n===r?i:0===i?0:1===i?1:g(w(i),t,r)};S.getControlPoints=function(){return[{x:e,y:t},{x:n,y:r}]};var T="generateBezier("+[e,t,n,r]+")";return S.toString=function(){return T},S}(e,t,n,r);return function(e,t,n){return e+(t-e)*i(n)}},pa={linear:function(e,t,n){return e+(t-e)*n},ease:ha(.25,.1,.25,1),"ease-in":ha(.42,0,1,1),"ease-out":ha(0,0,.58,1),"ease-in-out":ha(.42,0,.58,1),"ease-in-sine":ha(.47,0,.745,.715),"ease-out-sine":ha(.39,.575,.565,1),"ease-in-out-sine":ha(.445,.05,.55,.95),"ease-in-quad":ha(.55,.085,.68,.53),"ease-out-quad":ha(.25,.46,.45,.94),"ease-in-out-quad":ha(.455,.03,.515,.955),"ease-in-cubic":ha(.55,.055,.675,.19),"ease-out-cubic":ha(.215,.61,.355,1),"ease-in-out-cubic":ha(.645,.045,.355,1),"ease-in-quart":ha(.895,.03,.685,.22),"ease-out-quart":ha(.165,.84,.44,1),"ease-in-out-quart":ha(.77,0,.175,1),"ease-in-quint":ha(.755,.05,.855,.06),"ease-out-quint":ha(.23,1,.32,1),"ease-in-out-quint":ha(.86,0,.07,1),"ease-in-expo":ha(.95,.05,.795,.035),"ease-out-expo":ha(.19,1,.22,1),"ease-in-out-expo":ha(1,0,0,1),"ease-in-circ":ha(.6,.04,.98,.335),"ease-out-circ":ha(.075,.82,.165,1),"ease-in-out-circ":ha(.785,.135,.15,.86),spring:function(e,t,n){if(0===n)return pa.linear;var r=da(e,t,n);return function(e,t,n){return e+(t-e)*r(n)}},"cubic-bezier":ha};function va(e,t,n,r,i){if(1===r)return n;var a=i(t,n,r);return null==e||((e.roundValue||e.color)&&(a=Math.round(a)),void 0!==e.min&&(a=Math.max(a,e.min)),void 0!==e.max&&(a=Math.min(a,e.max))),a}function ga(e,t){return null!=e.pfValue||null!=e.value?null==e.pfValue||null!=t&&"%"===t.type.units?e.value:e.pfValue:e}function ya(e,t,n,r,i){var a=null!=i?i.type:null;n<0?n=0:n>1&&(n=1);var o=ga(e,i),l=ga(t,i);if(E(o)&&E(l))return va(a,o,l,n,r);if(x(o)&&x(l)){for(var u=[],s=0;s<l.length;s++){var c=o[s],f=l[s];if(null!=c&&null!=f){var d=va(a,c,f,n,r);u.push(d)}else u.push(f)}return u}}function ma(e,t,n,r){var i=!r,a=e._private,o=t._private,l=o.easing,u=o.startTime,s=(r?e:e.cy()).style();if(!o.easingImpl)if(null==l)o.easingImpl=pa.linear;else{var c,f,d;if(m(l))c=s.parse("transition-timing-function",l).value;else c=l;m(c)?(f=c,d=[]):(f=c[1],d=c.slice(2).map((function(e){return+e}))),d.length>0?("spring"===f&&d.push(o.duration),o.easingImpl=pa[f].apply(null,d)):o.easingImpl=pa[f]}var h,p=o.easingImpl;if(h=0===o.duration?1:(n-u)/o.duration,o.applying&&(h=o.progress),h<0?h=0:h>1&&(h=1),null==o.delay){var v=o.startPosition,g=o.position;if(g&&i&&!e.locked()){var y={};ba(v.x,g.x)&&(y.x=ya(v.x,g.x,h,p)),ba(v.y,g.y)&&(y.y=ya(v.y,g.y,h,p)),e.position(y)}var b=o.startPan,x=o.pan,w=a.pan,E=null!=x&&r;E&&(ba(b.x,x.x)&&(w.x=ya(b.x,x.x,h,p)),ba(b.y,x.y)&&(w.y=ya(b.y,x.y,h,p)),e.emit("pan"));var k=o.startZoom,S=o.zoom,T=null!=S&&r;T&&(ba(k,S)&&(a.zoom=rt(a.minZoom,ya(k,S,h,p),a.maxZoom)),e.emit("zoom")),(E||T)&&e.emit("viewport");var P=o.style;if(P&&P.length>0&&i){for(var C=0;C<P.length;C++){var _=P[C],M=_.name,O=_,N=o.startStyle[M],D=ya(N,O,h,p,s.properties[N.name]);s.overrideBypass(e,M,D)}e.emit("style")}}return o.progress=h,h}function ba(e,t){return null!=e&&null!=t&&(!(!E(e)||!E(t))||!(!e||!t))}function xa(e,t,n,r){var i=t._private;i.started=!0,i.startTime=n-i.progress*i.duration}function wa(e,t){var n=t._private.aniEles,r=[];function i(t,n){var i=t._private,a=i.animation.current,o=i.animation.queue,l=!1;if(!n&&"none"===t.pstyle("display").value){a=a.splice(0,a.length).concat(o.splice(0,o.length));for(var u=0;u<a.length;u++)a[u].stop()}if(0===a.length){var s=o.shift();s&&a.push(s)}for(var c=function(e){for(var t=e.length-1;t>=0;t--){(0,e[t])()}e.splice(0,e.length)},f=a.length-1;f>=0;f--){var d=a[f],h=d._private;h.stopped?(a.splice(f,1),h.hooked=!1,h.playing=!1,h.started=!1,c(h.frames)):(h.playing||h.applying)&&(h.playing&&h.applying&&(h.applying=!1),h.started||xa(0,d,e),ma(t,d,e,n),h.applying&&(h.applying=!1),c(h.frames),null!=h.step&&h.step(e),d.completed()&&(a.splice(f,1),h.hooked=!1,h.playing=!1,h.started=!1,c(h.completes)),l=!0)}return n||0!==a.length||0!==o.length||r.push(t),l}for(var a=!1,o=0;o<n.length;o++){var l=i(n[o]);a=a||l}var u=i(t,!0);(a||u)&&(n.length>0?t.notify("draw",n):t.notify("draw")),n.unmerge(r),t.emit("step")}var Ea={animate:Kn.animate(),animation:Kn.animation(),animated:Kn.animated(),clearQueue:Kn.clearQueue(),delay:Kn.delay(),delayAnimation:Kn.delayAnimation(),stop:Kn.stop(),addToAnimationPool:function(e){this.styleEnabled()&&this._private.aniEles.merge(e)},stopAnimationLoop:function(){this._private.animationsRunning=!1},startAnimationLoop:function(){var e=this;if(e._private.animationsRunning=!0,e.styleEnabled()){var t=e.renderer();t&&t.beforeRender?t.beforeRender((function(t,n){wa(n,e)}),t.beforeRenderPriorities.animations):function t(){e._private.animationsRunning&&X((function(n){wa(n,e),t()}))}()}}},ka={qualifierCompare:function(e,t){return null==e||null==t?null==e&&null==t:e.sameText(t)},eventMatches:function(e,t,n){var r=t.qualifier;return null==r||e!==n.target&&T(n.target)&&r.matches(n.target)},addEventFields:function(e,t){t.cy=e,t.target=e},callbackContext:function(e,t,n){return null!=t.qualifier?n.target:e}},Sa=function(e){return m(e)?new Dr(e):e},Ta={createEmitter:function(){var e=this._private;return e.emitter||(e.emitter=new Ci(ka,this)),this},emitter:function(){return this._private.emitter},on:function(e,t,n){return this.emitter().on(e,Sa(t),n),this},removeListener:function(e,t,n){return this.emitter().removeListener(e,Sa(t),n),this},removeAllListeners:function(){return this.emitter().removeAllListeners(),this},one:function(e,t,n){return this.emitter().one(e,Sa(t),n),this},once:function(e,t,n){return this.emitter().one(e,Sa(t),n),this},emit:function(e,t){return this.emitter().emit(e,t),this},emitAndNotify:function(e,t){return this.emit(e),this.notify(e,t),this}};Kn.eventAliasesOn(Ta);var Pa={png:function(e){return e=e||{},this._private.renderer.png(e)},jpg:function(e){var t=this._private.renderer;return(e=e||{}).bg=e.bg||"#fff",t.jpg(e)}};Pa.jpeg=Pa.jpg;var Ca={layout:function(e){if(null!=e)if(null!=e.name){var t=e.name,n=this.extension("layout",t);if(null!=n){var r;r=m(e.eles)?this.$(e.eles):null!=e.eles?e.eles:this.$();var i=new n(R({},e,{cy:this,eles:r}));return i}ue("No such layout `"+t+"` found.  Did you forget to import it and `cytoscape.use()` it?")}else ue("A `name` must be specified to make a layout");else ue("Layout options must be specified to make a layout")}};Ca.createLayout=Ca.makeLayout=Ca.layout;var _a={notify:function(e,t){var n=this._private;if(this.batching()){n.batchNotifications=n.batchNotifications||{};var r=n.batchNotifications[e]=n.batchNotifications[e]||this.collection();null!=t&&r.merge(t)}else if(n.notificationsEnabled){var i=this.renderer();!this.destroyed()&&i&&i.notify(e,t)}},notifications:function(e){var t=this._private;return void 0===e?t.notificationsEnabled:(t.notificationsEnabled=!!e,this)},noNotifications:function(e){this.notifications(!1),e(),this.notifications(!0)},batching:function(){return this._private.batchCount>0},startBatch:function(){var e=this._private;return null==e.batchCount&&(e.batchCount=0),0===e.batchCount&&(e.batchStyleEles=this.collection(),e.batchNotifications={}),e.batchCount++,this},endBatch:function(){var e=this._private;if(0===e.batchCount)return this;if(e.batchCount--,0===e.batchCount){e.batchStyleEles.updateStyle();var t=this.renderer();Object.keys(e.batchNotifications).forEach((function(n){var r=e.batchNotifications[n];r.empty()?t.notify(n):t.notify(n,r)}))}return this},batch:function(e){return this.startBatch(),e(),this.endBatch(),this},batchData:function(e){var t=this;return this.batch((function(){for(var n=Object.keys(e),r=0;r<n.length;r++){var i=n[r],a=e[i];t.getElementById(i).data(a)}}))}},Ma=ve({hideEdgesOnViewport:!1,textureOnViewport:!1,motionBlur:!1,motionBlurOpacity:.05,pixelRatio:void 0,desktopTapThreshold:4,touchTapThreshold:8,wheelSensitivity:1,debug:!1,showFps:!1}),Oa={renderTo:function(e,t,n,r){return this._private.renderer.renderTo(e,t,n,r),this},renderer:function(){return this._private.renderer},forceRender:function(){return this.notify("draw"),this},resize:function(){return this.invalidateSize(),this.emitAndNotify("resize"),this},initRenderer:function(e){var t=this.extension("renderer",e.name);if(null!=t){void 0!==e.wheelSensitivity&&ce("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");var n=Ma(e);n.cy=this,this._private.renderer=new t(n),this.notify("init")}else ue("Can not initialise: No such renderer `".concat(e.name,"` found. Did you forget to import it and `cytoscape.use()` it?"))},destroyRenderer:function(){this.notify("destroy");var e=this.container();if(e)for(e._cyreg=null;e.childNodes.length>0;)e.removeChild(e.childNodes[0]);this._private.renderer=null,this.mutableElements().forEach((function(e){var t=e._private;t.rscratch={},t.rstyle={},t.animation.current=[],t.animation.queue=[]}))},onRender:function(e){return this.on("render",e)},offRender:function(e){return this.off("render",e)}};Oa.invalidateDimensions=Oa.resize;var Na={collection:function(e,t){return m(e)?this.$(e):S(e)?e.collection():x(e)?new sa(this,e,t):new sa(this)},nodes:function(e){var t=this.$((function(e){return e.isNode()}));return e?t.filter(e):t},edges:function(e){var t=this.$((function(e){return e.isEdge()}));return e?t.filter(e):t},$:function(e){var t=this._private.elements;return e?t.filter(e):t.spawnSelf()},mutableElements:function(){return this._private.elements}};Na.elements=Na.filter=Na.$;var Da={};Da.apply=function(e){var t=this._private,n=t.cy.collection();t.newStyle&&(t.contextStyles={},t.propDiffs={},this.cleanElements(e,!0));for(var r=0;r<e.length;r++){var i=e[r],a=this.getContextMeta(i);if(!a.empty){var o=this.getContextStyle(a),l=this.applyContextStyle(a,o,i);t.newStyle||this.updateTransitions(i,l.diffProps),this.updateStyleHints(i)&&n.merge(i)}}return t.newStyle=!1,n},Da.getPropertiesDiff=function(e,t){var n=this._private.propDiffs=this._private.propDiffs||{},r=e+"-"+t,i=n[r];if(i)return i;for(var a=[],o={},l=0;l<this.length;l++){var u=this[l],s="t"===e[l],c="t"===t[l],f=s!==c,d=u.mappedProperties.length>0;if(f||c&&d){var h=void 0;f&&d||f?h=u.properties:d&&(h=u.mappedProperties);for(var p=0;p<h.length;p++){for(var v=h[p],g=v.name,y=!1,m=l+1;m<this.length;m++){var b=this[m];if("t"===t[m]&&(y=null!=b.properties[v.name]))break}o[g]||y||(o[g]=!0,a.push(g))}}}return n[r]=a,a},Da.getContextMeta=function(e){var t,n="",r=e._private.styleCxtKey||"";this._private.newStyle&&(r="");for(var i=0;i<this.length;i++){var a=this[i];n+=a.selector&&a.selector.matches(e)?"t":"f"}return t=this.getPropertiesDiff(r,n),e._private.styleCxtKey=n,{key:n,diffPropNames:t,empty:0===t.length}},Da.getContextStyle=function(e){var t=e.key,n=this._private.contextStyles=this._private.contextStyles||{};if(n[t])return n[t];for(var r={_private:{key:t}},i=0;i<this.length;i++){var a=this[i];if("t"===t[i])for(var o=0;o<a.properties.length;o++){var l=a.properties[o];r[l.name]=l}}return n[t]=r,r},Da.applyContextStyle=function(e,t,n){for(var r=e.diffPropNames,i={},a=this.types,o=0;o<r.length;o++){var l=r[o],u=t[l],s=n.pstyle(l);if(!u){if(!s)continue;u=s.bypass?{name:l,deleteBypassed:!0}:{name:l,delete:!0}}if(s!==u){if(u.mapped===a.fn&&null!=s&&null!=s.mapping&&s.mapping.value===u.value){var c=s.mapping;if((c.fnValue=u.value(n))===c.prevFnValue)continue}var f=i[l]={prev:s};this.applyParsedProperty(n,u),f.next=n.pstyle(l),f.next&&f.next.bypass&&(f.next=f.next.bypassed)}}return{diffProps:i}},Da.updateStyleHints=function(e){var t=e._private,n=this,r=n.propertyGroupNames,i=n.propertyGroupKeys,a=function(e,t,r){return n.getPropertiesHash(e,t,r)},o=t.styleKey;if(e.removed())return!1;var l="nodes"===t.group,u=e._private.style;r=Object.keys(u);for(var s=0;s<i.length;s++){var c=i[s];t.styleKeys[c]=0}for(var f=function(e,n){return t.styleKeys[n]=K(e,t.styleKeys[n])},d=function(e,t){for(var n=0;n<e.length;n++)f(e.charCodeAt(n),t)},h=function(e){return-128<e&&e<128&&Math.floor(e)!==e?-(1024*e|0):e},p=0;p<r.length;p++){var v=r[p],g=u[v];if(null!=g){var y=this.properties[v],m=y.type,b=y.groupKey,x=void 0;null!=y.hashOverride?x=y.hashOverride(e,g):null!=g.pfValue&&(x=g.pfValue);var w=null==y.enums?g.value:null,E=null!=x,k=E||null!=w,S=g.units;if(m.number&&k){var T=E?x:w;if(m.multiple)for(var P=0;P<T.length;P++)f(h(T[P]),b);else f(h(T),b);E||null==S||d(S,b)}else d(g.strValue,b)}}for(var C=0,_=0;_<i.length;_++){var M=i[_],O=t.styleKeys[M];C=K(O,C)}t.styleKey=C;var N=t.labelDimsKey=t.styleKeys.labelDimensions;if(t.labelKey=a(e,["label"],N),t.labelStyleKey=K(t.styleKeys.commonLabel,t.labelKey),l||(t.sourceLabelKey=a(e,["source-label"],N),t.sourceLabelStyleKey=K(t.styleKeys.commonLabel,t.sourceLabelKey),t.targetLabelKey=a(e,["target-label"],N),t.targetLabelStyleKey=K(t.styleKeys.commonLabel,t.targetLabelKey)),l){var D=t.styleKeys,I=D.nodeBody,A=D.nodeBorder,L=D.backgroundImage,B=D.compound,z=D.pie;t.nodeKey=$([A,L,B,z],I),t.hasPie=0!=z}return o!==t.styleKey},Da.clearStyleHints=function(e){var t=e._private;t.styleKeys={},t.styleKey=null,t.labelKey=null,t.labelStyleKey=null,t.sourceLabelKey=null,t.sourceLabelStyleKey=null,t.targetLabelKey=null,t.targetLabelStyleKey=null,t.nodeKey=null,t.hasPie=null},Da.applyParsedProperty=function(e,t){var n,r=this,i=t,a=e._private.style,o=r.types,l=r.properties[i.name].type,u=i.bypass,s=a[i.name],c=s&&s.bypass,f=e._private,d=function(e){return null==e?null:null!=e.pfValue?e.pfValue:e.value},h=function(){var t=d(s),n=d(i);r.checkTriggers(e,i.name,t,n)};if("curve-style"===t.name&&e.isEdge()&&("bezier"!==t.value&&e.isLoop()||"haystack"===t.value&&(e.source().isParent()||e.target().isParent()))&&(i=t=this.parse(t.name,"bezier",u)),i.delete)return a[i.name]=void 0,h(),!0;if(i.deleteBypassed)return s?!!s.bypass&&(s.bypassed=void 0,h(),!0):(h(),!0);if(i.deleteBypass)return s?!!s.bypass&&(a[i.name]=s.bypassed,h(),!0):(h(),!0);var p=function(){ce("Do not assign mappings to elements without corresponding data (i.e. ele `"+e.id()+"` has no mapping for property `"+i.name+"` with data field `"+i.field+"`); try a `["+i.field+"]` selector to limit scope to elements with `"+i.field+"` defined")};switch(i.mapped){case o.mapData:for(var v,g=i.field.split("."),y=f.data,m=0;m<g.length&&y;m++){y=y[g[m]]}if(null==y)return p(),!1;if(!E(y))return ce("Do not use continuous mappers without specifying numeric data (i.e. `"+i.field+": "+y+"` for `"+e.id()+"` is non-numeric)"),!1;var b=i.fieldMax-i.fieldMin;if((v=0===b?0:(y-i.fieldMin)/b)<0?v=0:v>1&&(v=1),l.color){var x=i.valueMin[0],w=i.valueMax[0],k=i.valueMin[1],S=i.valueMax[1],T=i.valueMin[2],P=i.valueMax[2],C=null==i.valueMin[3]?1:i.valueMin[3],_=null==i.valueMax[3]?1:i.valueMax[3],M=[Math.round(x+(w-x)*v),Math.round(k+(S-k)*v),Math.round(T+(P-T)*v),Math.round(C+(_-C)*v)];n={bypass:i.bypass,name:i.name,value:M,strValue:"rgb("+M[0]+", "+M[1]+", "+M[2]+")"}}else{if(!l.number)return!1;var O=i.valueMin+(i.valueMax-i.valueMin)*v;n=this.parse(i.name,O,i.bypass,"mapping")}if(!n)return p(),!1;n.mapping=i,i=n;break;case o.data:for(var N=i.field.split("."),D=f.data,I=0;I<N.length&&D;I++){D=D[N[I]]}if(null!=D&&(n=this.parse(i.name,D,i.bypass,"mapping")),!n)return p(),!1;n.mapping=i,i=n;break;case o.fn:var A=i.value,L=null!=i.fnValue?i.fnValue:A(e);if(i.prevFnValue=L,null==L)return ce("Custom function mappers may not return null (i.e. `"+i.name+"` for ele `"+e.id()+"` is null)"),!1;if(!(n=this.parse(i.name,L,i.bypass,"mapping")))return ce("Custom function mappers may not return invalid values for the property type (i.e. `"+i.name+"` for ele `"+e.id()+"` is invalid)"),!1;n.mapping=fe(i),i=n;break;case void 0:break;default:return!1}return u?(i.bypassed=c?s.bypassed:s,a[i.name]=i):c?s.bypassed=i:a[i.name]=i,h(),!0},Da.cleanElements=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(this.clearStyleHints(r),r.dirtyCompoundBoundsCache(),r.dirtyBoundingBoxCache(),t)for(var i=r._private.style,a=Object.keys(i),o=0;o<a.length;o++){var l=a[o],u=i[l];null!=u&&(u.bypass?u.bypassed=null:i[l]=null)}else r._private.style={}}},Da.update=function(){this._private.cy.mutableElements().updateStyle()},Da.updateTransitions=function(e,t){var n=this,r=e._private,i=e.pstyle("transition-property").value,a=e.pstyle("transition-duration").pfValue,o=e.pstyle("transition-delay").pfValue;if(i.length>0&&a>0){for(var l={},u=!1,s=0;s<i.length;s++){var c=i[s],f=e.pstyle(c),d=t[c];if(d){var h=d.prev,p=null!=d.next?d.next:f,v=!1,g=void 0;h&&(E(h.pfValue)&&E(p.pfValue)?(v=p.pfValue-h.pfValue,g=h.pfValue+1e-6*v):E(h.value)&&E(p.value)?(v=p.value-h.value,g=h.value+1e-6*v):x(h.value)&&x(p.value)&&(v=h.value[0]!==p.value[0]||h.value[1]!==p.value[1]||h.value[2]!==p.value[2],g=h.strValue),v&&(l[c]=p.strValue,this.applyBypass(e,c,g),u=!0))}}if(!u)return;r.transitioning=!0,new Xn((function(t){o>0?e.delayAnimation(o).play().promise().then(t):t()})).then((function(){return e.animation({style:l,duration:a,easing:e.pstyle("transition-timing-function").value,queue:!1}).play().promise()})).then((function(){n.removeBypasses(e,i),e.emitAndNotify("style"),r.transitioning=!1}))}else r.transitioning&&(this.removeBypasses(e,i),e.emitAndNotify("style"),r.transitioning=!1)},Da.checkTrigger=function(e,t,n,r,i,a){var o=this.properties[t],l=i(o);null!=l&&l(n,r)&&a(o)},Da.checkZOrderTrigger=function(e,t,n,r){var i=this;this.checkTrigger(e,t,n,r,(function(e){return e.triggersZOrder}),(function(){i._private.cy.notify("zorder",e)}))},Da.checkBoundsTrigger=function(e,t,n,r){this.checkTrigger(e,t,n,r,(function(e){return e.triggersBounds}),(function(i){e.dirtyCompoundBoundsCache(),e.dirtyBoundingBoxCache(),"bezier"!==e.pstyle("curve-style").value&&("curve-style"!==t||"bezier"!==n&&"bezier"!==r)||!i.triggersBoundsOfParallelBeziers||e.parallelEdges().forEach((function(e){e.isBundledBezier()&&e.dirtyBoundingBoxCache()}))}))},Da.checkTriggers=function(e,t,n,r){e.dirtyStyleCache(),this.checkZOrderTrigger(e,t,n,r),this.checkBoundsTrigger(e,t,n,r)};var Ia={applyBypass:function(e,t,n,r){var i=[];if("*"===t||"**"===t){if(void 0!==n)for(var a=0;a<this.properties.length;a++){var o=this.properties[a].name,l=this.parse(o,n,!0);l&&i.push(l)}}else if(m(t)){var u=this.parse(t,n,!0);u&&i.push(u)}else{if(!w(t))return!1;var s=t;r=n;for(var c=Object.keys(s),f=0;f<c.length;f++){var d=c[f],h=s[d];if(void 0===h&&(h=s[I(d)]),void 0!==h){var p=this.parse(d,h,!0);p&&i.push(p)}}}if(0===i.length)return!1;for(var v=!1,g=0;g<e.length;g++){for(var y=e[g],b={},x=void 0,E=0;E<i.length;E++){var k=i[E];if(r){var S=y.pstyle(k.name);x=b[k.name]={prev:S}}v=this.applyParsedProperty(y,k)||v,r&&(x.next=y.pstyle(k.name))}v&&this.updateStyleHints(y),r&&this.updateTransitions(y,b,!0)}return v},overrideBypass:function(e,t,n){t=D(t);for(var r=0;r<e.length;r++){var i=e[r],a=i._private.style[t],o=this.properties[t].type,l=o.color,u=o.mutiple,s=a?null!=a.pfValue?a.pfValue:a.value:null;a&&a.bypass?(a.value=n,null!=a.pfValue&&(a.pfValue=n),a.strValue=l?"rgb("+n.join(",")+")":u?n.join(" "):""+n,this.updateStyleHints(i)):this.applyBypass(i,t,n),this.checkTriggers(i,t,s,n)}},removeAllBypasses:function(e,t){return this.removeBypasses(e,this.propertyNames,t)},removeBypasses:function(e,t,n){for(var r=0;r<e.length;r++){for(var i=e[r],a={},o=0;o<t.length;o++){var l=t[o],u=this.properties[l],s=i.pstyle(u.name);if(s&&s.bypass){var c=this.parse(l,"",!0),f=a[u.name]={prev:s};this.applyParsedProperty(i,c),f.next=i.pstyle(u.name)}}this.updateStyleHints(i),n&&this.updateTransitions(i,a,!0)}}},Aa={getEmSizeInPixels:function(){var e=this.containerCss("font-size");return null!=e?parseFloat(e):1},containerCss:function(e){var t=this._private.cy.container();if(f&&t&&f.getComputedStyle)return f.getComputedStyle(t).getPropertyValue(e)}},La={getRenderedStyle:function(e,t){return t?this.getStylePropertyValue(e,t,!0):this.getRawStyle(e,!0)},getRawStyle:function(e,t){if(e=e[0]){for(var n={},r=0;r<this.properties.length;r++){var i=this.properties[r],a=this.getStylePropertyValue(e,i.name,t);null!=a&&(n[i.name]=a,n[I(i.name)]=a)}return n}},getIndexedStyle:function(e,t,n,r){var i=e.pstyle(t)[n][r];return null!=i?i:e.cy().style().getDefaultProperty(t)[n][0]},getStylePropertyValue:function(e,t,n){if(e=e[0]){var r=this.properties[t];r.alias&&(r=r.pointsTo);var i=r.type,a=e.pstyle(r.name);if(a){var o=a.value,l=a.units,u=a.strValue;if(n&&i.number&&null!=o&&E(o)){var s=e.cy().zoom(),c=function(e){return e*s},f=function(e,t){return c(e)+t},d=x(o);return(d?l.every((function(e){return null!=e})):null!=l)?d?o.map((function(e,t){return f(e,l[t])})).join(" "):f(o,l):d?o.map((function(e){return m(e)?e:""+c(e)})).join(" "):""+c(o)}if(null!=u)return u}return null}},getAnimationStartStyle:function(e,t){for(var n={},r=0;r<t.length;r++){var i=t[r].name,a=e.pstyle(i);void 0!==a&&(a=w(a)?this.parse(i,a.strValue):this.parse(i,a)),a&&(n[i]=a)}return n},getPropsList:function(e){var t=[],n=e,r=this.properties;if(n)for(var i=Object.keys(n),a=0;a<i.length;a++){var o=i[a],l=n[o],u=r[o]||r[D(o)],s=this.parse(u.name,l);s&&t.push(s)}return t},getNonDefaultPropertiesHash:function(e,t,n){var r,i,a,o,l,u,s=n;for(l=0;l<t.length;l++)if(r=t[l],null!=(i=e.pstyle(r,!1)))if(null!=i.pfValue)s=K(o,s);else for(a=i.strValue,u=0;u<a.length;u++)o=a.charCodeAt(u),s=K(o,s);return s}};La.getPropertiesHash=La.getNonDefaultPropertiesHash;var Ba={appendFromJson:function(e){for(var t=0;t<e.length;t++){var n=e[t],r=n.selector,i=n.style||n.css,a=Object.keys(i);this.selector(r);for(var o=0;o<a.length;o++){var l=a[o],u=i[l];this.css(l,u)}}return this},fromJson:function(e){return this.resetToDefault(),this.appendFromJson(e),this},json:function(){for(var e=[],t=this.defaultLength;t<this.length;t++){for(var n=this[t],r=n.selector,i=n.properties,a={},o=0;o<i.length;o++){var l=i[o];a[l.name]=l.strValue}e.push({selector:r?r.toString():"core",style:a})}return e}},za={appendFromString:function(e){var t,n,r,i=""+e;function a(){i=i.length>t.length?i.substr(t.length):""}function o(){n=n.length>r.length?n.substr(r.length):""}for(i=i.replace(/[/][*](\s|.)+?[*][/]/g,"");;){if(i.match(/^\s*$/))break;var l=i.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);if(!l){ce("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: "+i);break}t=l[0];var u=l[1];if("core"!==u)if(new Dr(u).invalid){ce("Skipping parsing of block: Invalid selector found in string stylesheet: "+u),a();continue}var s=l[2],c=!1;n=s;for(var f=[];;){if(n.match(/^\s*$/))break;var d=n.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);if(!d){ce("Skipping parsing of block: Invalid formatting of style property and value definitions found in:"+s),c=!0;break}r=d[0];var h=d[1],p=d[2];if(this.properties[h])this.parse(h,p)?(f.push({name:h,val:p}),o()):(ce("Skipping property: Invalid property definition in: "+r),o());else ce("Skipping property: Invalid property name in: "+r),o()}if(c){a();break}this.selector(u);for(var v=0;v<f.length;v++){var g=f[v];this.css(g.name,g.val)}a()}return this},fromString:function(e){return this.resetToDefault(),this.appendFromString(e),this}},Ra={};!function(){var e=B,t=function(e){return"^"+e+"\\s*\\(\\s*([\\w\\.]+)\\s*\\)$"},n=function(t){var n=e+"|\\w+|rgb[a]?\\((?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)(?:\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)|hsl[a]?\\((?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?)))\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])(?:\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)|\\#[0-9a-fA-F]{3}|\\#[0-9a-fA-F]{6}";return"^"+t+"\\s*\\(([\\w\\.]+)\\s*\\,\\s*("+e+")\\s*\\,\\s*("+e+")\\s*,\\s*("+n+")\\s*\\,\\s*("+n+")\\)$"},r=["^url\\s*\\(\\s*['\"]?(.+?)['\"]?\\s*\\)$","^(none)$","^(.+)$"];Ra.types={time:{number:!0,min:0,units:"s|ms",implicitUnits:"ms"},percent:{number:!0,min:0,max:100,units:"%",implicitUnits:"%"},percentages:{number:!0,min:0,max:100,units:"%",implicitUnits:"%",multiple:!0},zeroOneNumber:{number:!0,min:0,max:1,unitless:!0},zeroOneNumbers:{number:!0,min:0,max:1,unitless:!0,multiple:!0},nOneOneNumber:{number:!0,min:-1,max:1,unitless:!0},nonNegativeInt:{number:!0,min:0,integer:!0,unitless:!0},position:{enums:["parent","origin"]},nodeSize:{number:!0,min:0,enums:["label"]},number:{number:!0,unitless:!0},numbers:{number:!0,unitless:!0,multiple:!0},positiveNumber:{number:!0,unitless:!0,min:0,strictMin:!0},size:{number:!0,min:0},bidirectionalSize:{number:!0},bidirectionalSizes:{number:!0,multiple:!0},sizeMaybePercent:{number:!0,min:0,allowPercent:!0},axisDirection:{enums:["horizontal","leftward","rightward","vertical","upward","downward","auto"]},paddingRelativeTo:{enums:["width","height","average","min","max"]},bgWH:{number:!0,min:0,allowPercent:!0,enums:["auto"],multiple:!0},bgPos:{number:!0,allowPercent:!0,multiple:!0},bgRelativeTo:{enums:["inner","include-padding"],multiple:!0},bgRepeat:{enums:["repeat","repeat-x","repeat-y","no-repeat"],multiple:!0},bgFit:{enums:["none","contain","cover"],multiple:!0},bgCrossOrigin:{enums:["anonymous","use-credentials"],multiple:!0},bgClip:{enums:["none","node"],multiple:!0},color:{color:!0},colors:{color:!0,multiple:!0},fill:{enums:["solid","linear-gradient","radial-gradient"]},bool:{enums:["yes","no"]},lineStyle:{enums:["solid","dotted","dashed"]},lineCap:{enums:["butt","round","square"]},borderStyle:{enums:["solid","dotted","dashed","double"]},curveStyle:{enums:["bezier","unbundled-bezier","haystack","segments","straight","taxi"]},fontFamily:{regex:'^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'},fontStyle:{enums:["italic","normal","oblique"]},fontWeight:{enums:["normal","bold","bolder","lighter","100","200","300","400","500","600","800","900",100,200,300,400,500,600,700,800,900]},textDecoration:{enums:["none","underline","overline","line-through"]},textTransform:{enums:["none","uppercase","lowercase"]},textWrap:{enums:["none","wrap","ellipsis"]},textOverflowWrap:{enums:["whitespace","anywhere"]},textBackgroundShape:{enums:["rectangle","roundrectangle","round-rectangle"]},nodeShape:{enums:["rectangle","roundrectangle","round-rectangle","cutrectangle","cut-rectangle","bottomroundrectangle","bottom-round-rectangle","barrel","ellipse","triangle","square","pentagon","hexagon","concavehexagon","concave-hexagon","heptagon","octagon","tag","star","diamond","vee","rhomboid","polygon"]},compoundIncludeLabels:{enums:["include","exclude"]},arrowShape:{enums:["tee","triangle","triangle-tee","triangle-cross","triangle-backcurve","vee","square","circle","diamond","chevron","none"]},arrowFill:{enums:["filled","hollow"]},display:{enums:["element","none"]},visibility:{enums:["hidden","visible"]},zCompoundDepth:{enums:["bottom","orphan","auto","top"]},zIndexCompare:{enums:["auto","manual"]},valign:{enums:["top","center","bottom"]},halign:{enums:["left","center","right"]},justification:{enums:["left","center","right","auto"]},text:{string:!0},data:{mapping:!0,regex:t("data")},layoutData:{mapping:!0,regex:t("layoutData")},scratch:{mapping:!0,regex:t("scratch")},mapData:{mapping:!0,regex:n("mapData")},mapLayoutData:{mapping:!0,regex:n("mapLayoutData")},mapScratch:{mapping:!0,regex:n("mapScratch")},fn:{mapping:!0,fn:!0},url:{regexes:r,singleRegexMatchValue:!0},urls:{regexes:r,singleRegexMatchValue:!0,multiple:!0},propList:{propList:!0},angle:{number:!0,units:"deg|rad",implicitUnits:"rad"},textRotation:{number:!0,units:"deg|rad",implicitUnits:"rad",enums:["none","autorotate"]},polygonPointList:{number:!0,multiple:!0,evenMultiple:!0,min:-1,max:1,unitless:!0},edgeDistances:{enums:["intersection","node-position"]},edgeEndpoint:{number:!0,multiple:!0,units:"%|px|em|deg|rad",implicitUnits:"px",enums:["inside-to-node","outside-to-node","outside-to-node-or-label","outside-to-line","outside-to-line-or-label"],singleEnum:!0,validate:function(e,t){switch(e.length){case 2:return"deg"!==t[0]&&"rad"!==t[0]&&"deg"!==t[1]&&"rad"!==t[1];case 1:return m(e[0])||"deg"===t[0]||"rad"===t[0];default:return!1}}},easing:{regexes:["^(spring)\\s*\\(\\s*("+e+")\\s*,\\s*("+e+")\\s*\\)$","^(cubic-bezier)\\s*\\(\\s*("+e+")\\s*,\\s*("+e+")\\s*,\\s*("+e+")\\s*,\\s*("+e+")\\s*\\)$"],enums:["linear","ease","ease-in","ease-out","ease-in-out","ease-in-sine","ease-out-sine","ease-in-out-sine","ease-in-quad","ease-out-quad","ease-in-out-quad","ease-in-cubic","ease-out-cubic","ease-in-out-cubic","ease-in-quart","ease-out-quart","ease-in-out-quart","ease-in-quint","ease-out-quint","ease-in-out-quint","ease-in-expo","ease-out-expo","ease-in-out-expo","ease-in-circ","ease-out-circ","ease-in-out-circ"]},gradientDirection:{enums:["to-bottom","to-top","to-left","to-right","to-bottom-right","to-bottom-left","to-top-right","to-top-left","to-right-bottom","to-left-bottom","to-right-top","to-left-top"]}};var i={zeroNonZero:function(e,t){return(null==e||null==t)&&e!==t||(0==e&&0!=t||0!=e&&0==t)},any:function(e,t){return e!=t}},a=Ra.types,o=[{name:"label",type:a.text,triggersBounds:i.any},{name:"text-rotation",type:a.textRotation,triggersBounds:i.any},{name:"text-margin-x",type:a.bidirectionalSize,triggersBounds:i.any},{name:"text-margin-y",type:a.bidirectionalSize,triggersBounds:i.any}],l=[{name:"source-label",type:a.text,triggersBounds:i.any},{name:"source-text-rotation",type:a.textRotation,triggersBounds:i.any},{name:"source-text-margin-x",type:a.bidirectionalSize,triggersBounds:i.any},{name:"source-text-margin-y",type:a.bidirectionalSize,triggersBounds:i.any},{name:"source-text-offset",type:a.size,triggersBounds:i.any}],u=[{name:"target-label",type:a.text,triggersBounds:i.any},{name:"target-text-rotation",type:a.textRotation,triggersBounds:i.any},{name:"target-text-margin-x",type:a.bidirectionalSize,triggersBounds:i.any},{name:"target-text-margin-y",type:a.bidirectionalSize,triggersBounds:i.any},{name:"target-text-offset",type:a.size,triggersBounds:i.any}],s=[{name:"font-family",type:a.fontFamily,triggersBounds:i.any},{name:"font-style",type:a.fontStyle,triggersBounds:i.any},{name:"font-weight",type:a.fontWeight,triggersBounds:i.any},{name:"font-size",type:a.size,triggersBounds:i.any},{name:"text-transform",type:a.textTransform,triggersBounds:i.any},{name:"text-wrap",type:a.textWrap,triggersBounds:i.any},{name:"text-overflow-wrap",type:a.textOverflowWrap,triggersBounds:i.any},{name:"text-max-width",type:a.size,triggersBounds:i.any},{name:"text-outline-width",type:a.size,triggersBounds:i.any},{name:"line-height",type:a.positiveNumber,triggersBounds:i.any}],c=[{name:"text-valign",type:a.valign,triggersBounds:i.any},{name:"text-halign",type:a.halign,triggersBounds:i.any},{name:"color",type:a.color},{name:"text-outline-color",type:a.color},{name:"text-outline-opacity",type:a.zeroOneNumber},{name:"text-background-color",type:a.color},{name:"text-background-opacity",type:a.zeroOneNumber},{name:"text-background-padding",type:a.size,triggersBounds:i.any},{name:"text-border-opacity",type:a.zeroOneNumber},{name:"text-border-color",type:a.color},{name:"text-border-width",type:a.size,triggersBounds:i.any},{name:"text-border-style",type:a.borderStyle,triggersBounds:i.any},{name:"text-background-shape",type:a.textBackgroundShape,triggersBounds:i.any},{name:"text-justification",type:a.justification}],f=[{name:"events",type:a.bool},{name:"text-events",type:a.bool}],d=[{name:"display",type:a.display,triggersZOrder:i.any,triggersBounds:i.any,triggersBoundsOfParallelBeziers:!0},{name:"visibility",type:a.visibility,triggersZOrder:i.any},{name:"opacity",type:a.zeroOneNumber,triggersZOrder:i.zeroNonZero},{name:"text-opacity",type:a.zeroOneNumber},{name:"min-zoomed-font-size",type:a.size},{name:"z-compound-depth",type:a.zCompoundDepth,triggersZOrder:i.any},{name:"z-index-compare",type:a.zIndexCompare,triggersZOrder:i.any},{name:"z-index",type:a.nonNegativeInt,triggersZOrder:i.any}],h=[{name:"overlay-padding",type:a.size,triggersBounds:i.any},{name:"overlay-color",type:a.color},{name:"overlay-opacity",type:a.zeroOneNumber,triggersBounds:i.zeroNonZero}],p=[{name:"transition-property",type:a.propList},{name:"transition-duration",type:a.time},{name:"transition-delay",type:a.time},{name:"transition-timing-function",type:a.easing}],v=function(e,t){return"label"===t.value?-e.poolIndex():t.pfValue},g=[{name:"height",type:a.nodeSize,triggersBounds:i.any,hashOverride:v},{name:"width",type:a.nodeSize,triggersBounds:i.any,hashOverride:v},{name:"shape",type:a.nodeShape,triggersBounds:i.any},{name:"shape-polygon-points",type:a.polygonPointList,triggersBounds:i.any},{name:"background-color",type:a.color},{name:"background-fill",type:a.fill},{name:"background-opacity",type:a.zeroOneNumber},{name:"background-blacken",type:a.nOneOneNumber},{name:"background-gradient-stop-colors",type:a.colors},{name:"background-gradient-stop-positions",type:a.percentages},{name:"background-gradient-direction",type:a.gradientDirection},{name:"padding",type:a.sizeMaybePercent,triggersBounds:i.any},{name:"padding-relative-to",type:a.paddingRelativeTo,triggersBounds:i.any},{name:"bounds-expansion",type:a.size,triggersBounds:i.any}],y=[{name:"border-color",type:a.color},{name:"border-opacity",type:a.zeroOneNumber},{name:"border-width",type:a.size,triggersBounds:i.any},{name:"border-style",type:a.borderStyle}],b=[{name:"background-image",type:a.urls},{name:"background-image-crossorigin",type:a.bgCrossOrigin},{name:"background-image-opacity",type:a.zeroOneNumbers},{name:"background-position-x",type:a.bgPos},{name:"background-position-y",type:a.bgPos},{name:"background-width-relative-to",type:a.bgRelativeTo},{name:"background-height-relative-to",type:a.bgRelativeTo},{name:"background-repeat",type:a.bgRepeat},{name:"background-fit",type:a.bgFit},{name:"background-clip",type:a.bgClip},{name:"background-width",type:a.bgWH},{name:"background-height",type:a.bgWH},{name:"background-offset-x",type:a.bgPos},{name:"background-offset-y",type:a.bgPos}],x=[{name:"position",type:a.position,triggersBounds:i.any},{name:"compound-sizing-wrt-labels",type:a.compoundIncludeLabels,triggersBounds:i.any},{name:"min-width",type:a.size,triggersBounds:i.any},{name:"min-width-bias-left",type:a.sizeMaybePercent,triggersBounds:i.any},{name:"min-width-bias-right",type:a.sizeMaybePercent,triggersBounds:i.any},{name:"min-height",type:a.size,triggersBounds:i.any},{name:"min-height-bias-top",type:a.sizeMaybePercent,triggersBounds:i.any},{name:"min-height-bias-bottom",type:a.sizeMaybePercent,triggersBounds:i.any}],w=[{name:"line-style",type:a.lineStyle},{name:"line-color",type:a.color},{name:"line-fill",type:a.fill},{name:"line-cap",type:a.lineCap},{name:"line-dash-pattern",type:a.numbers},{name:"line-dash-offset",type:a.number},{name:"line-gradient-stop-colors",type:a.colors},{name:"line-gradient-stop-positions",type:a.percentages},{name:"curve-style",type:a.curveStyle,triggersBounds:i.any,triggersBoundsOfParallelBeziers:!0},{name:"haystack-radius",type:a.zeroOneNumber,triggersBounds:i.any},{name:"source-endpoint",type:a.edgeEndpoint,triggersBounds:i.any},{name:"target-endpoint",type:a.edgeEndpoint,triggersBounds:i.any},{name:"control-point-step-size",type:a.size,triggersBounds:i.any},{name:"control-point-distances",type:a.bidirectionalSizes,triggersBounds:i.any},{name:"control-point-weights",type:a.numbers,triggersBounds:i.any},{name:"segment-distances",type:a.bidirectionalSizes,triggersBounds:i.any},{name:"segment-weights",type:a.numbers,triggersBounds:i.any},{name:"taxi-turn",type:a.sizeMaybePercent,triggersBounds:i.any},{name:"taxi-turn-min-distance",type:a.size,triggersBounds:i.any},{name:"taxi-direction",type:a.axisDirection,triggersBounds:i.any},{name:"edge-distances",type:a.edgeDistances,triggersBounds:i.any},{name:"arrow-scale",type:a.positiveNumber,triggersBounds:i.any},{name:"loop-direction",type:a.angle,triggersBounds:i.any},{name:"loop-sweep",type:a.angle,triggersBounds:i.any},{name:"source-distance-from-node",type:a.size,triggersBounds:i.any},{name:"target-distance-from-node",type:a.size,triggersBounds:i.any}],E=[{name:"ghost",type:a.bool,triggersBounds:i.any},{name:"ghost-offset-x",type:a.bidirectionalSize,triggersBounds:i.any},{name:"ghost-offset-y",type:a.bidirectionalSize,triggersBounds:i.any},{name:"ghost-opacity",type:a.zeroOneNumber}],k=[{name:"selection-box-color",type:a.color},{name:"selection-box-opacity",type:a.zeroOneNumber},{name:"selection-box-border-color",type:a.color},{name:"selection-box-border-width",type:a.size},{name:"active-bg-color",type:a.color},{name:"active-bg-opacity",type:a.zeroOneNumber},{name:"active-bg-size",type:a.size},{name:"outside-texture-bg-color",type:a.color},{name:"outside-texture-bg-opacity",type:a.zeroOneNumber}],S=[];Ra.pieBackgroundN=16,S.push({name:"pie-size",type:a.sizeMaybePercent});for(var T=1;T<=Ra.pieBackgroundN;T++)S.push({name:"pie-"+T+"-background-color",type:a.color}),S.push({name:"pie-"+T+"-background-size",type:a.percent}),S.push({name:"pie-"+T+"-background-opacity",type:a.zeroOneNumber});var P=[],C=Ra.arrowPrefixes=["source","mid-source","target","mid-target"];[{name:"arrow-shape",type:a.arrowShape,triggersBounds:i.any},{name:"arrow-color",type:a.color},{name:"arrow-fill",type:a.arrowFill}].forEach((function(e){C.forEach((function(t){var n=t+"-"+e.name,r=e.type,i=e.triggersBounds;P.push({name:n,type:r,triggersBounds:i})}))}),{});var _=Ra.properties=[].concat(f,p,d,h,E,c,s,o,l,u,g,y,b,S,x,w,P,k),M=Ra.propertyGroups={behavior:f,transition:p,visibility:d,overlay:h,ghost:E,commonLabel:c,labelDimensions:s,mainLabel:o,sourceLabel:l,targetLabel:u,nodeBody:g,nodeBorder:y,backgroundImage:b,pie:S,compound:x,edgeLine:w,edgeArrow:P,core:k},O=Ra.propertyGroupNames={};(Ra.propertyGroupKeys=Object.keys(M)).forEach((function(e){O[e]=M[e].map((function(e){return e.name})),M[e].forEach((function(t){return t.groupKey=e}))}));var N=Ra.aliases=[{name:"content",pointsTo:"label"},{name:"control-point-distance",pointsTo:"control-point-distances"},{name:"control-point-weight",pointsTo:"control-point-weights"},{name:"edge-text-rotation",pointsTo:"text-rotation"},{name:"padding-left",pointsTo:"padding"},{name:"padding-right",pointsTo:"padding"},{name:"padding-top",pointsTo:"padding"},{name:"padding-bottom",pointsTo:"padding"}];Ra.propertyNames=_.map((function(e){return e.name}));for(var D=0;D<_.length;D++){var I=_[D];_[I.name]=I}for(var A=0;A<N.length;A++){var L=N[A],z=_[L.pointsTo],R={name:L.name,alias:!0,pointsTo:z};_.push(R),_[L.name]=R}}(),Ra.getDefaultProperty=function(e){return this.getDefaultProperties()[e]},Ra.getDefaultProperties=function(){var e=this._private;if(null!=e.defaultProperties)return e.defaultProperties;for(var t=R({"selection-box-color":"#ddd","selection-box-opacity":.65,"selection-box-border-color":"#aaa","selection-box-border-width":1,"active-bg-color":"black","active-bg-opacity":.15,"active-bg-size":30,"outside-texture-bg-color":"#000","outside-texture-bg-opacity":.125,events:"yes","text-events":"no","text-valign":"top","text-halign":"center","text-justification":"auto","line-height":1,color:"#000","text-outline-color":"#000","text-outline-width":0,"text-outline-opacity":1,"text-opacity":1,"text-decoration":"none","text-transform":"none","text-wrap":"none","text-overflow-wrap":"whitespace","text-max-width":9999,"text-background-color":"#000","text-background-opacity":0,"text-background-shape":"rectangle","text-background-padding":0,"text-border-opacity":0,"text-border-width":0,"text-border-style":"solid","text-border-color":"#000","font-family":"Helvetica Neue, Helvetica, sans-serif","font-style":"normal","font-weight":"normal","font-size":16,"min-zoomed-font-size":0,"text-rotation":"none","source-text-rotation":"none","target-text-rotation":"none",visibility:"visible",display:"element",opacity:1,"z-compound-depth":"auto","z-index-compare":"auto","z-index":0,label:"","text-margin-x":0,"text-margin-y":0,"source-label":"","source-text-offset":0,"source-text-margin-x":0,"source-text-margin-y":0,"target-label":"","target-text-offset":0,"target-text-margin-x":0,"target-text-margin-y":0,"overlay-opacity":0,"overlay-color":"#000","overlay-padding":10,"transition-property":"none","transition-duration":0,"transition-delay":0,"transition-timing-function":"linear","background-blacken":0,"background-color":"#999","background-fill":"solid","background-opacity":1,"background-image":"none","background-image-crossorigin":"anonymous","background-image-opacity":1,"background-position-x":"50%","background-position-y":"50%","background-offset-x":0,"background-offset-y":0,"background-width-relative-to":"include-padding","background-height-relative-to":"include-padding","background-repeat":"no-repeat","background-fit":"none","background-clip":"node","background-width":"auto","background-height":"auto","border-color":"#000","border-opacity":1,"border-width":0,"border-style":"solid",height:30,width:30,shape:"ellipse","shape-polygon-points":"-1, -1,   1, -1,   1, 1,   -1, 1","bounds-expansion":0,"background-gradient-direction":"to-bottom","background-gradient-stop-colors":"#999","background-gradient-stop-positions":"0%",ghost:"no","ghost-offset-y":0,"ghost-offset-x":0,"ghost-opacity":0,padding:0,"padding-relative-to":"width",position:"origin","compound-sizing-wrt-labels":"include","min-width":0,"min-width-bias-left":0,"min-width-bias-right":0,"min-height":0,"min-height-bias-top":0,"min-height-bias-bottom":0},{"pie-size":"100%"},[{name:"pie-{{i}}-background-color",value:"black"},{name:"pie-{{i}}-background-size",value:"0%"},{name:"pie-{{i}}-background-opacity",value:1}].reduce((function(e,t){for(var n=1;n<=Ra.pieBackgroundN;n++){var r=t.name.replace("{{i}}",n),i=t.value;e[r]=i}return e}),{}),{"line-style":"solid","line-color":"#999","line-fill":"solid","line-cap":"butt","line-gradient-stop-colors":"#999","line-gradient-stop-positions":"0%","control-point-step-size":40,"control-point-weights":.5,"segment-weights":.5,"segment-distances":20,"taxi-turn":"50%","taxi-turn-min-distance":10,"taxi-direction":"auto","edge-distances":"intersection","curve-style":"haystack","haystack-radius":0,"arrow-scale":1,"loop-direction":"-45deg","loop-sweep":"-90deg","source-distance-from-node":0,"target-distance-from-node":0,"source-endpoint":"outside-to-node","target-endpoint":"outside-to-node","line-dash-pattern":[6,3],"line-dash-offset":0},[{name:"arrow-shape",value:"none"},{name:"arrow-color",value:"#999"},{name:"arrow-fill",value:"filled"}].reduce((function(e,t){return Ra.arrowPrefixes.forEach((function(n){var r=n+"-"+t.name,i=t.value;e[r]=i})),e}),{})),n={},r=0;r<this.properties.length;r++){var i=this.properties[r];if(!i.pointsTo){var a=i.name,o=t[a],l=this.parse(a,o);n[a]=l}}return e.defaultProperties=n,e.defaultProperties},Ra.addDefaultStylesheet=function(){this.selector(":parent").css({shape:"rectangle",padding:10,"background-color":"#eee","border-color":"#ccc","border-width":1}).selector("edge").css({width:3}).selector(":loop").css({"curve-style":"bezier"}).selector("edge:compound").css({"curve-style":"bezier","source-endpoint":"outside-to-line","target-endpoint":"outside-to-line"}).selector(":selected").css({"background-color":"#0169D9","line-color":"#0169D9","source-arrow-color":"#0169D9","target-arrow-color":"#0169D9","mid-source-arrow-color":"#0169D9","mid-target-arrow-color":"#0169D9"}).selector(":parent:selected").css({"background-color":"#CCE1F9","border-color":"#aec8e5"}).selector(":active").css({"overlay-color":"black","overlay-padding":10,"overlay-opacity":.25}),this.defaultLength=this.length};var Fa={parse:function(e,t,n,r){if(b(t))return this.parseImplWarn(e,t,n,r);var i,a=Z(e,""+t,n?"t":"f","mapping"===r||!0===r||!1===r||null==r?"dontcare":r),o=this.propCache=this.propCache||[];return(i=o[a])||(i=o[a]=this.parseImplWarn(e,t,n,r)),(n||"mapping"===r)&&(i=fe(i))&&(i.value=fe(i.value)),i},parseImplWarn:function(e,t,n,r){var i=this.parseImpl(e,t,n,r);return i||null==t||ce("The style property `".concat(e,": ").concat(t,"` is invalid")),i}};Fa.parseImpl=function(e,t,n,r){e=D(e);var i=this.properties[e],a=t,o=this.types;if(!i)return null;if(void 0===t)return null;i.alias&&(i=i.pointsTo,e=i.name);var l=m(t);l&&(t=t.trim());var u,s,c=i.type;if(!c)return null;if(n&&(""===t||null===t))return{name:e,value:t,bypass:!0,deleteBypass:!0};if(b(t))return{name:e,value:t,strValue:"fn",mapped:o.fn,bypass:n};if(!l||r||t.length<7||"a"!==t[1]);else{if(t.length>=7&&"d"===t[0]&&(u=new RegExp(o.data.regex).exec(t))){if(n)return!1;var f=o.data;return{name:e,value:u,strValue:""+t,mapped:f,field:u[1],bypass:n}}if(t.length>=10&&"m"===t[0]&&(s=new RegExp(o.mapData.regex).exec(t))){if(n)return!1;if(c.multiple)return!1;var d=o.mapData;if(!c.color&&!c.number)return!1;var h=this.parse(e,s[4]);if(!h||h.mapped)return!1;var p=this.parse(e,s[5]);if(!p||p.mapped)return!1;if(h.pfValue===p.pfValue||h.strValue===p.strValue)return ce("`"+e+": "+t+"` is not a valid mapper because the output range is zero; converting to `"+e+": "+h.strValue+"`"),this.parse(e,h.strValue);if(c.color){var v=h.value,g=p.value;if(!(v[0]!==g[0]||v[1]!==g[1]||v[2]!==g[2]||v[3]!==g[3]&&(null!=v[3]&&1!==v[3]||null!=g[3]&&1!==g[3])))return!1}return{name:e,value:s,strValue:""+t,mapped:d,field:s[1],fieldMin:parseFloat(s[2]),fieldMax:parseFloat(s[3]),valueMin:h.value,valueMax:p.value,bypass:n}}}if(c.multiple&&"multiple"!==r){var y;if(y=l?t.split(/\s+/):x(t)?t:[t],c.evenMultiple&&y.length%2!=0)return null;for(var w=[],k=[],S=[],T="",P=!1,C=0;C<y.length;C++){var _=this.parse(e,y[C],n,"multiple");P=P||m(_.value),w.push(_.value),S.push(null!=_.pfValue?_.pfValue:_.value),k.push(_.units),T+=(C>0?" ":"")+_.strValue}return c.validate&&!c.validate(w,k)?null:c.singleEnum&&P?1===w.length&&m(w[0])?{name:e,value:w[0],strValue:w[0],bypass:n}:null:{name:e,value:w,pfValue:S,strValue:T,bypass:n,units:k}}var M,O=function(){for(var r=0;r<c.enums.length;r++){if(c.enums[r]===t)return{name:e,value:t,strValue:""+t,bypass:n}}return null};if(c.number){var N,I="px";if(c.units&&(N=c.units),c.implicitUnits&&(I=c.implicitUnits),!c.unitless)if(l){var A="px|em"+(c.allowPercent?"|\\%":"");N&&(A=N);var L=t.match("^("+B+")("+A+")?$");L&&(t=L[1],N=L[2]||I)}else N&&!c.implicitUnits||(N=I);if(t=parseFloat(t),isNaN(t)&&void 0===c.enums)return null;if(isNaN(t)&&void 0!==c.enums)return t=a,O();if(c.integer&&(!E(M=t)||Math.floor(M)!==M))return null;if(void 0!==c.min&&(t<c.min||c.strictMin&&t===c.min)||void 0!==c.max&&(t>c.max||c.strictMax&&t===c.max))return null;var z={name:e,value:t,strValue:""+t+(N||""),units:N,bypass:n};return c.unitless||"px"!==N&&"em"!==N?z.pfValue=t:z.pfValue="px"!==N&&N?this.getEmSizeInPixels()*t:t,"ms"!==N&&"s"!==N||(z.pfValue="ms"===N?t:1e3*t),"deg"!==N&&"rad"!==N||(z.pfValue="rad"===N?t:He(t)),"%"===N&&(z.pfValue=t/100),z}if(c.propList){var R=[],j=""+t;if("none"===j);else{for(var V=j.split(/\s*,\s*|\s+/),q=0;q<V.length;q++){var W=V[q].trim();this.properties[W]?R.push(W):ce("`"+W+"` is not a valid property name")}if(0===R.length)return null}return{name:e,value:R,strValue:0===R.length?"none":R.join(" "),bypass:n}}if(c.color){var Y=F(t);return Y?{name:e,value:Y,pfValue:Y,strValue:"rgb("+Y[0]+","+Y[1]+","+Y[2]+")",bypass:n}:null}if(c.regex||c.regexes){if(c.enums){var U=O();if(U)return U}for(var X=c.regexes?c.regexes:[c.regex],H=0;H<X.length;H++){var G=new RegExp(X[H]).exec(t);if(G)return{name:e,value:c.singleRegexMatchValue?G[1]:G,strValue:""+t,bypass:n}}return null}return c.string?{name:e,value:""+t,strValue:""+t,bypass:n}:c.enums?O():null};var ja=function e(t){if(!(this instanceof e))return new e(t);C(t)?(this._private={cy:t,coreStyle:{}},this.length=0,this.resetToDefault()):ue("A style must have a core reference")},Va=ja.prototype;Va.instanceString=function(){return"style"},Va.clear=function(){for(var e=0;e<this.length;e++)this[e]=void 0;return this.length=0,this._private.newStyle=!0,this},Va.resetToDefault=function(){return this.clear(),this.addDefaultStylesheet(),this},Va.core=function(e){return this._private.coreStyle[e]||this.getDefaultProperty(e)},Va.selector=function(e){var t="core"===e?null:new Dr(e),n=this.length++;return this[n]={selector:t,properties:[],mappedProperties:[],index:n},this},Va.css=function(){var e=this,t=arguments;if(1===t.length)for(var n=t[0],r=0;r<e.properties.length;r++){var i=e.properties[r],a=n[i.name];void 0===a&&(a=n[I(i.name)]),void 0!==a&&this.cssRule(i.name,a)}else 2===t.length&&this.cssRule(t[0],t[1]);return this},Va.style=Va.css,Va.cssRule=function(e,t){var n=this.parse(e,t);if(n){var r=this.length-1;this[r].properties.push(n),this[r].properties[n.name]=n,n.name.match(/pie-(\d+)-background-size/)&&n.value&&(this._private.hasPie=!0),n.mapped&&this[r].mappedProperties.push(n),!this[r].selector&&(this._private.coreStyle[n.name]=n)}return this},Va.append=function(e){return _(e)?e.appendToStyle(this):x(e)?this.appendFromJson(e):m(e)&&this.appendFromString(e),this},ja.fromJson=function(e,t){var n=new ja(e);return n.fromJson(t),n},ja.fromString=function(e,t){return new ja(e).fromString(t)},[Da,Ia,Aa,La,Ba,za,Ra,Fa].forEach((function(e){R(Va,e)})),ja.types=Va.types,ja.properties=Va.properties,ja.propertyGroups=Va.propertyGroups,ja.propertyGroupNames=Va.propertyGroupNames,ja.propertyGroupKeys=Va.propertyGroupKeys;var qa={style:function(e){e&&this.setStyle(e).update();return this._private.style},setStyle:function(e){var t=this._private;return _(e)?t.style=e.generateStyle(this):x(e)?t.style=ja.fromJson(this,e):m(e)?t.style=ja.fromString(this,e):t.style=ja(this),t.style}},Wa={autolock:function(e){return void 0===e?this._private.autolock:(this._private.autolock=!!e,this)},autoungrabify:function(e){return void 0===e?this._private.autoungrabify:(this._private.autoungrabify=!!e,this)},autounselectify:function(e){return void 0===e?this._private.autounselectify:(this._private.autounselectify=!!e,this)},selectionType:function(e){var t=this._private;return null==t.selectionType&&(t.selectionType="single"),void 0===e?t.selectionType:("additive"!==e&&"single"!==e||(t.selectionType=e),this)},panningEnabled:function(e){return void 0===e?this._private.panningEnabled:(this._private.panningEnabled=!!e,this)},userPanningEnabled:function(e){return void 0===e?this._private.userPanningEnabled:(this._private.userPanningEnabled=!!e,this)},zoomingEnabled:function(e){return void 0===e?this._private.zoomingEnabled:(this._private.zoomingEnabled=!!e,this)},userZoomingEnabled:function(e){return void 0===e?this._private.userZoomingEnabled:(this._private.userZoomingEnabled=!!e,this)},boxSelectionEnabled:function(e){return void 0===e?this._private.boxSelectionEnabled:(this._private.boxSelectionEnabled=!!e,this)},pan:function(){var e,t,n,r,i,a=arguments,o=this._private.pan;switch(a.length){case 0:return o;case 1:if(m(a[0]))return o[e=a[0]];if(w(a[0])){if(!this._private.panningEnabled)return this;r=(n=a[0]).x,i=n.y,E(r)&&(o.x=r),E(i)&&(o.y=i),this.emit("pan viewport")}break;case 2:if(!this._private.panningEnabled)return this;e=a[0],t=a[1],"x"!==e&&"y"!==e||!E(t)||(o[e]=t),this.emit("pan viewport")}return this.notify("viewport"),this},panBy:function(e,t){var n,r,i,a,o,l=arguments,u=this._private.pan;if(!this._private.panningEnabled)return this;switch(l.length){case 1:w(e)&&(a=(i=l[0]).x,o=i.y,E(a)&&(u.x+=a),E(o)&&(u.y+=o),this.emit("pan viewport"));break;case 2:r=t,"x"!==(n=e)&&"y"!==n||!E(r)||(u[n]+=r),this.emit("pan viewport")}return this.notify("viewport"),this},fit:function(e,t){var n=this.getFitViewport(e,t);if(n){var r=this._private;r.zoom=n.zoom,r.pan=n.pan,this.emit("pan zoom viewport"),this.notify("viewport")}return this},getFitViewport:function(e,t){if(E(e)&&void 0===t&&(t=e,e=void 0),this._private.panningEnabled&&this._private.zoomingEnabled){var n,r;if(m(e)){var i=e;e=this.$(i)}else if(w(r=e)&&E(r.x1)&&E(r.x2)&&E(r.y1)&&E(r.y2)){var a=e;(n={x1:a.x1,y1:a.y1,x2:a.x2,y2:a.y2}).w=n.x2-n.x1,n.h=n.y2-n.y1}else S(e)||(e=this.mutableElements());if(!S(e)||!e.empty()){n=n||e.boundingBox();var o,l=this.width(),u=this.height();if(t=E(t)?t:0,!isNaN(l)&&!isNaN(u)&&l>0&&u>0&&!isNaN(n.w)&&!isNaN(n.h)&&n.w>0&&n.h>0)return{zoom:o=(o=(o=Math.min((l-2*t)/n.w,(u-2*t)/n.h))>this._private.maxZoom?this._private.maxZoom:o)<this._private.minZoom?this._private.minZoom:o,pan:{x:(l-o*(n.x1+n.x2))/2,y:(u-o*(n.y1+n.y2))/2}}}}},zoomRange:function(e,t){var n=this._private;if(null==t){var r=e;e=r.min,t=r.max}return E(e)&&E(t)&&e<=t?(n.minZoom=e,n.maxZoom=t):E(e)&&void 0===t&&e<=n.maxZoom?n.minZoom=e:E(t)&&void 0===e&&t>=n.minZoom&&(n.maxZoom=t),this},minZoom:function(e){return void 0===e?this._private.minZoom:this.zoomRange({min:e})},maxZoom:function(e){return void 0===e?this._private.maxZoom:this.zoomRange({max:e})},getZoomedViewport:function(e){var t,n,r=this._private,i=r.pan,a=r.zoom,o=!1;if(r.zoomingEnabled||(o=!0),E(e)?n=e:w(e)&&(n=e.level,null!=e.position?t=je(e.position,a,i):null!=e.renderedPosition&&(t=e.renderedPosition),null==t||r.panningEnabled||(o=!0)),n=(n=n>r.maxZoom?r.maxZoom:n)<r.minZoom?r.minZoom:n,o||!E(n)||n===a||null!=t&&(!E(t.x)||!E(t.y)))return null;if(null!=t){var l=i,u=a,s=n;return{zoomed:!0,panned:!0,zoom:s,pan:{x:-s/u*(t.x-l.x)+t.x,y:-s/u*(t.y-l.y)+t.y}}}return{zoomed:!0,panned:!1,zoom:n,pan:i}},zoom:function(e){if(void 0===e)return this._private.zoom;var t=this.getZoomedViewport(e),n=this._private;return null!=t&&t.zoomed?(n.zoom=t.zoom,t.panned&&(n.pan.x=t.pan.x,n.pan.y=t.pan.y),this.emit("zoom"+(t.panned?" pan":"")+" viewport"),this.notify("viewport"),this):this},viewport:function(e){var t=this._private,n=!0,r=!0,i=[],a=!1,o=!1;if(!e)return this;if(E(e.zoom)||(n=!1),w(e.pan)||(r=!1),!n&&!r)return this;if(n){var l=e.zoom;l<t.minZoom||l>t.maxZoom||!t.zoomingEnabled?a=!0:(t.zoom=l,i.push("zoom"))}if(r&&(!a||!e.cancelOnFailedZoom)&&t.panningEnabled){var u=e.pan;E(u.x)&&(t.pan.x=u.x,o=!1),E(u.y)&&(t.pan.y=u.y,o=!1),o||i.push("pan")}return i.length>0&&(i.push("viewport"),this.emit(i.join(" ")),this.notify("viewport")),this},center:function(e){var t=this.getCenterPan(e);return t&&(this._private.pan=t,this.emit("pan viewport"),this.notify("viewport")),this},getCenterPan:function(e,t){if(this._private.panningEnabled){if(m(e)){var n=e;e=this.mutableElements().filter(n)}else S(e)||(e=this.mutableElements());if(0!==e.length){var r=e.boundingBox(),i=this.width(),a=this.height();return{x:(i-(t=void 0===t?this._private.zoom:t)*(r.x1+r.x2))/2,y:(a-t*(r.y1+r.y2))/2}}}},reset:function(){return this._private.panningEnabled&&this._private.zoomingEnabled?(this.viewport({pan:{x:0,y:0},zoom:1}),this):this},invalidateSize:function(){this._private.sizeCache=null},size:function(){var e,t,n=this._private,r=n.container;return n.sizeCache=n.sizeCache||(r?(e=f.getComputedStyle(r),t=function(t){return parseFloat(e.getPropertyValue(t))},{width:r.clientWidth-t("padding-left")-t("padding-right"),height:r.clientHeight-t("padding-top")-t("padding-bottom")}):{width:1,height:1})},width:function(){return this.size().width},height:function(){return this.size().height},extent:function(){var e=this._private.pan,t=this._private.zoom,n=this.renderedExtent(),r={x1:(n.x1-e.x)/t,x2:(n.x2-e.x)/t,y1:(n.y1-e.y)/t,y2:(n.y2-e.y)/t};return r.w=r.x2-r.x1,r.h=r.y2-r.y1,r},renderedExtent:function(){var e=this.width(),t=this.height();return{x1:0,y1:0,x2:e,y2:t,w:e,h:t}}};Wa.centre=Wa.center,Wa.autolockNodes=Wa.autolock,Wa.autoungrabifyNodes=Wa.autoungrabify;var Ya={data:Kn.data({field:"data",bindingEvent:"data",allowBinding:!0,allowSetting:!0,settingEvent:"data",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0}),removeData:Kn.removeData({field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!0}),scratch:Kn.data({field:"scratch",bindingEvent:"scratch",allowBinding:!0,allowSetting:!0,settingEvent:"scratch",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0}),removeScratch:Kn.removeData({field:"scratch",event:"scratch",triggerFnName:"trigger",triggerEvent:!0})};Ya.attr=Ya.data,Ya.removeAttr=Ya.removeData;var Ua=function(e){var t=this,n=(e=R({},e)).container;n&&!k(n)&&k(n[0])&&(n=n[0]);var r=n?n._cyreg:null;(r=r||{})&&r.cy&&(r.cy.destroy(),r={});var i=r.readies=r.readies||[];n&&(n._cyreg=r),r.cy=t;var a=void 0!==f&&void 0!==n&&!e.headless,o=e;o.layout=R({name:a?"grid":"null"},o.layout),o.renderer=R({name:a?"canvas":"null"},o.renderer);var l=function(e,t,n){return void 0!==t?t:void 0!==n?n:e},u=this._private={container:n,ready:!1,options:o,elements:new sa(this),listeners:[],aniEles:new sa(this),data:{},scratch:{},layout:null,renderer:null,destroyed:!1,notificationsEnabled:!0,minZoom:1e-50,maxZoom:1e50,zoomingEnabled:l(!0,o.zoomingEnabled),userZoomingEnabled:l(!0,o.userZoomingEnabled),panningEnabled:l(!0,o.panningEnabled),userPanningEnabled:l(!0,o.userPanningEnabled),boxSelectionEnabled:l(!0,o.boxSelectionEnabled),autolock:l(!1,o.autolock,o.autolockNodes),autoungrabify:l(!1,o.autoungrabify,o.autoungrabifyNodes),autounselectify:l(!1,o.autounselectify),styleEnabled:void 0===o.styleEnabled?a:o.styleEnabled,zoom:E(o.zoom)?o.zoom:1,pan:{x:w(o.pan)&&E(o.pan.x)?o.pan.x:0,y:w(o.pan)&&E(o.pan.y)?o.pan.y:0},animation:{current:[],queue:[]},hasCompoundNodes:!1};this.createEmitter(),this.selectionType(o.selectionType),this.zoomRange({min:o.minZoom,max:o.maxZoom});u.styleEnabled&&t.setStyle([]);var s=R({},o,o.renderer);t.initRenderer(s);!function(e,t){if(e.some(O))return Xn.all(e).then(t);t(e)}([o.style,o.elements],(function(e){var n=e[0],a=e[1];u.styleEnabled&&t.style().append(n),function(e,n,r){t.notifications(!1);var i=t.mutableElements();i.length>0&&i.remove(),null!=e&&(w(e)||x(e))&&t.add(e),t.one("layoutready",(function(e){t.notifications(!0),t.emit(e),t.one("load",n),t.emitAndNotify("load")})).one("layoutstop",(function(){t.one("done",r),t.emit("done")}));var a=R({},t._private.options.layout);a.eles=t.elements(),t.layout(a).run()}(a,(function(){t.startAnimationLoop(),u.ready=!0,b(o.ready)&&t.on("ready",o.ready);for(var e=0;e<i.length;e++){var n=i[e];t.on("ready",n)}r&&(r.readies=[]),t.emit("ready")}),o.done)}))},Xa=Ua.prototype;R(Xa,{instanceString:function(){return"core"},isReady:function(){return this._private.ready},destroyed:function(){return this._private.destroyed},ready:function(e){return this.isReady()?this.emitter().emit("ready",[],e):this.on("ready",e),this},destroy:function(){var e=this;if(!e.destroyed())return e.stopAnimationLoop(),e.destroyRenderer(),this.emit("destroy"),e._private.destroyed=!0,e},hasElementWithId:function(e){return this._private.elements.hasElementWithId(e)},getElementById:function(e){return this._private.elements.getElementById(e)},hasCompoundNodes:function(){return this._private.hasCompoundNodes},headless:function(){return this._private.renderer.isHeadless()},styleEnabled:function(){return this._private.styleEnabled},addToPool:function(e){return this._private.elements.merge(e),this},removeFromPool:function(e){return this._private.elements.unmerge(e),this},container:function(){return this._private.container||null},mount:function(e){if(null!=e){var t=this,n=t._private,r=n.options;return!k(e)&&k(e[0])&&(e=e[0]),t.stopAnimationLoop(),t.destroyRenderer(),n.container=e,n.styleEnabled=!0,t.invalidateSize(),t.initRenderer(R({},r,r.renderer,{name:"null"===r.renderer.name?"canvas":r.renderer.name})),t.startAnimationLoop(),t.style(r.style),t.emit("mount"),t}},unmount:function(){var e=this;return e.stopAnimationLoop(),e.destroyRenderer(),e.initRenderer({name:"null"}),e.emit("unmount"),e},options:function(){return fe(this._private.options)},json:function(e){var t=this,n=t._private,r=t.mutableElements();if(w(e)){if(t.startBatch(),e.elements){var i={},a=function(e,n){for(var r=[],a=[],o=0;o<e.length;o++){var l=e[o],u=""+l.data.id,s=t.getElementById(u);i[u]=!0,0!==s.length?a.push({ele:s,json:l}):n?(l.group=n,r.push(l)):r.push(l)}t.add(r);for(var c=0;c<a.length;c++){var f=a[c],d=f.ele,h=f.json;d.json(h)}};if(x(e.elements))a(e.elements);else for(var o=["nodes","edges"],l=0;l<o.length;l++){var u=o[l],s=e.elements[u];x(s)&&a(s,u)}var c=t.collection();r.filter((function(e){return!i[e.id()]})).forEach((function(e){e.isParent()?c.merge(e):e.remove()})),c.forEach((function(e){return e.children().move({parent:null})})),c.forEach((function(e){return function(e){return t.getElementById(e.id())}(e).remove()}))}e.style&&t.style(e.style),null!=e.zoom&&e.zoom!==n.zoom&&t.zoom(e.zoom),e.pan&&(e.pan.x===n.pan.x&&e.pan.y===n.pan.y||t.pan(e.pan)),e.data&&t.data(e.data);for(var f=["minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","panningEnabled","userPanningEnabled","boxSelectionEnabled","autolock","autoungrabify","autounselectify"],d=0;d<f.length;d++){var h=f[d];null!=e[h]&&t[h](e[h])}return t.endBatch(),this}var p={};!!e?p.elements=this.elements().map((function(e){return e.json()})):(p.elements={},r.forEach((function(e){var t=e.group();p.elements[t]||(p.elements[t]=[]),p.elements[t].push(e.json())}))),this._private.styleEnabled&&(p.style=t.style().json()),p.data=fe(t.data());var v=n.options;return p.zoomingEnabled=n.zoomingEnabled,p.userZoomingEnabled=n.userZoomingEnabled,p.zoom=n.zoom,p.minZoom=n.minZoom,p.maxZoom=n.maxZoom,p.panningEnabled=n.panningEnabled,p.userPanningEnabled=n.userPanningEnabled,p.pan=fe(n.pan),p.boxSelectionEnabled=n.boxSelectionEnabled,p.renderer=fe(v.renderer),p.hideEdgesOnViewport=v.hideEdgesOnViewport,p.textureOnViewport=v.textureOnViewport,p.wheelSensitivity=v.wheelSensitivity,p.motionBlur=v.motionBlur,p}}),Xa.$id=Xa.getElementById,[fa,Ea,Ta,Pa,Ca,_a,Oa,Na,qa,Wa,Ya].forEach((function(e){R(Xa,e)}));var Ha={fit:!0,directed:!1,padding:30,circle:!1,grid:!1,spacingFactor:1.75,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,roots:void 0,maximal:!1,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}},Ga=function(e){return e.scratch("breadthfirst")},Ka=function(e,t){return e.scratch("breadthfirst",t)};function $a(e){this.options=R({},Ha,e)}$a.prototype.run=function(){var e,t=this.options,n=t,r=t.cy,i=n.eles,a=i.nodes().filter((function(e){return!e.isParent()})),o=i,l=n.directed,u=n.maximal||n.maximalAdjustments>0,s=it(n.boundingBox?n.boundingBox:{x1:0,y1:0,w:r.width(),h:r.height()});if(S(n.roots))e=n.roots;else if(x(n.roots)){for(var c=[],f=0;f<n.roots.length;f++){var d=n.roots[f],h=r.getElementById(d);c.push(h)}e=r.collection(c)}else if(m(n.roots))e=r.$(n.roots);else if(l)e=a.roots();else{var p=i.components();e=r.collection();for(var v=function(t){var n=p[t],r=n.maxDegree(!1),i=n.filter((function(e){return e.degree(!1)===r}));e=e.add(i)},g=0;g<p.length;g++)v(g)}var y=[],b={},w=function(e,t){null==y[t]&&(y[t]=[]);var n=y[t].length;y[t].push(e),Ka(e,{index:n,depth:t})};o.bfs({roots:e,directed:n.directed,visit:function(e,t,n,r,i){var a=e[0],o=a.id();w(a,i),b[o]=!0}});for(var E=[],k=0;k<a.length;k++){var T=a[k];b[T.id()]||E.push(T)}var P=function(e){for(var t=y[e],n=0;n<t.length;n++){var r=t[n];null!=r?Ka(r,{depth:e,index:n}):(t.splice(n,1),n--)}},C=function(){for(var e=0;e<y.length;e++)P(e)},_=function(e,t){for(var n=Ga(e),r=e.incomers().filter((function(e){return e.isNode()&&i.has(e)})),a=-1,o=e.id(),l=0;l<r.length;l++){var u=r[l],s=Ga(u);a=Math.max(a,s.depth)}return n.depth<=a&&(t[o]?null:(function(e,t){var n=Ga(e),r=n.depth,i=n.index;y[r][i]=null,w(e,t)}(e,a+1),t[o]=!0,!0))};if(l&&u){var M=[],O={},N=function(e){return M.push(e)};for(a.forEach((function(e){return M.push(e)}));M.length>0;){var D=M.shift(),I=_(D,O);if(I)D.outgoers().filter((function(e){return e.isNode()&&i.has(e)})).forEach(N);else if(null===I){ce("Detected double maximal shift for node `"+D.id()+"`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.");break}}}C();var A=0;if(n.avoidOverlap)for(var L=0;L<a.length;L++){var B=a[L].layoutDimensions(n),R=B.w,F=B.h;A=Math.max(A,R,F)}for(var j={},V=function(e){if(j[e.id()])return j[e.id()];for(var t=Ga(e).depth,n=e.neighborhood(),r=0,i=0,o=0;o<n.length;o++){var l=n[o];if(!l.isEdge()&&!l.isParent()&&a.has(l)){var u=Ga(l),s=u.index,c=u.depth;if(null!=s&&null!=c){var f=y[c].length;c<t&&(r+=s/(f-1),i++)}}}return r/=i=Math.max(1,i),0===i&&(r=0),j[e.id()]=r,r},q=function(e,t){var n=V(e)-V(t);return 0===n?z(e.id(),t.id()):n},W=0;W<y.length;W++)y[W].sort(q),P(W);for(var Y=[],U=0;U<E.length;U++)Y.push(E[U]);y.unshift(Y),C();for(var X=0,H=0;H<y.length;H++)X=Math.max(y[H].length,X);var G=s.x1+s.w/2,K=s.x1+s.h/2,$=y.reduce((function(e,t){return Math.max(e,t.length)}),0);return a.layoutPositions(this,n,(function(e){var t=Ga(e),r=t.depth,i=t.index,a=y[r].length,o=Math.max(s.w/((n.grid?$:a)+1),A),l=Math.max(s.h/(y.length+1),A),u=Math.min(s.w/2/y.length,s.h/2/y.length);if(u=Math.max(u,A),n.circle){var c=u*r+u-(y.length>0&&y[0].length<=3?u/2:0),f=2*Math.PI/y[r].length*i;return 0===r&&1===y[0].length&&(c=1),{x:G+c*Math.cos(f),y:K+c*Math.sin(f)}}return{x:G+(i+1-(a+1)/2)*o,y:(r+1)*l}})),this};var Qa={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,spacingFactor:void 0,radius:void 0,startAngle:1.5*Math.PI,sweep:void 0,clockwise:!0,sort:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}};function Za(e){this.options=R({},Qa,e)}Za.prototype.run=function(){var e=this.options,t=e,n=e.cy,r=t.eles,i=void 0!==t.counterclockwise?!t.counterclockwise:t.clockwise,a=r.nodes().not(":parent");t.sort&&(a=a.sort(t.sort));for(var o,l=it(t.boundingBox?t.boundingBox:{x1:0,y1:0,w:n.width(),h:n.height()}),u=l.x1+l.w/2,s=l.y1+l.h/2,c=(void 0===t.sweep?2*Math.PI-2*Math.PI/a.length:t.sweep)/Math.max(1,a.length-1),f=0,d=0;d<a.length;d++){var h=a[d].layoutDimensions(t),p=h.w,v=h.h;f=Math.max(f,p,v)}if(o=E(t.radius)?t.radius:a.length<=1?0:Math.min(l.h,l.w)/2-f,a.length>1&&t.avoidOverlap){f*=1.75;var g=Math.cos(c)-Math.cos(0),y=Math.sin(c)-Math.sin(0),m=Math.sqrt(f*f/(g*g+y*y));o=Math.max(m,o)}return a.layoutPositions(this,t,(function(e,n){var r=t.startAngle+n*c*(i?1:-1),a=o*Math.cos(r),l=o*Math.sin(r);return{x:u+a,y:s+l}})),this};var Ja,eo={fit:!0,padding:30,startAngle:1.5*Math.PI,sweep:void 0,clockwise:!0,equidistant:!1,minNodeSpacing:10,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,height:void 0,width:void 0,spacingFactor:void 0,concentric:function(e){return e.degree()},levelWidth:function(e){return e.maxDegree()/4},animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}};function to(e){this.options=R({},eo,e)}to.prototype.run=function(){for(var e=this.options,t=e,n=void 0!==t.counterclockwise?!t.counterclockwise:t.clockwise,r=e.cy,i=t.eles.nodes().not(":parent"),a=it(t.boundingBox?t.boundingBox:{x1:0,y1:0,w:r.width(),h:r.height()}),o=a.x1+a.w/2,l=a.y1+a.h/2,u=[],s=0,c=0;c<i.length;c++){var f,d=i[c];f=t.concentric(d),u.push({value:f,node:d}),d._private.scratch.concentric=f}i.updateStyle();for(var h=0;h<i.length;h++){var p=i[h].layoutDimensions(t);s=Math.max(s,p.w,p.h)}u.sort((function(e,t){return t.value-e.value}));for(var v=t.levelWidth(i),g=[[]],y=g[0],m=0;m<u.length;m++){var b=u[m];if(y.length>0)Math.abs(y[0].value-b.value)>=v&&(y=[],g.push(y));y.push(b)}var x=s+t.minNodeSpacing;if(!t.avoidOverlap){var w=g.length>0&&g[0].length>1,E=(Math.min(a.w,a.h)/2-x)/(g.length+w?1:0);x=Math.min(x,E)}for(var k=0,S=0;S<g.length;S++){var T=g[S],P=void 0===t.sweep?2*Math.PI-2*Math.PI/T.length:t.sweep,C=T.dTheta=P/Math.max(1,T.length-1);if(T.length>1&&t.avoidOverlap){var _=Math.cos(C)-Math.cos(0),M=Math.sin(C)-Math.sin(0),O=Math.sqrt(x*x/(_*_+M*M));k=Math.max(O,k)}T.r=k,k+=x}if(t.equidistant){for(var N=0,D=0,I=0;I<g.length;I++){var A=g[I].r-D;N=Math.max(N,A)}D=0;for(var L=0;L<g.length;L++){var B=g[L];0===L&&(D=B.r),B.r=D,D+=N}}for(var z={},R=0;R<g.length;R++)for(var F=g[R],j=F.dTheta,V=F.r,q=0;q<F.length;q++){var W=F[q],Y=t.startAngle+(n?1:-1)*j*q,U={x:o+V*Math.cos(Y),y:l+V*Math.sin(Y)};z[W.node.id()]=U}return i.layoutPositions(this,t,(function(e){var t=e.id();return z[t]})),this};var no={ready:function(){},stop:function(){},animate:!0,animationEasing:void 0,animationDuration:void 0,animateFilter:function(e,t){return!0},animationThreshold:250,refresh:20,fit:!0,padding:30,boundingBox:void 0,nodeDimensionsIncludeLabels:!1,randomize:!1,componentSpacing:40,nodeRepulsion:function(e){return 2048},nodeOverlap:4,idealEdgeLength:function(e){return 32},edgeElasticity:function(e){return 32},nestingFactor:1.2,gravity:1,numIter:1e3,initialTemp:1e3,coolingFactor:.99,minTemp:1};function ro(e){this.options=R({},no,e),this.options.layout=this}ro.prototype.run=function(){var e=this.options,t=e.cy,n=this;n.stopped=!1,!0!==e.animate&&!1!==e.animate||n.emit({type:"layoutstart",layout:n}),Ja=!0===e.debug;var r=io(t,n,e);Ja&&(void 0)(r),e.randomize&&lo(r,t);var i=H(),a=function(){so(r,t,e),!0===e.fit&&t.fit(e.padding)},o=function(t){return!(n.stopped||t>=e.numIter)&&(co(r,e,t),r.temperature=r.temperature*e.coolingFactor,!(r.temperature<e.minTemp))},l=function(){if(!0===e.animate||!1===e.animate)a(),n.one("layoutstop",e.stop),n.emit({type:"layoutstop",layout:n});else{var t=e.eles.nodes(),i=uo(r,e,t);t.layoutPositions(n,e,i)}},u=0,s=!0;if(!0===e.animate){!function t(){for(var n=0;s&&n<e.refresh;)s=o(u),u++,n++;s?(H()-i>=e.animationThreshold&&a(),X(t)):(ko(r,e),l())}()}else{for(;s;)s=o(u),u++;ko(r,e),l()}return this},ro.prototype.stop=function(){return this.stopped=!0,this.thread&&this.thread.stop(),this.emit("layoutstop"),this},ro.prototype.destroy=function(){return this.thread&&this.thread.stop(),this};var io=function(e,t,n){for(var r=n.eles.edges(),i=n.eles.nodes(),a={isCompound:e.hasCompoundNodes(),layoutNodes:[],idToIndex:{},nodeSize:i.size(),graphSet:[],indexToGraph:[],layoutEdges:[],edgeSize:r.size(),temperature:n.initialTemp,clientWidth:e.width(),clientHeight:e.width(),boundingBox:it(n.boundingBox?n.boundingBox:{x1:0,y1:0,w:e.width(),h:e.height()})},o=n.eles.components(),l={},u=0;u<o.length;u++)for(var s=o[u],c=0;c<s.length;c++){l[s[c].id()]=u}for(u=0;u<a.nodeSize;u++){var f=(g=i[u]).layoutDimensions(n);(I={}).isLocked=g.locked(),I.id=g.data("id"),I.parentId=g.data("parent"),I.cmptId=l[g.id()],I.children=[],I.positionX=g.position("x"),I.positionY=g.position("y"),I.offsetX=0,I.offsetY=0,I.height=f.w,I.width=f.h,I.maxX=I.positionX+I.width/2,I.minX=I.positionX-I.width/2,I.maxY=I.positionY+I.height/2,I.minY=I.positionY-I.height/2,I.padLeft=parseFloat(g.style("padding")),I.padRight=parseFloat(g.style("padding")),I.padTop=parseFloat(g.style("padding")),I.padBottom=parseFloat(g.style("padding")),I.nodeRepulsion=b(n.nodeRepulsion)?n.nodeRepulsion(g):n.nodeRepulsion,a.layoutNodes.push(I),a.idToIndex[I.id]=u}var d=[],h=0,p=-1,v=[];for(u=0;u<a.nodeSize;u++){var g,y=(g=a.layoutNodes[u]).parentId;null!=y?a.layoutNodes[a.idToIndex[y]].children.push(g.id):(d[++p]=g.id,v.push(g.id))}for(a.graphSet.push(v);h<=p;){var m=d[h++],x=a.idToIndex[m],w=a.layoutNodes[x].children;if(w.length>0){a.graphSet.push(w);for(u=0;u<w.length;u++)d[++p]=w[u]}}for(u=0;u<a.graphSet.length;u++){var E=a.graphSet[u];for(c=0;c<E.length;c++){var k=a.idToIndex[E[c]];a.indexToGraph[k]=u}}for(u=0;u<a.edgeSize;u++){var S=r[u],T={};T.id=S.data("id"),T.sourceId=S.data("source"),T.targetId=S.data("target");var P=b(n.idealEdgeLength)?n.idealEdgeLength(S):n.idealEdgeLength,C=b(n.edgeElasticity)?n.edgeElasticity(S):n.edgeElasticity,_=a.idToIndex[T.sourceId],M=a.idToIndex[T.targetId];if(a.indexToGraph[_]!=a.indexToGraph[M]){for(var O=ao(T.sourceId,T.targetId,a),N=a.graphSet[O],D=0,I=a.layoutNodes[_];-1===N.indexOf(I.id);)I=a.layoutNodes[a.idToIndex[I.parentId]],D++;for(I=a.layoutNodes[M];-1===N.indexOf(I.id);)I=a.layoutNodes[a.idToIndex[I.parentId]],D++;P*=D*n.nestingFactor}T.idealLength=P,T.elasticity=C,a.layoutEdges.push(T)}return a},ao=function(e,t,n){var r=oo(e,t,0,n);return 2>r.count?0:r.graph},oo=function e(t,n,r,i){var a=i.graphSet[r];if(-1<a.indexOf(t)&&-1<a.indexOf(n))return{count:2,graph:r};for(var o=0,l=0;l<a.length;l++){var u=a[l],s=i.idToIndex[u],c=i.layoutNodes[s].children;if(0!==c.length){var f=e(t,n,i.indexToGraph[i.idToIndex[c[0]]],i);if(0!==f.count){if(1!==f.count)return f;if(2===++o)break}}}return{count:o,graph:r}},lo=function(e,t){for(var n=e.clientWidth,r=e.clientHeight,i=0;i<e.nodeSize;i++){var a=e.layoutNodes[i];0!==a.children.length||a.isLocked||(a.positionX=Math.random()*n,a.positionY=Math.random()*r)}},uo=function(e,t,n){var r=e.boundingBox,i={x1:1/0,x2:-1/0,y1:1/0,y2:-1/0};return t.boundingBox&&(n.forEach((function(t){var n=e.layoutNodes[e.idToIndex[t.data("id")]];i.x1=Math.min(i.x1,n.positionX),i.x2=Math.max(i.x2,n.positionX),i.y1=Math.min(i.y1,n.positionY),i.y2=Math.max(i.y2,n.positionY)})),i.w=i.x2-i.x1,i.h=i.y2-i.y1),function(n,a){var o=e.layoutNodes[e.idToIndex[n.data("id")]];if(t.boundingBox){var l=(o.positionX-i.x1)/i.w,u=(o.positionY-i.y1)/i.h;return{x:r.x1+l*r.w,y:r.y1+u*r.h}}return{x:o.positionX,y:o.positionY}}},so=function(e,t,n){var r=n.layout,i=n.eles.nodes(),a=uo(e,n,i);i.positions(a),!0!==e.ready&&(e.ready=!0,r.one("layoutready",n.ready),r.emit({type:"layoutready",layout:this}))},co=function(e,t,n){fo(e,t),yo(e,t),mo(e,t),bo(e,t),xo(e,t)},fo=function(e,t){for(var n=0;n<e.graphSet.length;n++)for(var r=e.graphSet[n],i=r.length,a=0;a<i;a++)for(var o=e.layoutNodes[e.idToIndex[r[a]]],l=a+1;l<i;l++){var u=e.layoutNodes[e.idToIndex[r[l]]];po(o,u,e,t)}},ho=function(e){return-e+2*e*Math.random()},po=function(e,t,n,r){if(e.cmptId===t.cmptId||n.isCompound){var i=t.positionX-e.positionX,a=t.positionY-e.positionY;0===i&&0===a&&(i=ho(1),a=ho(1));var o=vo(e,t,i,a);if(o>0)var l=(s=r.nodeOverlap*o)*i/(v=Math.sqrt(i*i+a*a)),u=s*a/v;else{var s,c=go(e,i,a),f=go(t,-1*i,-1*a),d=f.x-c.x,h=f.y-c.y,p=d*d+h*h,v=Math.sqrt(p);l=(s=(e.nodeRepulsion+t.nodeRepulsion)/p)*d/v,u=s*h/v}e.isLocked||(e.offsetX-=l,e.offsetY-=u),t.isLocked||(t.offsetX+=l,t.offsetY+=u)}},vo=function(e,t,n,r){if(n>0)var i=e.maxX-t.minX;else i=t.maxX-e.minX;if(r>0)var a=e.maxY-t.minY;else a=t.maxY-e.minY;return i>=0&&a>=0?Math.sqrt(i*i+a*a):0},go=function(e,t,n){var r=e.positionX,i=e.positionY,a=e.height||1,o=e.width||1,l=n/t,u=a/o,s={};return 0===t&&0<n||0===t&&0>n?(s.x=r,s.y=i+a/2,s):0<t&&-1*u<=l&&l<=u?(s.x=r+o/2,s.y=i+o*n/2/t,s):0>t&&-1*u<=l&&l<=u?(s.x=r-o/2,s.y=i-o*n/2/t,s):0<n&&(l<=-1*u||l>=u)?(s.x=r+a*t/2/n,s.y=i+a/2,s):0>n&&(l<=-1*u||l>=u)?(s.x=r-a*t/2/n,s.y=i-a/2,s):s},yo=function(e,t){for(var n=0;n<e.edgeSize;n++){var r=e.layoutEdges[n],i=e.idToIndex[r.sourceId],a=e.layoutNodes[i],o=e.idToIndex[r.targetId],l=e.layoutNodes[o],u=l.positionX-a.positionX,s=l.positionY-a.positionY;if(0!==u||0!==s){var c=go(a,u,s),f=go(l,-1*u,-1*s),d=f.x-c.x,h=f.y-c.y,p=Math.sqrt(d*d+h*h),v=Math.pow(r.idealLength-p,2)/r.elasticity;if(0!==p)var g=v*d/p,y=v*h/p;else g=0,y=0;a.isLocked||(a.offsetX+=g,a.offsetY+=y),l.isLocked||(l.offsetX-=g,l.offsetY-=y)}}},mo=function(e,t){for(var n=0;n<e.graphSet.length;n++){var r=e.graphSet[n],i=r.length;if(0===n)var a=e.clientHeight/2,o=e.clientWidth/2;else{var l=e.layoutNodes[e.idToIndex[r[0]]],u=e.layoutNodes[e.idToIndex[l.parentId]];a=u.positionX,o=u.positionY}for(var s=0;s<i;s++){var c=e.layoutNodes[e.idToIndex[r[s]]];if(!c.isLocked){var f=a-c.positionX,d=o-c.positionY,h=Math.sqrt(f*f+d*d);if(h>1){var p=t.gravity*f/h,v=t.gravity*d/h;c.offsetX+=p,c.offsetY+=v}}}}},bo=function(e,t){var n=[],r=0,i=-1;for(n.push.apply(n,e.graphSet[0]),i+=e.graphSet[0].length;r<=i;){var a=n[r++],o=e.idToIndex[a],l=e.layoutNodes[o],u=l.children;if(0<u.length&&!l.isLocked){for(var s=l.offsetX,c=l.offsetY,f=0;f<u.length;f++){var d=e.layoutNodes[e.idToIndex[u[f]]];d.offsetX+=s,d.offsetY+=c,n[++i]=u[f]}l.offsetX=0,l.offsetY=0}}},xo=function(e,t){for(var n=0;n<e.nodeSize;n++){0<(i=e.layoutNodes[n]).children.length&&(i.maxX=void 0,i.minX=void 0,i.maxY=void 0,i.minY=void 0)}for(n=0;n<e.nodeSize;n++){if(!(0<(i=e.layoutNodes[n]).children.length||i.isLocked)){var r=wo(i.offsetX,i.offsetY,e.temperature);i.positionX+=r.x,i.positionY+=r.y,i.offsetX=0,i.offsetY=0,i.minX=i.positionX-i.width,i.maxX=i.positionX+i.width,i.minY=i.positionY-i.height,i.maxY=i.positionY+i.height,Eo(i,e)}}for(n=0;n<e.nodeSize;n++){var i;0<(i=e.layoutNodes[n]).children.length&&!i.isLocked&&(i.positionX=(i.maxX+i.minX)/2,i.positionY=(i.maxY+i.minY)/2,i.width=i.maxX-i.minX,i.height=i.maxY-i.minY)}},wo=function(e,t,n){var r=Math.sqrt(e*e+t*t);if(r>n)var i={x:n*e/r,y:n*t/r};else i={x:e,y:t};return i},Eo=function e(t,n){var r=t.parentId;if(null!=r){var i=n.layoutNodes[n.idToIndex[r]],a=!1;return(null==i.maxX||t.maxX+i.padRight>i.maxX)&&(i.maxX=t.maxX+i.padRight,a=!0),(null==i.minX||t.minX-i.padLeft<i.minX)&&(i.minX=t.minX-i.padLeft,a=!0),(null==i.maxY||t.maxY+i.padBottom>i.maxY)&&(i.maxY=t.maxY+i.padBottom,a=!0),(null==i.minY||t.minY-i.padTop<i.minY)&&(i.minY=t.minY-i.padTop,a=!0),a?e(i,n):void 0}},ko=function(e,t){for(var n=e.layoutNodes,r=[],i=0;i<n.length;i++){var a=n[i],o=a.cmptId;(r[o]=r[o]||[]).push(a)}var l=0;for(i=0;i<r.length;i++){if(v=r[i]){v.x1=1/0,v.x2=-1/0,v.y1=1/0,v.y2=-1/0;for(var u=0;u<v.length;u++){var s=v[u];v.x1=Math.min(v.x1,s.positionX-s.width/2),v.x2=Math.max(v.x2,s.positionX+s.width/2),v.y1=Math.min(v.y1,s.positionY-s.height/2),v.y2=Math.max(v.y2,s.positionY+s.height/2)}v.w=v.x2-v.x1,v.h=v.y2-v.y1,l+=v.w*v.h}}r.sort((function(e,t){return t.w*t.h-e.w*e.h}));var c=0,f=0,d=0,h=0,p=Math.sqrt(l)*e.clientWidth/e.clientHeight;for(i=0;i<r.length;i++){var v;if(v=r[i]){for(u=0;u<v.length;u++){(s=v[u]).isLocked||(s.positionX+=c-v.x1,s.positionY+=f-v.y1)}c+=v.w+t.componentSpacing,d+=v.w+t.componentSpacing,h=Math.max(h,v.h),d>p&&(f+=h+t.componentSpacing,c=0,d=0,h=0)}}},So={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,avoidOverlapPadding:10,nodeDimensionsIncludeLabels:!1,spacingFactor:void 0,condense:!1,rows:void 0,cols:void 0,position:function(e){},sort:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}};function To(e){this.options=R({},So,e)}To.prototype.run=function(){var e=this.options,t=e,n=e.cy,r=t.eles.nodes().not(":parent");t.sort&&(r=r.sort(t.sort));var i=it(t.boundingBox?t.boundingBox:{x1:0,y1:0,w:n.width(),h:n.height()});if(0===i.h||0===i.w)r.layoutPositions(this,t,(function(e){return{x:i.x1,y:i.y1}}));else{var a=r.size(),o=Math.sqrt(a*i.h/i.w),l=Math.round(o),u=Math.round(i.w/i.h*o),s=function(e){if(null==e)return Math.min(l,u);Math.min(l,u)==l?l=e:u=e},c=function(e){if(null==e)return Math.max(l,u);Math.max(l,u)==l?l=e:u=e},f=t.rows,d=null!=t.cols?t.cols:t.columns;if(null!=f&&null!=d)l=f,u=d;else if(null!=f&&null==d)l=f,u=Math.ceil(a/l);else if(null==f&&null!=d)u=d,l=Math.ceil(a/u);else if(u*l>a){var h=s(),p=c();(h-1)*p>=a?s(h-1):(p-1)*h>=a&&c(p-1)}else for(;u*l<a;){var v=s(),g=c();(g+1)*v>=a?c(g+1):s(v+1)}var y=i.w/u,m=i.h/l;if(t.condense&&(y=0,m=0),t.avoidOverlap)for(var b=0;b<r.length;b++){var x=r[b],w=x._private.position;null!=w.x&&null!=w.y||(w.x=0,w.y=0);var E=x.layoutDimensions(t),k=t.avoidOverlapPadding,S=E.w+k,T=E.h+k;y=Math.max(y,S),m=Math.max(m,T)}for(var P={},C=function(e,t){return!!P["c-"+e+"-"+t]},_=function(e,t){P["c-"+e+"-"+t]=!0},M=0,O=0,N=function(){++O>=u&&(O=0,M++)},D={},I=0;I<r.length;I++){var A=r[I],L=t.position(A);if(L&&(void 0!==L.row||void 0!==L.col)){var B={row:L.row,col:L.col};if(void 0===B.col)for(B.col=0;C(B.row,B.col);)B.col++;else if(void 0===B.row)for(B.row=0;C(B.row,B.col);)B.row++;D[A.id()]=B,_(B.row,B.col)}}r.layoutPositions(this,t,(function(e,t){var n,r;if(e.locked()||e.isParent())return!1;var a=D[e.id()];if(a)n=a.col*y+y/2+i.x1,r=a.row*m+m/2+i.y1;else{for(;C(M,O);)N();n=O*y+y/2+i.x1,r=M*m+m/2+i.y1,_(M,O),N()}return{x:n,y:r}}))}return this};var Po={ready:function(){},stop:function(){}};function Co(e){this.options=R({},Po,e)}Co.prototype.run=function(){var e=this.options,t=e.eles;e.cy;return this.emit("layoutstart"),t.nodes().positions((function(){return{x:0,y:0}})),this.one("layoutready",e.ready),this.emit("layoutready"),this.one("layoutstop",e.stop),this.emit("layoutstop"),this},Co.prototype.stop=function(){return this};var _o={positions:void 0,zoom:void 0,pan:void 0,fit:!0,padding:30,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}};function Mo(e){this.options=R({},_o,e)}Mo.prototype.run=function(){var e=this.options,t=e.eles.nodes(),n=b(e.positions);return t.layoutPositions(this,e,(function(t,r){var i=function(t){if(null==e.positions)return Fe(t.position());if(n)return e.positions(t);var r=e.positions[t._private.data.id];return null==r?null:r}(t);return!t.locked()&&null!=i&&i})),this};var Oo={fit:!0,padding:30,boundingBox:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function(e,t){return!0},ready:void 0,stop:void 0,transform:function(e,t){return t}};function No(e){this.options=R({},Oo,e)}No.prototype.run=function(){var e=this.options,t=e.cy,n=e.eles.nodes().not(":parent"),r=it(e.boundingBox?e.boundingBox:{x1:0,y1:0,w:t.width(),h:t.height()});return n.layoutPositions(this,e,(function(e,t){return{x:r.x1+Math.round(Math.random()*r.w),y:r.y1+Math.round(Math.random()*r.h)}})),this};var Do=[{name:"breadthfirst",impl:$a},{name:"circle",impl:Za},{name:"concentric",impl:to},{name:"cose",impl:ro},{name:"grid",impl:To},{name:"null",impl:Co},{name:"preset",impl:Mo},{name:"random",impl:No}];function Io(e){this.options=e,this.notifications=0}var Ao=function(){};Io.prototype={recalculateRenderedStyle:Ao,notify:function(){this.notifications++},init:Ao,isHeadless:function(){return!0}};var Lo={arrowShapeWidth:.3,registerArrowShapes:function(){var e=this.arrowShapes={},t=this,n=function(e,t,n,r,i,a,o){var l=i.x-n/2-o,u=i.x+n/2+o,s=i.y-n/2-o,c=i.y+n/2+o;return l<=e&&e<=u&&s<=t&&t<=c},r=function(e,t,n,r,i){var a=e*Math.cos(r)-t*Math.sin(r),o=(e*Math.sin(r)+t*Math.cos(r))*n;return{x:a*n+i.x,y:o+i.y}},i=function(e,t,n,i){for(var a=[],o=0;o<e.length;o+=2){var l=e[o],u=e[o+1];a.push(r(l,u,t,n,i))}return a},a=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r.x,r.y)}return t},o=function(e){return e.pstyle("width").pfValue*e.pstyle("arrow-scale").pfValue*2},l=function(r,l){m(l)&&(l=e[l]),e[r]=R({name:r,points:[-.15,-.3,.15,-.3,.15,.3,-.15,.3],collide:function(e,t,n,r,o,l){var u=a(i(this.points,n+2*l,r,o));return kt(e,t,u)},roughCollide:n,draw:function(e,n,r,a){var o=i(this.points,n,r,a);t.arrowShapeImpl("polygon")(e,o)},spacing:function(e){return 0},gap:o},l)};l("none",{collide:ae,roughCollide:ae,draw:le,spacing:oe,gap:oe}),l("triangle",{points:[-.15,-.3,0,0,.15,-.3]}),l("arrow","triangle"),l("triangle-backcurve",{points:e.triangle.points,controlPoint:[0,-.15],roughCollide:n,draw:function(e,n,a,o,l){var u=i(this.points,n,a,o),s=this.controlPoint,c=r(s[0],s[1],n,a,o);t.arrowShapeImpl(this.name)(e,u,c)},gap:function(e){return.8*o(e)}}),l("triangle-tee",{points:[0,0,.15,-.3,-.15,-.3,0,0],pointsTee:[-.15,-.4,-.15,-.5,.15,-.5,.15,-.4],collide:function(e,t,n,r,o,l,u){var s=a(i(this.points,n+2*u,r,o)),c=a(i(this.pointsTee,n+2*u,r,o));return kt(e,t,s)||kt(e,t,c)},draw:function(e,n,r,a,o){var l=i(this.points,n,r,a),u=i(this.pointsTee,n,r,a);t.arrowShapeImpl(this.name)(e,l,u)}}),l("triangle-cross",{points:[0,0,.15,-.3,-.15,-.3,0,0],baseCrossLinePts:[-.15,-.4,-.15,-.4,.15,-.4,.15,-.4],crossLinePts:function(e,t){var n=this.baseCrossLinePts.slice(),r=t/e;return n[3]=n[3]-r,n[5]=n[5]-r,n},collide:function(e,t,n,r,o,l,u){var s=a(i(this.points,n+2*u,r,o)),c=a(i(this.crossLinePts(n,l),n+2*u,r,o));return kt(e,t,s)||kt(e,t,c)},draw:function(e,n,r,a,o){var l=i(this.points,n,r,a),u=i(this.crossLinePts(n,o),n,r,a);t.arrowShapeImpl(this.name)(e,l,u)}}),l("vee",{points:[-.15,-.3,0,0,.15,-.3,0,-.15],gap:function(e){return.525*o(e)}}),l("circle",{radius:.15,collide:function(e,t,n,r,i,a,o){var l=i;return Math.pow(l.x-e,2)+Math.pow(l.y-t,2)<=Math.pow((n+2*o)*this.radius,2)},draw:function(e,n,r,i,a){t.arrowShapeImpl(this.name)(e,i.x,i.y,this.radius*n)},spacing:function(e){return t.getArrowWidth(e.pstyle("width").pfValue,e.pstyle("arrow-scale").value)*this.radius}}),l("tee",{points:[-.15,0,-.15,-.1,.15,-.1,.15,0],spacing:function(e){return 1},gap:function(e){return 1}}),l("square",{points:[-.15,0,.15,0,.15,-.3,-.15,-.3]}),l("diamond",{points:[-.15,-.15,0,-.3,.15,-.15,0,0],gap:function(e){return e.pstyle("width").pfValue*e.pstyle("arrow-scale").value}}),l("chevron",{points:[0,0,-.15,-.15,-.1,-.2,0,-.1,.1,-.2,.15,-.15],gap:function(e){return.95*e.pstyle("width").pfValue*e.pstyle("arrow-scale").value}})}},Bo={projectIntoViewport:function(e,t){var n=this.cy,r=this.findContainerClientCoords(),i=r[0],a=r[1],o=r[4],l=n.pan(),u=n.zoom();return[((e-i)/o-l.x)/u,((t-a)/o-l.y)/u]},findContainerClientCoords:function(){if(this.containerBB)return this.containerBB;var e=this.container,t=e.getBoundingClientRect(),n=f.getComputedStyle(e),r=function(e){return parseFloat(n.getPropertyValue(e))},i=r("padding-left"),a=r("padding-right"),o=r("padding-top"),l=r("padding-bottom"),u=r("border-left-width"),s=r("border-right-width"),c=r("border-top-width"),d=(r("border-bottom-width"),e.clientWidth),h=e.clientHeight,p=i+a,v=o+l,g=u+s,y=t.width/(d+g),m=d-p,b=h-v,x=t.left+i+u,w=t.top+o+c;return this.containerBB=[x,w,m,b,y]},invalidateContainerClientCoordsCache:function(){this.containerBB=null},findNearestElement:function(e,t,n,r){return this.findNearestElements(e,t,n,r)[0]},findNearestElements:function(e,t,n,r){var i,a,o=this,l=this,u=l.getCachedZSortedEles(),s=[],c=l.cy.zoom(),f=l.cy.hasCompoundNodes(),d=(r?24:8)/c,h=(r?8:2)/c,p=(r?8:2)/c,v=1/0;function g(e,t){if(e.isNode()){if(a)return;a=e,s.push(e)}if(e.isEdge()&&(null==t||t<v))if(i){if(i.pstyle("z-compound-depth").value===e.pstyle("z-compound-depth").value&&i.pstyle("z-compound-depth").value===e.pstyle("z-compound-depth").value)for(var n=0;n<s.length;n++)if(s[n].isEdge()){s[n]=e,i=e,v=null!=t?t:v;break}}else s.push(e),i=e,v=null!=t?t:v}function y(n){var r=n.outerWidth()+2*h,i=n.outerHeight()+2*h,a=r/2,u=i/2,s=n.position();if(s.x-a<=e&&e<=s.x+a&&s.y-u<=t&&t<=s.y+u&&l.nodeShapes[o.getNodeShape(n)].checkPoint(e,t,0,r,i,s.x,s.y))return g(n,0),!0}function m(n){var r,i=n._private,a=i.rscratch,u=n.pstyle("width").pfValue,c=n.pstyle("arrow-scale").value,h=u/2+d,p=h*h,v=2*h,m=i.source,b=i.target;if("segments"===a.edgeType||"straight"===a.edgeType||"haystack"===a.edgeType){for(var x=a.allpts,w=0;w+3<x.length;w+=2)if(yt(e,t,x[w],x[w+1],x[w+2],x[w+3],v)&&p>(r=Et(e,t,x[w],x[w+1],x[w+2],x[w+3])))return g(n,r),!0}else if("bezier"===a.edgeType||"multibezier"===a.edgeType||"self"===a.edgeType||"compound"===a.edgeType)for(x=a.allpts,w=0;w+5<a.allpts.length;w+=4)if(mt(e,t,x[w],x[w+1],x[w+2],x[w+3],x[w+4],x[w+5],v)&&p>(r=wt(e,t,x[w],x[w+1],x[w+2],x[w+3],x[w+4],x[w+5])))return g(n,r),!0;m=m||i.source,b=b||i.target;var E=o.getArrowWidth(u,c),k=[{name:"source",x:a.arrowStartX,y:a.arrowStartY,angle:a.srcArrowAngle},{name:"target",x:a.arrowEndX,y:a.arrowEndY,angle:a.tgtArrowAngle},{name:"mid-source",x:a.midX,y:a.midY,angle:a.midsrcArrowAngle},{name:"mid-target",x:a.midX,y:a.midY,angle:a.midtgtArrowAngle}];for(w=0;w<k.length;w++){var S=k[w],T=l.arrowShapes[n.pstyle(S.name+"-arrow-shape").value],P=n.pstyle("width").pfValue;if(T.roughCollide(e,t,E,S.angle,{x:S.x,y:S.y},P,d)&&T.collide(e,t,E,S.angle,{x:S.x,y:S.y},P,d))return g(n),!0}f&&s.length>0&&(y(m),y(b))}function b(e,t,n){return me(e,t,n)}function x(n,r){var i,a=n._private,o=p;i=r?r+"-":"";var l=a.labelBounds[r||"main"],u=n.pstyle(i+"label").value;if("yes"===n.pstyle("text-events").strValue&&u){var s=a.rstyle,c=b(s,"labelX",r),f=b(s,"labelY",r),d=b(a.rscratch,"labelAngle",r),h=l.x1-o,v=l.x2+o,y=l.y1-o,m=l.y2+o;if(d){var x=Math.cos(d),w=Math.sin(d),E=function(e,t){return{x:(e-=c)*x-(t-=f)*w+c,y:e*w+t*x+f}},k=E(h,y),S=E(h,m),T=E(v,y),P=E(v,m),C=[k.x,k.y,T.x,T.y,P.x,P.y,S.x,S.y];if(kt(e,t,C))return g(n),!0}else if(ht(l,e,t))return g(n),!0}}n&&(u=u.interactive);for(var w=u.length-1;w>=0;w--){var E=u[w];E.isNode()?y(E)||x(E):m(E)||x(E)||x(E,"source")||x(E,"target")}return s},getAllInBox:function(e,t,n,r){for(var i=this.getCachedZSortedEles().interactive,a=[],o=Math.min(e,n),l=Math.max(e,n),u=Math.min(t,r),s=Math.max(t,r),c=it({x1:e=o,y1:t=u,x2:n=l,y2:r=s}),f=0;f<i.length;f++){var d=i[f];if(d.isNode()){var h=d,p=h.boundingBox({includeNodes:!0,includeEdges:!1,includeLabels:!1});dt(c,p)&&!vt(p,c)&&a.push(h)}else{var v=d,g=v._private,y=g.rscratch;if(null!=y.startX&&null!=y.startY&&!ht(c,y.startX,y.startY))continue;if(null!=y.endX&&null!=y.endY&&!ht(c,y.endX,y.endY))continue;if("bezier"===y.edgeType||"multibezier"===y.edgeType||"self"===y.edgeType||"compound"===y.edgeType||"segments"===y.edgeType||"haystack"===y.edgeType){for(var m=g.rstyle.bezierPts||g.rstyle.linePts||g.rstyle.haystackPts,b=!0,x=0;x<m.length;x++)if(!pt(c,m[x])){b=!1;break}b&&a.push(v)}else"haystack"!==y.edgeType&&"straight"!==y.edgeType||a.push(v)}}return a}},zo={calculateArrowAngles:function(e){var t,n,r,i,a,o,l=e._private.rscratch,u="haystack"===l.edgeType,s="bezier"===l.edgeType,c="multibezier"===l.edgeType,f="segments"===l.edgeType,d="compound"===l.edgeType,h="self"===l.edgeType;if(u?(r=l.haystackPts[0],i=l.haystackPts[1],a=l.haystackPts[2],o=l.haystackPts[3]):(r=l.arrowStartX,i=l.arrowStartY,a=l.arrowEndX,o=l.arrowEndY),v=l.midX,g=l.midY,f)t=r-l.segpts[0],n=i-l.segpts[1];else if(c||d||h||s){var p=l.allpts;t=r-et(p[0],p[2],p[4],.1),n=i-et(p[1],p[3],p[5],.1)}else t=r-v,n=i-g;l.srcArrowAngle=Ge(t,n);var v=l.midX,g=l.midY;if(u&&(v=(r+a)/2,g=(i+o)/2),t=a-r,n=o-i,f)if((p=l.allpts).length/2%2==0){var y=(m=p.length/2)-2;t=p[m]-p[y],n=p[m+1]-p[y+1]}else{y=(m=p.length/2-1)-2;var m,b=m+2;t=p[m]-p[y],n=p[m+1]-p[y+1]}else if(c||d||h){var x,w,E,k,p=l.allpts;if(l.ctrlpts.length/2%2==0){var S=(T=(P=p.length/2-1)+2)+2;x=et(p[P],p[T],p[S],0),w=et(p[P+1],p[T+1],p[S+1],0),E=et(p[P],p[T],p[S],1e-4),k=et(p[P+1],p[T+1],p[S+1],1e-4)}else{var T,P;S=(T=p.length/2-1)+2;x=et(p[P=T-2],p[T],p[S],.4999),w=et(p[P+1],p[T+1],p[S+1],.4999),E=et(p[P],p[T],p[S],.5),k=et(p[P+1],p[T+1],p[S+1],.5)}t=E-x,n=k-w}(l.midtgtArrowAngle=Ge(t,n),l.midDispX=t,l.midDispY=n,t*=-1,n*=-1,f)&&((p=l.allpts).length/2%2==0||(t=-(p[b=(m=p.length/2-1)+2]-p[m]),n=-(p[b+1]-p[m+1])));if(l.midsrcArrowAngle=Ge(t,n),f)t=a-l.segpts[l.segpts.length-2],n=o-l.segpts[l.segpts.length-1];else if(c||d||h||s){var C=(p=l.allpts).length;t=a-et(p[C-6],p[C-4],p[C-2],.9),n=o-et(p[C-5],p[C-3],p[C-1],.9)}else t=a-v,n=o-g;l.tgtArrowAngle=Ge(t,n)}};zo.getArrowWidth=zo.getArrowHeight=function(e,t){var n=this.arrowWidthCache=this.arrowWidthCache||{},r=n[e+", "+t];return r||(r=Math.max(Math.pow(13.37*e,.9),29)*t,n[e+", "+t]=r,r)};var Ro={};function Fo(e){var t=[];if(null!=e){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];t.push({x:r,y:i})}return t}}Ro.findHaystackPoints=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=n._private,i=r.rscratch;if(!i.haystack){var a=2*Math.random()*Math.PI;i.source={x:Math.cos(a),y:Math.sin(a)},a=2*Math.random()*Math.PI,i.target={x:Math.cos(a),y:Math.sin(a)}}var o=r.source,l=r.target,u=o.position(),s=l.position(),c=o.width(),f=l.width(),d=o.height(),h=l.height(),p=n.pstyle("haystack-radius").value/2;i.haystackPts=i.allpts=[i.source.x*c*p+u.x,i.source.y*d*p+u.y,i.target.x*f*p+s.x,i.target.y*h*p+s.y],i.midX=(i.allpts[0]+i.allpts[2])/2,i.midY=(i.allpts[1]+i.allpts[3])/2,i.edgeType="haystack",i.haystack=!0,this.storeEdgeProjections(n),this.calculateArrowAngles(n),this.recalculateEdgeLabelProjections(n),this.calculateLabelAngles(n)}},Ro.findSegmentsPoints=function(e,t){var n=e._private.rscratch,r=t.posPts,i=t.intersectionPts,a=t.vectorNormInverse,o=e.pstyle("edge-distances").value,l=e.pstyle("segment-weights"),u=e.pstyle("segment-distances"),s=Math.min(l.pfValue.length,u.pfValue.length);n.edgeType="segments",n.segpts=[];for(var c=0;c<s;c++){var f=l.pfValue[c],d=u.pfValue[c],h=1-f,p=f,v="node-position"===o?r:i,g={x:v.x1*h+v.x2*p,y:v.y1*h+v.y2*p};n.segpts.push(g.x+a.x*d,g.y+a.y*d)}},Ro.findLoopPoints=function(e,t,n,r){var i=e._private.rscratch,a=t.dirCounts,o=t.srcPos,l=e.pstyle("control-point-distances"),u=l?l.pfValue[0]:void 0,s=e.pstyle("loop-direction").pfValue,c=e.pstyle("loop-sweep").pfValue,f=e.pstyle("control-point-step-size").pfValue;i.edgeType="self";var d=n,h=f;r&&(d=0,h=u);var p=s-Math.PI/2,v=p-c/2,g=p+c/2,y=String(s+"_"+c);d=void 0===a[y]?a[y]=0:++a[y],i.ctrlpts=[o.x+1.4*Math.cos(v)*h*(d/3+1),o.y+1.4*Math.sin(v)*h*(d/3+1),o.x+1.4*Math.cos(g)*h*(d/3+1),o.y+1.4*Math.sin(g)*h*(d/3+1)]},Ro.findCompoundLoopPoints=function(e,t,n,r){var i=e._private.rscratch;i.edgeType="compound";var a=t.srcPos,o=t.tgtPos,l=t.srcW,u=t.srcH,s=t.tgtW,c=t.tgtH,f=e.pstyle("control-point-step-size").pfValue,d=e.pstyle("control-point-distances"),h=d?d.pfValue[0]:void 0,p=n,v=f;r&&(p=0,v=h);var g={x:a.x-l/2,y:a.y-u/2},y={x:o.x-s/2,y:o.y-c/2},m={x:Math.min(g.x,y.x),y:Math.min(g.y,y.y)},b=Math.max(.5,Math.log(.01*l)),x=Math.max(.5,Math.log(.01*s));i.ctrlpts=[m.x,m.y-(1+Math.pow(50,1.12)/100)*v*(p/3+1)*b,m.x-(1+Math.pow(50,1.12)/100)*v*(p/3+1)*x,m.y]},Ro.findStraightEdgePoints=function(e){e._private.rscratch.edgeType="straight"},Ro.findBezierPoints=function(e,t,n,r,i){var a=e._private.rscratch,o=t.vectorNormInverse,l=t.posPts,u=t.intersectionPts,s=e.pstyle("edge-distances").value,c=e.pstyle("control-point-step-size").pfValue,f=e.pstyle("control-point-distances"),d=e.pstyle("control-point-weights"),h=f&&d?Math.min(f.value.length,d.value.length):1,p=f?f.pfValue[0]:void 0,v=d.value[0],g=r;a.edgeType=g?"multibezier":"bezier",a.ctrlpts=[];for(var y=0;y<h;y++){var m=(.5-t.eles.length/2+n)*c*(i?-1:1),b=void 0,x=$e(m);g&&(p=f?f.pfValue[y]:c,v=d.value[y]);var w=void 0!==(b=r?p:void 0!==p?x*p:void 0)?b:m,E=1-v,k=v,S="node-position"===s?l:u,T={x:S.x1*E+S.x2*k,y:S.y1*E+S.y2*k};a.ctrlpts.push(T.x+o.x*w,T.y+o.y*w)}},Ro.findTaxiPoints=function(e,t){var n=e._private.rscratch;n.edgeType="segments";var r=t.posPts,i=t.srcW,a=t.srcH,o=t.tgtW,l=t.tgtH,u="node-position"!==e.pstyle("edge-distances").value,s=e.pstyle("taxi-direction").value,c=s,f=e.pstyle("taxi-turn"),d=f.pfValue,h=e.pstyle("taxi-turn-min-distance").pfValue,p="%"===f.units,v=u?(i+o)/2:0,g=u?(a+l)/2:0,y=r.x2-r.x1,m=r.y2-r.y1,b=function(e,t){return e>0?Math.max(e-t,0):Math.min(e+t,0)},x=b(y,v),w=b(m,g),E=!1;"auto"===s?s=Math.abs(x)>Math.abs(w)?"horizontal":"vertical":"upward"===s||"downward"===s?(s="vertical",E=!0):"leftward"!==s&&"rightward"!==s||(s="horizontal",E=!0);var k="vertical"===s,S=k?w:x,T=k?m:y,P=$e(T),C=!1;E&&p||!("downward"===c&&T<0||"upward"===c&&T>0||"leftward"===c&&T>0||"rightward"===c&&T<0)||(S=(P*=-1)*Math.abs(S),C=!0);var _=p?d*S:d*P,M=function(e){return Math.abs(e)<h||Math.abs(e)>=Math.abs(S)},O=M(_),N=M(S-_);if((O||N)&&!C)if(k){var D=Math.abs(T)<=a/2,I=Math.abs(y)<=o/2;if(D){var A=(r.x1+r.x2)/2,L=r.y1,B=r.y2;n.segpts=[A,L,A,B]}else if(I){var z=(r.y1+r.y2)/2,R=r.x1,F=r.x2;n.segpts=[R,z,F,z]}else n.segpts=[r.x1,r.y2]}else{var j=Math.abs(T)<=i/2,V=Math.abs(m)<=l/2;if(j){var q=(r.y1+r.y2)/2,W=r.x1,Y=r.x2;n.segpts=[W,q,Y,q]}else if(V){var U=(r.x1+r.x2)/2,X=r.y1,H=r.y2;n.segpts=[U,X,U,H]}else n.segpts=[r.x2,r.y1]}else if(k){var G=r.y1+_+(u?a/2*P:0),K=r.x1,$=r.x2;n.segpts=[K,G,$,G]}else{var Q=r.x1+_+(u?i/2*P:0),Z=r.y1,J=r.y2;n.segpts=[Q,Z,Q,J]}},Ro.tryToCorrectInvalidPoints=function(e,t){var n=e._private.rscratch;if("bezier"===n.edgeType){var r=t.srcPos,i=t.tgtPos,a=t.srcW,o=t.srcH,l=t.tgtW,u=t.tgtH,s=t.srcShape,c=t.tgtShape,f=!E(n.startX)||!E(n.startY),d=!E(n.arrowStartX)||!E(n.arrowStartY),h=!E(n.endX)||!E(n.endY),p=!E(n.arrowEndX)||!E(n.arrowEndY),v=3*(this.getArrowWidth(e.pstyle("width").pfValue,e.pstyle("arrow-scale").value)*this.arrowShapeWidth),g=Qe({x:n.ctrlpts[0],y:n.ctrlpts[1]},{x:n.startX,y:n.startY}),y=g<v,m=Qe({x:n.ctrlpts[0],y:n.ctrlpts[1]},{x:n.endX,y:n.endY}),b=m<v,x=!1;if(f||d||y){x=!0;var w={x:n.ctrlpts[0]-r.x,y:n.ctrlpts[1]-r.y},k=Math.sqrt(w.x*w.x+w.y*w.y),S={x:w.x/k,y:w.y/k},T=Math.max(a,o),P={x:n.ctrlpts[0]+2*S.x*T,y:n.ctrlpts[1]+2*S.y*T},C=s.intersectLine(r.x,r.y,a,o,P.x,P.y,0);y?(n.ctrlpts[0]=n.ctrlpts[0]+S.x*(v-g),n.ctrlpts[1]=n.ctrlpts[1]+S.y*(v-g)):(n.ctrlpts[0]=C[0]+S.x*v,n.ctrlpts[1]=C[1]+S.y*v)}if(h||p||b){x=!0;var _={x:n.ctrlpts[0]-i.x,y:n.ctrlpts[1]-i.y},M=Math.sqrt(_.x*_.x+_.y*_.y),O={x:_.x/M,y:_.y/M},N=Math.max(a,o),D={x:n.ctrlpts[0]+2*O.x*N,y:n.ctrlpts[1]+2*O.y*N},I=c.intersectLine(i.x,i.y,l,u,D.x,D.y,0);b?(n.ctrlpts[0]=n.ctrlpts[0]+O.x*(v-m),n.ctrlpts[1]=n.ctrlpts[1]+O.y*(v-m)):(n.ctrlpts[0]=I[0]+O.x*v,n.ctrlpts[1]=I[1]+O.y*v)}x&&this.findEndpoints(e)}},Ro.storeAllpts=function(e){var t=e._private.rscratch;if("multibezier"===t.edgeType||"bezier"===t.edgeType||"self"===t.edgeType||"compound"===t.edgeType){t.allpts=[],t.allpts.push(t.startX,t.startY);for(var n=0;n+1<t.ctrlpts.length;n+=2)t.allpts.push(t.ctrlpts[n],t.ctrlpts[n+1]),n+3<t.ctrlpts.length&&t.allpts.push((t.ctrlpts[n]+t.ctrlpts[n+2])/2,(t.ctrlpts[n+1]+t.ctrlpts[n+3])/2);var r;t.allpts.push(t.endX,t.endY),t.ctrlpts.length/2%2==0?(r=t.allpts.length/2-1,t.midX=t.allpts[r],t.midY=t.allpts[r+1]):(r=t.allpts.length/2-3,.5,t.midX=et(t.allpts[r],t.allpts[r+2],t.allpts[r+4],.5),t.midY=et(t.allpts[r+1],t.allpts[r+3],t.allpts[r+5],.5))}else if("straight"===t.edgeType)t.allpts=[t.startX,t.startY,t.endX,t.endY],t.midX=(t.startX+t.endX+t.arrowStartX+t.arrowEndX)/4,t.midY=(t.startY+t.endY+t.arrowStartY+t.arrowEndY)/4;else if("segments"===t.edgeType)if(t.allpts=[],t.allpts.push(t.startX,t.startY),t.allpts.push.apply(t.allpts,t.segpts),t.allpts.push(t.endX,t.endY),t.segpts.length%4==0){var i=t.segpts.length/2,a=i-2;t.midX=(t.segpts[a]+t.segpts[i])/2,t.midY=(t.segpts[a+1]+t.segpts[i+1])/2}else{var o=t.segpts.length/2-1;t.midX=t.segpts[o],t.midY=t.segpts[o+1]}},Ro.checkForInvalidEdgeWarning=function(e){var t=e[0]._private.rscratch;t.nodesOverlap||E(t.startX)&&E(t.startY)&&E(t.endX)&&E(t.endY)?t.loggedErr=!1:t.loggedErr||(t.loggedErr=!0,ce("Edge `"+e.id()+"` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap."))},Ro.findEdgeControlPoints=function(e){var t=this;if(e&&0!==e.length){for(var n=this,r=n.cy.hasCompoundNodes(),i={map:new xe,get:function(e){var t=this.map.get(e[0]);return null!=t?t.get(e[1]):null},set:function(e,t){var n=this.map.get(e[0]);null==n&&(n=new xe,this.map.set(e[0],n)),n.set(e[1],t)}},a=[],o=[],l=0;l<e.length;l++){var u=e[l],s=u._private,c=u.pstyle("curve-style").value;if(!u.removed()&&u.takesUpSpace())if("haystack"!==c){var f="unbundled-bezier"===c||"segments"===c||"straight"===c||"taxi"===c,d="unbundled-bezier"===c||"bezier"===c,h=s.source,p=s.target,v=[h.poolIndex(),p.poolIndex()].sort(),g=i.get(v);null==g&&(g={eles:[]},i.set(v,g),a.push(v)),g.eles.push(u),f&&(g.hasUnbundled=!0),d&&(g.hasBezier=!0)}else o.push(u)}for(var y=function(e){var o=a[e],l=i.get(o),u=void 0;if(!l.hasUnbundled){var s=l.eles[0].parallelEdges().filter((function(e){return e.isBundledBezier()}));ye(l.eles),s.forEach((function(e){return l.eles.push(e)})),l.eles.sort((function(e,t){return e.poolIndex()-t.poolIndex()}))}var c=l.eles[0],f=c.source(),d=c.target();if(f.poolIndex()>d.poolIndex()){var h=f;f=d,d=h}var p=l.srcPos=f.position(),v=l.tgtPos=d.position(),g=l.srcW=f.outerWidth(),y=l.srcH=f.outerHeight(),m=l.tgtW=d.outerWidth(),b=l.tgtH=d.outerHeight(),x=l.srcShape=n.nodeShapes[t.getNodeShape(f)],w=l.tgtShape=n.nodeShapes[t.getNodeShape(d)];l.dirCounts={north:0,west:0,south:0,east:0,northwest:0,southwest:0,northeast:0,southeast:0};for(var k=0;k<l.eles.length;k++){var S=l.eles[k],T=S[0]._private.rscratch,P=S.pstyle("curve-style").value,C="unbundled-bezier"===P||"segments"===P||"taxi"===P,_=!f.same(S.source());if(!l.calculatedIntersection&&f!==d&&(l.hasBezier||l.hasUnbundled)){l.calculatedIntersection=!0;var M=x.intersectLine(p.x,p.y,g,y,v.x,v.y,0),O=l.srcIntn=M,N=w.intersectLine(v.x,v.y,m,b,p.x,p.y,0),D=l.tgtIntn=N,I=l.intersectionPts={x1:M[0],x2:N[0],y1:M[1],y2:N[1]},A=l.posPts={x1:p.x,x2:v.x,y1:p.y,y2:v.y},L=N[1]-M[1],B=N[0]-M[0],z=Math.sqrt(B*B+L*L),R=l.vector={x:B,y:L},F=l.vectorNorm={x:R.x/z,y:R.y/z},j={x:-F.y,y:F.x};l.nodesOverlap=!E(z)||w.checkPoint(M[0],M[1],0,m,b,v.x,v.y)||x.checkPoint(N[0],N[1],0,g,y,p.x,p.y),l.vectorNormInverse=j,u={nodesOverlap:l.nodesOverlap,dirCounts:l.dirCounts,calculatedIntersection:!0,hasBezier:l.hasBezier,hasUnbundled:l.hasUnbundled,eles:l.eles,srcPos:v,tgtPos:p,srcW:m,srcH:b,tgtW:g,tgtH:y,srcIntn:D,tgtIntn:O,srcShape:w,tgtShape:x,posPts:{x1:A.x2,y1:A.y2,x2:A.x1,y2:A.y1},intersectionPts:{x1:I.x2,y1:I.y2,x2:I.x1,y2:I.y1},vector:{x:-R.x,y:-R.y},vectorNorm:{x:-F.x,y:-F.y},vectorNormInverse:{x:-j.x,y:-j.y}}}var V=_?u:l;T.nodesOverlap=V.nodesOverlap,T.srcIntn=V.srcIntn,T.tgtIntn=V.tgtIntn,r&&(f.isParent()||f.isChild()||d.isParent()||d.isChild())&&(f.parents().anySame(d)||d.parents().anySame(f)||f.same(d))?t.findCompoundLoopPoints(S,V,k,C):f===d?t.findLoopPoints(S,V,k,C):"segments"===P?t.findSegmentsPoints(S,V):"taxi"===P?t.findTaxiPoints(S,V):"straight"===P||!C&&l.eles.length%2==1&&k===Math.floor(l.eles.length/2)?t.findStraightEdgePoints(S):t.findBezierPoints(S,V,k,C,_),t.findEndpoints(S),t.tryToCorrectInvalidPoints(S,V),t.checkForInvalidEdgeWarning(S),t.storeAllpts(S),t.storeEdgeProjections(S),t.calculateArrowAngles(S),t.recalculateEdgeLabelProjections(S),t.calculateLabelAngles(S)}},m=0;m<a.length;m++)y(m);this.findHaystackPoints(o)}},Ro.getSegmentPoints=function(e){var t=e[0]._private.rscratch;if("segments"===t.edgeType)return this.recalculateRenderedStyle(e),Fo(t.segpts)},Ro.getControlPoints=function(e){var t=e[0]._private.rscratch,n=t.edgeType;if("bezier"===n||"multibezier"===n||"self"===n||"compound"===n)return this.recalculateRenderedStyle(e),Fo(t.ctrlpts)},Ro.getEdgeMidpoint=function(e){var t=e[0]._private.rscratch;return this.recalculateRenderedStyle(e),{x:t.midX,y:t.midY}};var jo={manualEndptToPx:function(e,t){var n=e.position(),r=e.outerWidth(),i=e.outerHeight();if(2===t.value.length){var a=[t.pfValue[0],t.pfValue[1]];return"%"===t.units[0]&&(a[0]=a[0]*r),"%"===t.units[1]&&(a[1]=a[1]*i),a[0]+=n.x,a[1]+=n.y,a}var o=t.pfValue[0];o=-Math.PI/2+o;var l=2*Math.max(r,i),u=[n.x+Math.cos(o)*l,n.y+Math.sin(o)*l];return this.nodeShapes[this.getNodeShape(e)].intersectLine(n.x,n.y,r,i,u[0],u[1],0)},findEndpoints:function(e){var t,n,r,i,a,o=this,l=e.source()[0],u=e.target()[0],s=l.position(),c=u.position(),f=e.pstyle("target-arrow-shape").value,d=e.pstyle("source-arrow-shape").value,h=e.pstyle("target-distance-from-node").pfValue,p=e.pstyle("source-distance-from-node").pfValue,v=e.pstyle("curve-style").value,g=e._private.rscratch,y=g.edgeType,m="self"===y||"compound"===y,b="bezier"===y||"multibezier"===y||m,x="bezier"!==y,w="straight"===y||"segments"===y,k="segments"===y,S=b||x||w,T=m||"taxi"===v,P=e.pstyle("source-endpoint"),C=T?"outside-to-node":P.value,_=e.pstyle("target-endpoint"),M=T?"outside-to-node":_.value;if(g.srcManEndpt=P,g.tgtManEndpt=_,b){var O=[g.ctrlpts[0],g.ctrlpts[1]];n=x?[g.ctrlpts[g.ctrlpts.length-2],g.ctrlpts[g.ctrlpts.length-1]]:O,r=O}else if(w){var N=k?g.segpts.slice(0,2):[c.x,c.y];n=k?g.segpts.slice(g.segpts.length-2):[s.x,s.y],r=N}if("inside-to-node"===M)t=[c.x,c.y];else if(_.units)t=this.manualEndptToPx(u,_);else if("outside-to-line"===M)t=g.tgtIntn;else if("outside-to-node"===M||"outside-to-node-or-label"===M?i=n:"outside-to-line"!==M&&"outside-to-line-or-label"!==M||(i=[s.x,s.y]),t=o.nodeShapes[this.getNodeShape(u)].intersectLine(c.x,c.y,u.outerWidth(),u.outerHeight(),i[0],i[1],0),"outside-to-node-or-label"===M||"outside-to-line-or-label"===M){var D=u._private.rscratch,I=D.labelWidth,A=D.labelHeight,L=D.labelX,B=D.labelY,z=u.pstyle("text-valign").value;"top"===z?B-=A/2:"bottom"===z&&(B+=A/2);var R=u.pstyle("text-halign").value;"left"===R?L-=I/2:"right"===R&&(L+=I/2);var F=o.nodeShapes.rectangle.intersectLine(L,B,I,A,i[0],i[1],0),j=s,V=Ze(j,qe(t));Ze(j,qe(F))<V&&(t=F)}var q=It(t,n,o.arrowShapes[f].spacing(e)+h),W=It(t,n,o.arrowShapes[f].gap(e)+h);if(g.endX=W[0],g.endY=W[1],g.arrowEndX=q[0],g.arrowEndY=q[1],"inside-to-node"===C)t=[s.x,s.y];else if(P.units)t=this.manualEndptToPx(l,P);else if("outside-to-line"===C)t=g.srcIntn;else if("outside-to-node"===C||"outside-to-node-or-label"===C?a=r:"outside-to-line"!==C&&"outside-to-line-or-label"!==C||(a=[c.x,c.y]),t=o.nodeShapes[this.getNodeShape(l)].intersectLine(s.x,s.y,l.outerWidth(),l.outerHeight(),a[0],a[1],0),"outside-to-node-or-label"===C||"outside-to-line-or-label"===C){var Y=l._private.rscratch,U=Y.labelWidth,X=Y.labelHeight,H=Y.labelX,G=Y.labelY,K=l.pstyle("text-valign").value;"top"===K?G-=X/2:"bottom"===K&&(G+=X/2);var $=l.pstyle("text-halign").value;"left"===$?H-=U/2:"right"===$&&(H+=U/2);var Q=o.nodeShapes.rectangle.intersectLine(H,G,U,X,a[0],a[1],0),Z=c,J=Ze(Z,qe(t));Ze(Z,qe(Q))<J&&(t=Q)}var ee=It(t,r,o.arrowShapes[d].spacing(e)+p),te=It(t,r,o.arrowShapes[d].gap(e)+p);g.startX=te[0],g.startY=te[1],g.arrowStartX=ee[0],g.arrowStartY=ee[1],S&&(E(g.startX)&&E(g.startY)&&E(g.endX)&&E(g.endY)?g.badLine=!1:g.badLine=!0)},getSourceEndpoint:function(e){var t=e[0]._private.rscratch;switch(this.recalculateRenderedStyle(e),t.edgeType){case"haystack":return{x:t.haystackPts[0],y:t.haystackPts[1]};default:return{x:t.arrowStartX,y:t.arrowStartY}}},getTargetEndpoint:function(e){var t=e[0]._private.rscratch;switch(this.recalculateRenderedStyle(e),t.edgeType){case"haystack":return{x:t.haystackPts[2],y:t.haystackPts[3]};default:return{x:t.arrowEndX,y:t.arrowEndY}}}},Vo={};function qo(e,t,n){for(var r=function(e,t,n,r){return et(e,t,n,r)},i=t._private.rstyle.bezierPts,a=0;a<e.bezierProjPcts.length;a++){var o=e.bezierProjPcts[a];i.push({x:r(n[0],n[2],n[4],o),y:r(n[1],n[3],n[5],o)})}}Vo.storeEdgeProjections=function(e){var t=e._private,n=t.rscratch,r=n.edgeType;if(t.rstyle.bezierPts=null,t.rstyle.linePts=null,t.rstyle.haystackPts=null,"multibezier"===r||"bezier"===r||"self"===r||"compound"===r){t.rstyle.bezierPts=[];for(var i=0;i+5<n.allpts.length;i+=4)qo(this,e,n.allpts.slice(i,i+6))}else if("segments"===r){var a=t.rstyle.linePts=[];for(i=0;i+1<n.allpts.length;i+=2)a.push({x:n.allpts[i],y:n.allpts[i+1]})}else if("haystack"===r){var o=n.haystackPts;t.rstyle.haystackPts=[{x:o[0],y:o[1]},{x:o[2],y:o[3]}]}t.rstyle.arrowWidth=this.getArrowWidth(e.pstyle("width").pfValue,e.pstyle("arrow-scale").value)*this.arrowShapeWidth},Vo.recalculateEdgeProjections=function(e){this.findEdgeControlPoints(e)};var Wo={recalculateNodeLabelProjection:function(e){var t=e.pstyle("label").strValue;if(!M(t)){var n,r,i=e._private,a=e.width(),o=e.height(),l=e.padding(),u=e.position(),s=e.pstyle("text-halign").strValue,c=e.pstyle("text-valign").strValue,f=i.rscratch,d=i.rstyle;switch(s){case"left":n=u.x-a/2-l;break;case"right":n=u.x+a/2+l;break;default:n=u.x}switch(c){case"top":r=u.y-o/2-l;break;case"bottom":r=u.y+o/2+l;break;default:r=u.y}f.labelX=n,f.labelY=r,d.labelX=n,d.labelY=r,this.applyLabelDimensions(e)}}},Yo=function(e,t){var n=Math.atan(t/e);return 0===e&&n<0&&(n*=-1),n},Uo=function(e,t){var n=t.x-e.x,r=t.y-e.y;return Yo(n,r)};Wo.recalculateEdgeLabelProjections=function(e){var t,n=e._private,r=n.rscratch,i=this,a={mid:e.pstyle("label").strValue,source:e.pstyle("source-label").strValue,target:e.pstyle("target-label").strValue};if(a.mid||a.source||a.target){t={x:r.midX,y:r.midY};var o=function(e,t,r){be(n.rscratch,e,t,r),be(n.rstyle,e,t,r)};o("labelX",null,t.x),o("labelY",null,t.y);var l=Yo(r.midDispX,r.midDispY);o("labelAutoAngle",null,l);var u=function(l){var u,s="source"===l;if(a[l]){var c=e.pstyle(l+"-text-offset").pfValue;switch(r.edgeType){case"self":case"compound":case"bezier":case"multibezier":for(var f,d=function e(){if(e.cache)return e.cache;for(var t=[],a=0;a+5<r.allpts.length;a+=4){var o={x:r.allpts[a],y:r.allpts[a+1]},l={x:r.allpts[a+2],y:r.allpts[a+3]},u={x:r.allpts[a+4],y:r.allpts[a+5]};t.push({p0:o,p1:l,p2:u,startDist:0,length:0,segments:[]})}var s=n.rstyle.bezierPts,c=i.bezierProjPcts.length;function f(e,t,n,r,i){var a=Qe(t,n),o=e.segments[e.segments.length-1],l={p0:t,p1:n,t0:r,t1:i,startDist:o?o.startDist+o.length:0,length:a};e.segments.push(l),e.length+=a}for(var d=0;d<t.length;d++){var h=t[d],p=t[d-1];p&&(h.startDist=p.startDist+p.length),f(h,h.p0,s[d*c],0,i.bezierProjPcts[0]);for(var v=0;v<c-1;v++)f(h,s[d*c+v],s[d*c+v+1],i.bezierProjPcts[v],i.bezierProjPcts[v+1]);f(h,s[d*c+c-1],h.p2,i.bezierProjPcts[c-1],1)}return e.cache=t}(),h=0,p=0,v=0;v<d.length;v++){for(var g=d[s?v:d.length-1-v],y=0;y<g.segments.length;y++){var m=g.segments[s?y:g.segments.length-1-y],b=v===d.length-1&&y===g.segments.length-1;if(h=p,(p+=m.length)>=c||b){f={cp:g,segment:m};break}}if(f)break}var x=f.cp,w=f.segment,E=(c-h)/w.length,k=w.t1-w.t0,S=s?w.t0+k*E:w.t1-k*E;S=rt(0,S,1),t=tt(x.p0,x.p1,x.p2,S),u=function(e,t,n,r){var i=rt(0,r-.001,1),a=rt(0,r+.001,1),o=tt(e,t,n,i),l=tt(e,t,n,a);return Uo(o,l)}(x.p0,x.p1,x.p2,S);break;case"straight":case"segments":case"haystack":for(var T,P,C,_,M=0,O=r.allpts.length,N=0;N+3<O&&(s?(C={x:r.allpts[N],y:r.allpts[N+1]},_={x:r.allpts[N+2],y:r.allpts[N+3]}):(C={x:r.allpts[O-2-N],y:r.allpts[O-1-N]},_={x:r.allpts[O-4-N],y:r.allpts[O-3-N]}),P=M,!((M+=T=Qe(C,_))>=c));N+=2);var D=(c-P)/T;D=rt(0,D,1),t=nt(C,_,D),u=Uo(C,_)}o("labelX",l,t.x),o("labelY",l,t.y),o("labelAutoAngle",l,u)}};u("source"),u("target"),this.applyLabelDimensions(e)}},Wo.applyLabelDimensions=function(e){this.applyPrefixedLabelDimensions(e),e.isEdge()&&(this.applyPrefixedLabelDimensions(e,"source"),this.applyPrefixedLabelDimensions(e,"target"))},Wo.applyPrefixedLabelDimensions=function(e,t){var n=e._private,r=this.getLabelText(e,t),i=this.calculateLabelDimensions(e,r),a=e.pstyle("line-height").pfValue,o=e.pstyle("text-wrap").strValue,l=me(n.rscratch,"labelWrapCachedLines",t)||[],u="wrap"!==o?1:Math.max(l.length,1),s=i.height/u,c=s*a,f=i.width,d=i.height+(u-1)*(a-1)*s;be(n.rstyle,"labelWidth",t,f),be(n.rscratch,"labelWidth",t,f),be(n.rstyle,"labelHeight",t,d),be(n.rscratch,"labelHeight",t,d),be(n.rscratch,"labelLineHeight",t,c)},Wo.getLabelText=function(e,t){var n=e._private,r=t?t+"-":"",i=e.pstyle(r+"label").strValue,a=e.pstyle("text-transform").value,o=function(e,r){return r?(be(n.rscratch,e,t,r),r):me(n.rscratch,e,t)};if(!i)return"";"none"==a||("uppercase"==a?i=i.toUpperCase():"lowercase"==a&&(i=i.toLowerCase()));var l=e.pstyle("text-wrap").value;if("wrap"===l){var u=o("labelKey");if(null!=u&&o("labelWrapKey")===u)return o("labelWrapCachedText");for(var s=i.split("\n"),c=e.pstyle("text-max-width").pfValue,f="anywhere"===e.pstyle("text-overflow-wrap").value,d=[],h=/[\s\u200b]+/,p=f?"":" ",v=0;v<s.length;v++){var g=s[v],y=this.calculateLabelDimensions(e,g).width;if(f){var m=g.split("").join("​");g=m}if(y>c){for(var b=g.split(h),x="",w=0;w<b.length;w++){var E=b[w],k=0===x.length?E:x+p+E;this.calculateLabelDimensions(e,k).width<=c?x+=E+p:(d.push(x),x=E+p)}x.match(/^[\s\u200b]+$/)||d.push(x)}else d.push(g)}o("labelWrapCachedLines",d),i=o("labelWrapCachedText",d.join("\n")),o("labelWrapKey",u)}else if("ellipsis"===l){for(var S=e.pstyle("text-max-width").pfValue,T="",P=!1,C=0;C<i.length;C++){if(this.calculateLabelDimensions(e,T+i[C]+"…").width>S)break;T+=i[C],C===i.length-1&&(P=!0)}return P||(T+="…"),T}return i},Wo.getLabelJustification=function(e){var t=e.pstyle("text-justification").strValue,n=e.pstyle("text-halign").strValue;if("auto"!==t)return t;if(!e.isNode())return"center";switch(n){case"left":return"right";case"right":return"left";default:return"center"}},Wo.calculateLabelDimensions=function(e,t){var n=Q(t,e._private.labelDimsKey),r=this.labelDimCache||(this.labelDimCache=[]),i=r[n];if(null!=i)return i;var a=e.pstyle("font-style").strValue,o=1*e.pstyle("font-size").pfValue+"px",l=e.pstyle("font-family").strValue,u=e.pstyle("font-weight").strValue,s=this.labelCalcDiv;s||(s=this.labelCalcDiv=document.createElement("div"),document.body.appendChild(s));var c=s.style;return c.fontFamily=l,c.fontStyle=a,c.fontSize=o,c.fontWeight=u,c.position="absolute",c.left="-9999px",c.top="-9999px",c.zIndex="-1",c.visibility="hidden",c.pointerEvents="none",c.padding="0",c.lineHeight="1","wrap"===e.pstyle("text-wrap").value?c.whiteSpace="pre":c.whiteSpace="normal",s.textContent=t,r[n]={width:Math.ceil(s.clientWidth/1),height:Math.ceil(s.clientHeight/1)}},Wo.calculateLabelAngle=function(e,t){var n=e._private.rscratch,r=e.isEdge(),i=t?t+"-":"",a=e.pstyle(i+"text-rotation"),o=a.strValue;return"none"===o?0:r&&"autorotate"===o?n.labelAutoAngle:"autorotate"===o?0:a.pfValue},Wo.calculateLabelAngles=function(e){var t=this,n=e.isEdge(),r=e._private.rscratch;r.labelAngle=t.calculateLabelAngle(e),n&&(r.sourceLabelAngle=t.calculateLabelAngle(e,"source"),r.targetLabelAngle=t.calculateLabelAngle(e,"target"))};var Xo={},Ho=!1;Xo.getNodeShape=function(e){var t=e.pstyle("shape").value;if("cutrectangle"===t&&(e.width()<28||e.height()<28))return Ho||(ce("The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead"),Ho=!0),"rectangle";if(e.isParent())return"rectangle"===t||"roundrectangle"===t||"cutrectangle"===t||"barrel"===t?t:"rectangle";if("polygon"===t){var n=e.pstyle("shape-polygon-points").value;return this.nodeShapes.makePolygon(n).name}return t};var Go={registerCalculationListeners:function(){var e=this.cy,t=e.collection(),n=this,r=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(t.merge(e),n)for(var r=0;r<e.length;r++){var i=e[r],a=i._private,o=a.rstyle;o.clean=!1,o.cleanConnected=!1}};n.binder(e).on("bounds.* dirty.*",(function(e){var t=e.target;r(t)})).on("style.* background.*",(function(e){var t=e.target;r(t,!1)}));var i=function(i){if(i){for(var a=n.onUpdateEleCalcsFns,o=0;o<t.length;o++){var l=t[o],u=l._private.rstyle;l.isNode()&&!u.cleanConnected&&(r(l.connectedEdges()),u.cleanConnected=!0)}if(a)for(o=0;o<a.length;o++){(0,a[o])(i,t)}n.recalculateRenderedStyle(t),t=e.collection()}};n.flushRenderedStyleQueue=function(){i(!0)},n.beforeRender(i,n.beforeRenderPriorities.eleCalcs)},onUpdateEleCalcs:function(e){(this.onUpdateEleCalcsFns=this.onUpdateEleCalcsFns||[]).push(e)},recalculateRenderedStyle:function(e,t){var n=[],r=[];if(!this.destroyed){void 0===t&&(t=!0);for(var i=0;i<e.length;i++){var a=(u=(l=e[i])._private).rstyle;t&&a.clean||l.removed()||"none"!==l.pstyle("display").value&&("nodes"===u.group?r.push(l):n.push(l),a.clean=!0)}for(i=0;i<r.length;i++){a=(u=(l=r[i])._private).rstyle;var o=l.position();this.recalculateNodeLabelProjection(l),a.nodeX=o.x,a.nodeY=o.y,a.nodeW=l.pstyle("width").pfValue,a.nodeH=l.pstyle("height").pfValue}this.recalculateEdgeProjections(n);for(i=0;i<n.length;i++){a=(u=(l=n[i])._private).rstyle;var l,u,s=u.rscratch;a.srcX=s.arrowStartX,a.srcY=s.arrowStartY,a.tgtX=s.arrowEndX,a.tgtY=s.arrowEndY,a.midX=s.midX,a.midY=s.midY,a.labelAngle=s.labelAngle,a.sourceLabelAngle=s.sourceLabelAngle,a.targetLabelAngle=s.targetLabelAngle}}}},Ko={updateCachedGrabbedEles:function(){var e=this.cachedZSortedEles;if(e){e.drag=[],e.nondrag=[];for(var t=[],n=0;n<e.length;n++){var r=(i=e[n])._private.rscratch;i.grabbed()&&!i.isParent()?t.push(i):r.inDragLayer?e.drag.push(i):e.nondrag.push(i)}for(n=0;n<t.length;n++){var i=t[n];e.drag.push(i)}}},invalidateCachedZSortedEles:function(){this.cachedZSortedEles=null},getCachedZSortedEles:function(e){if(e||!this.cachedZSortedEles){var t=this.cy.mutableElements().toArray();t.sort(zi),t.interactive=t.filter((function(e){return e.interactive()})),this.cachedZSortedEles=t,this.updateCachedGrabbedEles()}else t=this.cachedZSortedEles;return t}},$o={};[Bo,zo,Ro,jo,Vo,Wo,Xo,Go,Ko].forEach((function(e){R($o,e)}));var Qo={getCachedImage:function(e,t,n){var r=this.imageCache=this.imageCache||{},i=r[e];if(i)return i.image.complete||i.image.addEventListener("load",n),i.image;var a=(i=r[e]=r[e]||{}).image=new Image;a.addEventListener("load",n),a.addEventListener("error",(function(){a.error=!0}));return"data:"===e.substring(0,"data:".length).toLowerCase()||(a.crossOrigin=t),a.src=e,a}},Zo={registerBinding:function(e,t,n,r){var i=Array.prototype.slice.apply(arguments,[1]),a=this.binder(e);return a.on.apply(a,i)}};Zo.binder=function(e){var t,n=this,r=e===window||e===document||e===document.body||(t=e,"undefined"!=typeof HTMLElement&&t instanceof HTMLElement);if(null==n.supportsPassiveEvents){var i=!1;try{var a=Object.defineProperty({},"passive",{get:function(){return i=!0,!0}});window.addEventListener("test",null,a)}catch(e){}n.supportsPassiveEvents=i}var o=function(t,i,a){var o=Array.prototype.slice.call(arguments);return r&&n.supportsPassiveEvents&&(o[2]={capture:null!=a&&a,passive:!1,once:!1}),n.bindings.push({target:e,args:o}),(e.addEventListener||e.on).apply(e,o),this};return{on:o,addEventListener:o,addListener:o,bind:o}},Zo.nodeIsDraggable=function(e){return e&&e.isNode()&&!e.locked()&&e.grabbable()},Zo.nodeIsGrabbable=function(e){return this.nodeIsDraggable(e)&&e.interactive()},Zo.load=function(){var e=this,t=function(e){return e.selected()},n=function(t,n,r,i){null==t&&(t=e.cy);for(var a=0;a<n.length;a++){var o=n[a];t.emit({originalEvent:r,type:o,position:i})}},r=function(e){return e.shiftKey||e.metaKey||e.ctrlKey},a=function(t,n){var r=!0;if(e.cy.hasCompoundNodes()&&t&&t.pannable())for(var i=0;n&&i<n.length;i++){if((t=n[i]).isNode()&&t.isParent()){r=!1;break}}else r=!0;return r},o=function(e){e[0]._private.rscratch.inDragLayer=!0},l=function(e){e[0]._private.rscratch.isGrabTarget=!0},u=function(e,t){var n=t.addToList;n.has(e)||(n.merge(e),function(e){e[0]._private.grabbed=!0}(e))},s=function(t,n){n=n||{};var r=t.cy().hasCompoundNodes();n.inDragLayer&&(t.forEach(o),t.neighborhood().stdFilter((function(e){return!r||e.isEdge()})).forEach(o)),n.addToList&&t.forEach((function(e){u(e,n)})),function(e,t){if(e.cy().hasCompoundNodes()&&(null!=t.inDragLayer||null!=t.addToList)){var n=e.descendants();t.inDragLayer&&(n.forEach(o),n.connectedEdges().forEach(o)),t.addToList&&t.addToList.unmerge(n)}}(t,n),d(t,{inDragLayer:n.inDragLayer}),e.updateCachedGrabbedEles()},c=s,f=function(t){t&&(e.getCachedZSortedEles().forEach((function(e){!function(e){e[0]._private.grabbed=!1}(e),function(e){e[0]._private.rscratch.inDragLayer=!1}(e),function(e){e[0]._private.rscratch.isGrabTarget=!1}(e)})),e.updateCachedGrabbedEles())},d=function(e,t){if((null!=t.inDragLayer||null!=t.addToList)&&e.cy().hasCompoundNodes()){var n=e.ancestors().orphans();if(!n.same(e)){var r=n.descendants().spawnSelf().merge(n).unmerge(e).unmerge(e.descendants()),i=r.connectedEdges();t.inDragLayer&&(i.forEach(o),r.forEach(o)),t.addToList&&r.forEach((function(e){u(e,t)}))}}},h=function(){null!=document.activeElement&&null!=document.activeElement.blur&&document.activeElement.blur()},p="undefined"!=typeof MutationObserver;p?(e.removeObserver=new MutationObserver((function(t){for(var n=0;n<t.length;n++){var r=t[n].removedNodes;if(r)for(var i=0;i<r.length;i++){if(r[i]===e.container){e.destroy();break}}}})),e.container.parentNode&&e.removeObserver.observe(e.container.parentNode,{childList:!0})):e.registerBinding(e.container,"DOMNodeRemoved",(function(t){e.destroy()}));var v=i((function(){e.cy.resize()}),100);p&&(e.styleObserver=new MutationObserver(v),e.styleObserver.observe(e.container,{attributes:!0})),e.registerBinding(window,"resize",v);var g=function(){e.invalidateContainerClientCoordsCache()};!function(e,t){for(;null!=e;)t(e),e=e.parentNode}(e.container,(function(t){e.registerBinding(t,"transitionend",g),e.registerBinding(t,"animationend",g),e.registerBinding(t,"scroll",g)})),e.registerBinding(e.container,"contextmenu",(function(e){e.preventDefault()}));var y=function(t){for(var n=e.findContainerClientCoords(),r=n[0],i=n[1],a=n[2],o=n[3],l=t.touches?t.touches:[t],u=!1,s=0;s<l.length;s++){var c=l[s];if(r<=c.clientX&&c.clientX<=r+a&&i<=c.clientY&&c.clientY<=i+o){u=!0;break}}if(!u)return!1;for(var f=e.container,d=t.target.parentNode,h=!1;d;){if(d===f){h=!0;break}d=d.parentNode}return!!h};e.registerBinding(e.container,"mousedown",(function(t){if(y(t)){t.preventDefault(),h(),e.hoverData.capture=!0,e.hoverData.which=t.which;var r=e.cy,i=[t.clientX,t.clientY],a=e.projectIntoViewport(i[0],i[1]),o=e.selection,u=e.findNearestElements(a[0],a[1],!0,!1),f=u[0],d=e.dragData.possibleDragElements;e.hoverData.mdownPos=a,e.hoverData.mdownGPos=i;if(3==t.which){e.hoverData.cxtStarted=!0;var p={originalEvent:t,type:"cxttapstart",position:{x:a[0],y:a[1]}};f?(f.activate(),f.emit(p),e.hoverData.down=f):r.emit(p),e.hoverData.downTime=(new Date).getTime(),e.hoverData.cxtDragged=!1}else if(1==t.which){if(f&&f.activate(),null!=f&&e.nodeIsGrabbable(f)){var v=function(e){return{originalEvent:t,type:e,position:{x:a[0],y:a[1]}}};if(l(f),f.selected()){d=e.dragData.possibleDragElements=r.collection();var g=r.$((function(t){return t.isNode()&&t.selected()&&e.nodeIsGrabbable(t)}));s(g,{addToList:d}),f.emit(v("grabon")),g.forEach((function(e){e.emit(v("grab"))}))}else d=e.dragData.possibleDragElements=r.collection(),c(f,{addToList:d}),f.emit(v("grabon")).emit(v("grab"));e.redrawHint("eles",!0),e.redrawHint("drag",!0)}e.hoverData.down=f,e.hoverData.downs=u,e.hoverData.downTime=(new Date).getTime(),n(f,["mousedown","tapstart","vmousedown"],t,{x:a[0],y:a[1]}),null==f?(o[4]=1,e.data.bgActivePosistion={x:a[0],y:a[1]},e.redrawHint("select",!0),e.redraw()):f.pannable()&&(o[4]=1),e.hoverData.tapholdCancelled=!1,clearTimeout(e.hoverData.tapholdTimeout),e.hoverData.tapholdTimeout=setTimeout((function(){if(!e.hoverData.tapholdCancelled){var n=e.hoverData.down;n?n.emit({originalEvent:t,type:"taphold",position:{x:a[0],y:a[1]}}):r.emit({originalEvent:t,type:"taphold",position:{x:a[0],y:a[1]}})}}),e.tapholdDuration)}o[0]=o[2]=a[0],o[1]=o[3]=a[1]}}),!1),e.registerBinding(window,"mousemove",(function(t){if(e.hoverData.capture||y(t)){var i=!1,o=e.cy,l=o.zoom(),u=[t.clientX,t.clientY],c=e.projectIntoViewport(u[0],u[1]),d=e.hoverData.mdownPos,h=e.hoverData.mdownGPos,p=e.selection,v=null;e.hoverData.draggingEles||e.hoverData.dragging||e.hoverData.selecting||(v=e.findNearestElement(c[0],c[1],!0,!1));var g,m=e.hoverData.last,b=e.hoverData.down,x=[c[0]-p[2],c[1]-p[3]],w=e.dragData.possibleDragElements;if(h){var k=u[0]-h[0],S=k*k,T=u[1]-h[1],P=S+T*T;e.hoverData.isOverThresholdDrag=g=P>=e.desktopTapThreshold2}var C=r(t);g&&(e.hoverData.tapholdCancelled=!0);i=!0,n(v,["mousemove","vmousemove","tapdrag"],t,{x:c[0],y:c[1]});var _=function(){e.data.bgActivePosistion=void 0,e.hoverData.selecting||o.emit({originalEvent:t,type:"boxstart",position:{x:c[0],y:c[1]}}),p[4]=1,e.hoverData.selecting=!0,e.redrawHint("select",!0),e.redraw()};if(3===e.hoverData.which){if(g){var M={originalEvent:t,type:"cxtdrag",position:{x:c[0],y:c[1]}};b?b.emit(M):o.emit(M),e.hoverData.cxtDragged=!0,e.hoverData.cxtOver&&v===e.hoverData.cxtOver||(e.hoverData.cxtOver&&e.hoverData.cxtOver.emit({originalEvent:t,type:"cxtdragout",position:{x:c[0],y:c[1]}}),e.hoverData.cxtOver=v,v&&v.emit({originalEvent:t,type:"cxtdragover",position:{x:c[0],y:c[1]}}))}}else if(e.hoverData.dragging){if(i=!0,o.panningEnabled()&&o.userPanningEnabled()){var O;if(e.hoverData.justStartedPan){var N=e.hoverData.mdownPos;O={x:(c[0]-N[0])*l,y:(c[1]-N[1])*l},e.hoverData.justStartedPan=!1}else O={x:x[0]*l,y:x[1]*l};o.panBy(O),e.hoverData.dragged=!0}c=e.projectIntoViewport(t.clientX,t.clientY)}else if(1!=p[4]||null!=b&&!b.pannable()){if(b&&b.pannable()&&b.active()&&b.unactivate(),b&&b.grabbed()||v==m||(m&&n(m,["mouseout","tapdragout"],t,{x:c[0],y:c[1]}),v&&n(v,["mouseover","tapdragover"],t,{x:c[0],y:c[1]}),e.hoverData.last=v),b)if(g){if(o.boxSelectionEnabled()&&C)b&&b.grabbed()&&(f(w),b.emit("freeon"),w.emit("free"),e.dragData.didDrag&&(b.emit("dragfreeon"),w.emit("dragfree"))),_();else if(b&&b.grabbed()&&e.nodeIsDraggable(b)){var D=!e.dragData.didDrag;D&&e.redrawHint("eles",!0),e.dragData.didDrag=!0;var I=o.collection();e.hoverData.draggingEles||s(w,{inDragLayer:!0});var A={x:0,y:0};if(E(x[0])&&E(x[1])&&(A.x+=x[0],A.y+=x[1],D)){var L=e.hoverData.dragDelta;L&&E(L[0])&&E(L[1])&&(A.x+=L[0],A.y+=L[1])}for(var B=0;B<w.length;B++){var z=w[B];e.nodeIsDraggable(z)&&z.grabbed()&&I.merge(z)}e.hoverData.draggingEles=!0,I.silentShift(A).emit("position drag"),e.redrawHint("drag",!0),e.redraw()}}else!function(){var t=e.hoverData.dragDelta=e.hoverData.dragDelta||[];0===t.length?(t.push(x[0]),t.push(x[1])):(t[0]+=x[0],t[1]+=x[1])}();i=!0}else if(g){if(e.hoverData.dragging||!o.boxSelectionEnabled()||!C&&o.panningEnabled()&&o.userPanningEnabled()){if(!e.hoverData.selecting&&o.panningEnabled()&&o.userPanningEnabled()){a(b,e.hoverData.downs)&&(e.hoverData.dragging=!0,e.hoverData.justStartedPan=!0,p[4]=0,e.data.bgActivePosistion=qe(d),e.redrawHint("select",!0),e.redraw())}}else _();b&&b.pannable()&&b.active()&&b.unactivate()}return p[2]=c[0],p[3]=c[1],i?(t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault(),!1):void 0}}),!1),e.registerBinding(window,"mouseup",(function(i){if(e.hoverData.capture){e.hoverData.capture=!1;var a=e.cy,o=e.projectIntoViewport(i.clientX,i.clientY),l=e.selection,u=e.findNearestElement(o[0],o[1],!0,!1),s=e.dragData.possibleDragElements,c=e.hoverData.down,d=r(i);if(e.data.bgActivePosistion&&(e.redrawHint("select",!0),e.redraw()),e.hoverData.tapholdCancelled=!0,e.data.bgActivePosistion=void 0,c&&c.unactivate(),3===e.hoverData.which){var h={originalEvent:i,type:"cxttapend",position:{x:o[0],y:o[1]}};if(c?c.emit(h):a.emit(h),!e.hoverData.cxtDragged){var p={originalEvent:i,type:"cxttap",position:{x:o[0],y:o[1]}};c?c.emit(p):a.emit(p)}e.hoverData.cxtDragged=!1,e.hoverData.which=null}else if(1===e.hoverData.which){if(n(u,["mouseup","tapend","vmouseup"],i,{x:o[0],y:o[1]}),e.dragData.didDrag||e.hoverData.dragged||e.hoverData.selecting||e.hoverData.isOverThresholdDrag||n(c,["click","tap","vclick"],i,{x:o[0],y:o[1]}),null!=c||e.dragData.didDrag||e.hoverData.selecting||e.hoverData.dragged||r(i)||(a.$(t).unselect(["tapunselect"]),s.length>0&&e.redrawHint("eles",!0),e.dragData.possibleDragElements=s=a.collection()),u!=c||e.dragData.didDrag||e.hoverData.selecting||null!=u&&u._private.selectable&&(e.hoverData.dragging||("additive"===a.selectionType()||d?u.selected()?u.unselect(["tapunselect"]):u.select(["tapselect"]):d||(a.$(t).unmerge(u).unselect(["tapunselect"]),u.select(["tapselect"]))),e.redrawHint("eles",!0)),e.hoverData.selecting){var v=a.collection(e.getAllInBox(l[0],l[1],l[2],l[3]));e.redrawHint("select",!0),v.length>0&&e.redrawHint("eles",!0),a.emit({type:"boxend",originalEvent:i,position:{x:o[0],y:o[1]}});var g=function(e){return e.selectable()&&!e.selected()};"additive"===a.selectionType()||d||a.$(t).unmerge(v).unselect(),v.emit("box").stdFilter(g).select().emit("boxselect"),e.redraw()}if(e.hoverData.dragging&&(e.hoverData.dragging=!1,e.redrawHint("select",!0),e.redrawHint("eles",!0),e.redraw()),!l[4]){e.redrawHint("drag",!0),e.redrawHint("eles",!0);var y=c&&c.grabbed();f(s),y&&(c.emit("freeon"),s.emit("free"),e.dragData.didDrag&&(c.emit("dragfreeon"),s.emit("dragfree")))}}l[4]=0,e.hoverData.down=null,e.hoverData.cxtStarted=!1,e.hoverData.draggingEles=!1,e.hoverData.selecting=!1,e.hoverData.isOverThresholdDrag=!1,e.dragData.didDrag=!1,e.hoverData.dragged=!1,e.hoverData.dragDelta=[],e.hoverData.mdownPos=null,e.hoverData.mdownGPos=null}}),!1);var m,b,x,w,k,S,T,P,C,_,M,O,N;e.registerBinding(e.container,"wheel",(function(t){if(!e.scrollingPage){var n,r=e.cy,i=e.projectIntoViewport(t.clientX,t.clientY),a=[i[0]*r.zoom()+r.pan().x,i[1]*r.zoom()+r.pan().y];if(e.hoverData.draggingEles||e.hoverData.dragging||e.hoverData.cxtStarted||0!==e.selection[4])t.preventDefault();else if(r.panningEnabled()&&r.userPanningEnabled()&&r.zoomingEnabled()&&r.userZoomingEnabled())t.preventDefault(),e.data.wheelZooming=!0,clearTimeout(e.data.wheelTimeout),e.data.wheelTimeout=setTimeout((function(){e.data.wheelZooming=!1,e.redrawHint("eles",!0),e.redraw()}),150),n=null!=t.deltaY?t.deltaY/-250:null!=t.wheelDeltaY?t.wheelDeltaY/1e3:t.wheelDelta/1e3,n*=e.wheelSensitivity,1===t.deltaMode&&(n*=33),r.zoom({level:r.zoom()*Math.pow(10,n),renderedPosition:{x:a[0],y:a[1]}})}}),!0),e.registerBinding(window,"scroll",(function(t){e.scrollingPage=!0,clearTimeout(e.scrollingPageTimeout),e.scrollingPageTimeout=setTimeout((function(){e.scrollingPage=!1}),250)}),!0),e.registerBinding(e.container,"mouseout",(function(t){var n=e.projectIntoViewport(t.clientX,t.clientY);e.cy.emit({originalEvent:t,type:"mouseout",position:{x:n[0],y:n[1]}})}),!1),e.registerBinding(e.container,"mouseover",(function(t){var n=e.projectIntoViewport(t.clientX,t.clientY);e.cy.emit({originalEvent:t,type:"mouseover",position:{x:n[0],y:n[1]}})}),!1);var D,I,A,L,B=function(e,t,n,r){return Math.sqrt((n-e)*(n-e)+(r-t)*(r-t))},z=function(e,t,n,r){return(n-e)*(n-e)+(r-t)*(r-t)};if(e.registerBinding(e.container,"touchstart",D=function(t){if(y(t)){h(),e.touchData.capture=!0,e.data.bgActivePosistion=void 0;var r=e.cy,i=e.touchData.now,a=e.touchData.earlier;if(t.touches[0]){var o=e.projectIntoViewport(t.touches[0].clientX,t.touches[0].clientY);i[0]=o[0],i[1]=o[1]}if(t.touches[1]){o=e.projectIntoViewport(t.touches[1].clientX,t.touches[1].clientY);i[2]=o[0],i[3]=o[1]}if(t.touches[2]){o=e.projectIntoViewport(t.touches[2].clientX,t.touches[2].clientY);i[4]=o[0],i[5]=o[1]}if(t.touches[1]){f(e.dragData.touchDragEles);var u=e.findContainerClientCoords();C=u[0],_=u[1],M=u[2],O=u[3],m=t.touches[0].clientX-C,b=t.touches[0].clientY-_,x=t.touches[1].clientX-C,w=t.touches[1].clientY-_,N=0<=m&&m<=M&&0<=x&&x<=M&&0<=b&&b<=O&&0<=w&&w<=O;var d=r.pan(),p=r.zoom();k=B(m,b,x,w),S=z(m,b,x,w),P=[((T=[(m+x)/2,(b+w)/2])[0]-d.x)/p,(T[1]-d.y)/p];if(S<4e4&&!t.touches[2]){var v=e.findNearestElement(i[0],i[1],!0,!0),g=e.findNearestElement(i[2],i[3],!0,!0);return v&&v.isNode()?(v.activate().emit({originalEvent:t,type:"cxttapstart",position:{x:i[0],y:i[1]}}),e.touchData.start=v):g&&g.isNode()?(g.activate().emit({originalEvent:t,type:"cxttapstart",position:{x:i[0],y:i[1]}}),e.touchData.start=g):r.emit({originalEvent:t,type:"cxttapstart",position:{x:i[0],y:i[1]}}),e.touchData.start&&(e.touchData.start._private.grabbed=!1),e.touchData.cxt=!0,e.touchData.cxtDragged=!1,e.data.bgActivePosistion=void 0,void e.redraw()}}if(t.touches[2]);else if(t.touches[1]);else if(t.touches[0]){var E=e.findNearestElements(i[0],i[1],!0,!0),D=E[0];if(null!=D&&(D.activate(),e.touchData.start=D,e.touchData.starts=E,e.nodeIsGrabbable(D))){var I=e.dragData.touchDragEles=r.collection(),A=null;e.redrawHint("eles",!0),e.redrawHint("drag",!0),D.selected()?(A=r.$((function(t){return t.selected()&&e.nodeIsGrabbable(t)})),s(A,{addToList:I})):c(D,{addToList:I}),l(D);var L=function(e){return{originalEvent:t,type:e,position:{x:i[0],y:i[1]}}};D.emit(L("grabon")),A?A.forEach((function(e){e.emit(L("grab"))})):D.emit(L("grab"))}n(D,["touchstart","tapstart","vmousedown"],t,{x:i[0],y:i[1]}),null==D&&(e.data.bgActivePosistion={x:o[0],y:o[1]},e.redrawHint("select",!0),e.redraw()),e.touchData.singleTouchMoved=!1,e.touchData.singleTouchStartTime=+new Date,clearTimeout(e.touchData.tapholdTimeout),e.touchData.tapholdTimeout=setTimeout((function(){!1!==e.touchData.singleTouchMoved||e.pinching||e.touchData.selecting||n(e.touchData.start,["taphold"],t,{x:i[0],y:i[1]})}),e.tapholdDuration)}if(t.touches.length>=1){for(var R=e.touchData.startPosition=[],F=0;F<i.length;F++)R[F]=a[F]=i[F];var j=t.touches[0];e.touchData.startGPosition=[j.clientX,j.clientY]}}},!1),e.registerBinding(window,"touchmove",I=function(t){var r=e.touchData.capture;if(r||y(t)){var i=e.selection,o=e.cy,l=e.touchData.now,u=e.touchData.earlier,c=o.zoom();if(t.touches[0]){var d=e.projectIntoViewport(t.touches[0].clientX,t.touches[0].clientY);l[0]=d[0],l[1]=d[1]}if(t.touches[1]){d=e.projectIntoViewport(t.touches[1].clientX,t.touches[1].clientY);l[2]=d[0],l[3]=d[1]}if(t.touches[2]){d=e.projectIntoViewport(t.touches[2].clientX,t.touches[2].clientY);l[4]=d[0],l[5]=d[1]}var h,p=e.touchData.startGPosition;if(r&&t.touches[0]&&p){for(var v=[],g=0;g<l.length;g++)v[g]=l[g]-u[g];var T=t.touches[0].clientX-p[0],M=T*T,O=t.touches[0].clientY-p[1];h=M+O*O>=e.touchTapThreshold2}if(r&&e.touchData.cxt){t.preventDefault();var D=t.touches[0].clientX-C,I=t.touches[0].clientY-_,A=t.touches[1].clientX-C,L=t.touches[1].clientY-_,R=z(D,I,A,L);if(R/S>=2.25||R>=22500){e.touchData.cxt=!1,e.data.bgActivePosistion=void 0,e.redrawHint("select",!0);var F={originalEvent:t,type:"cxttapend",position:{x:l[0],y:l[1]}};e.touchData.start?(e.touchData.start.unactivate().emit(F),e.touchData.start=null):o.emit(F)}}if(r&&e.touchData.cxt){F={originalEvent:t,type:"cxtdrag",position:{x:l[0],y:l[1]}};e.data.bgActivePosistion=void 0,e.redrawHint("select",!0),e.touchData.start?e.touchData.start.emit(F):o.emit(F),e.touchData.start&&(e.touchData.start._private.grabbed=!1),e.touchData.cxtDragged=!0;var j=e.findNearestElement(l[0],l[1],!0,!0);e.touchData.cxtOver&&j===e.touchData.cxtOver||(e.touchData.cxtOver&&e.touchData.cxtOver.emit({originalEvent:t,type:"cxtdragout",position:{x:l[0],y:l[1]}}),e.touchData.cxtOver=j,j&&j.emit({originalEvent:t,type:"cxtdragover",position:{x:l[0],y:l[1]}}))}else if(r&&t.touches[2]&&o.boxSelectionEnabled())t.preventDefault(),e.data.bgActivePosistion=void 0,this.lastThreeTouch=+new Date,e.touchData.selecting||o.emit({originalEvent:t,type:"boxstart",position:{x:l[0],y:l[1]}}),e.touchData.selecting=!0,e.redrawHint("select",!0),i&&0!==i.length&&void 0!==i[0]?(i[2]=(l[0]+l[2]+l[4])/3,i[3]=(l[1]+l[3]+l[5])/3):(i[0]=(l[0]+l[2]+l[4])/3,i[1]=(l[1]+l[3]+l[5])/3,i[2]=(l[0]+l[2]+l[4])/3+1,i[3]=(l[1]+l[3]+l[5])/3+1),i[4]=1,e.touchData.selecting=!0,e.redraw();else if(r&&t.touches[1]&&o.zoomingEnabled()&&o.panningEnabled()&&o.userZoomingEnabled()&&o.userPanningEnabled()){if(t.preventDefault(),e.data.bgActivePosistion=void 0,e.redrawHint("select",!0),ee=e.dragData.touchDragEles){e.redrawHint("drag",!0);for(var V=0;V<ee.length;V++){var q=ee[V]._private;q.grabbed=!1,q.rscratch.inDragLayer=!1}}var W=e.touchData.start,Y=(D=t.touches[0].clientX-C,I=t.touches[0].clientY-_,A=t.touches[1].clientX-C,L=t.touches[1].clientY-_,B(D,I,A,L)),U=Y/k;if(N){var X=(D-m+(A-x))/2,H=(I-b+(L-w))/2,G=o.zoom(),K=G*U,$=o.pan(),Q=P[0]*G+$.x,Z=P[1]*G+$.y,J={x:-K/G*(Q-$.x-X)+Q,y:-K/G*(Z-$.y-H)+Z};if(W&&W.active()){var ee=e.dragData.touchDragEles;f(ee),e.redrawHint("drag",!0),e.redrawHint("eles",!0),W.unactivate().emit("freeon"),ee.emit("free"),e.dragData.didDrag&&(W.emit("dragfreeon"),ee.emit("dragfree"))}o.viewport({zoom:K,pan:J,cancelOnFailedZoom:!0}),k=Y,m=D,b=I,x=A,w=L,e.pinching=!0}if(t.touches[0]){d=e.projectIntoViewport(t.touches[0].clientX,t.touches[0].clientY);l[0]=d[0],l[1]=d[1]}if(t.touches[1]){d=e.projectIntoViewport(t.touches[1].clientX,t.touches[1].clientY);l[2]=d[0],l[3]=d[1]}if(t.touches[2]){d=e.projectIntoViewport(t.touches[2].clientX,t.touches[2].clientY);l[4]=d[0],l[5]=d[1]}}else if(t.touches[0]){var te=e.touchData.start,ne=e.touchData.last;if(e.hoverData.draggingEles||e.swipePanning||(j=e.findNearestElement(l[0],l[1],!0,!0)),r&&null!=te&&t.preventDefault(),r&&null!=te&&e.nodeIsDraggable(te))if(h){ee=e.dragData.touchDragEles;var re=!e.dragData.didDrag;re&&s(ee,{inDragLayer:!0}),e.dragData.didDrag=!0;var ie={x:0,y:0};if(E(v[0])&&E(v[1]))if(ie.x+=v[0],ie.y+=v[1],re)e.redrawHint("eles",!0),(ae=e.touchData.dragDelta)&&E(ae[0])&&E(ae[1])&&(ie.x+=ae[0],ie.y+=ae[1]);e.hoverData.draggingEles=!0,ee.silentShift(ie).emit("position drag"),e.redrawHint("drag",!0),e.touchData.startPosition[0]==u[0]&&e.touchData.startPosition[1]==u[1]&&e.redrawHint("eles",!0),e.redraw()}else{var ae;0===(ae=e.touchData.dragDelta=e.touchData.dragDelta||[]).length?(ae.push(v[0]),ae.push(v[1])):(ae[0]+=v[0],ae[1]+=v[1])}if(n(te||j,["touchmove","tapdrag","vmousemove"],t,{x:l[0],y:l[1]}),te&&te.grabbed()||j==ne||(ne&&ne.emit({originalEvent:t,type:"tapdragout",position:{x:l[0],y:l[1]}}),j&&j.emit({originalEvent:t,type:"tapdragover",position:{x:l[0],y:l[1]}})),e.touchData.last=j,r)for(V=0;V<l.length;V++)l[V]&&e.touchData.startPosition[V]&&h&&(e.touchData.singleTouchMoved=!0);if(r&&(null==te||te.pannable())&&o.panningEnabled()&&o.userPanningEnabled()){a(te,e.touchData.starts)&&(t.preventDefault(),e.swipePanning?o.panBy({x:v[0]*c,y:v[1]*c}):h&&(e.swipePanning=!0,o.panBy({x:T*c,y:O*c}),te&&(te.unactivate(),e.data.bgActivePosistion||(e.data.bgActivePosistion=qe(e.touchData.startPosition)),e.redrawHint("select",!0),e.touchData.start=null)));d=e.projectIntoViewport(t.touches[0].clientX,t.touches[0].clientY);l[0]=d[0],l[1]=d[1]}}for(g=0;g<l.length;g++)u[g]=l[g];r&&t.touches.length>0&&!e.hoverData.draggingEles&&!e.swipePanning&&null!=e.data.bgActivePosistion&&(e.data.bgActivePosistion=void 0,e.redrawHint("select",!0),e.redraw())}},!1),e.registerBinding(window,"touchcancel",A=function(t){var n=e.touchData.start;e.touchData.capture=!1,n&&n.unactivate()}),e.registerBinding(window,"touchend",L=function(r){var i=e.touchData.start;if(e.touchData.capture){0===r.touches.length&&(e.touchData.capture=!1),r.preventDefault();var a=e.selection;e.swipePanning=!1,e.hoverData.draggingEles=!1;var o,l=e.cy,u=l.zoom(),s=e.touchData.now,c=e.touchData.earlier;if(r.touches[0]){var d=e.projectIntoViewport(r.touches[0].clientX,r.touches[0].clientY);s[0]=d[0],s[1]=d[1]}if(r.touches[1]){d=e.projectIntoViewport(r.touches[1].clientX,r.touches[1].clientY);s[2]=d[0],s[3]=d[1]}if(r.touches[2]){d=e.projectIntoViewport(r.touches[2].clientX,r.touches[2].clientY);s[4]=d[0],s[5]=d[1]}if(i&&i.unactivate(),e.touchData.cxt){if(o={originalEvent:r,type:"cxttapend",position:{x:s[0],y:s[1]}},i?i.emit(o):l.emit(o),!e.touchData.cxtDragged){var h={originalEvent:r,type:"cxttap",position:{x:s[0],y:s[1]}};i?i.emit(h):l.emit(h)}return e.touchData.start&&(e.touchData.start._private.grabbed=!1),e.touchData.cxt=!1,e.touchData.start=null,void e.redraw()}if(!r.touches[2]&&l.boxSelectionEnabled()&&e.touchData.selecting){e.touchData.selecting=!1;var p=l.collection(e.getAllInBox(a[0],a[1],a[2],a[3]));a[0]=void 0,a[1]=void 0,a[2]=void 0,a[3]=void 0,a[4]=0,e.redrawHint("select",!0),l.emit({type:"boxend",originalEvent:r,position:{x:s[0],y:s[1]}});p.emit("box").stdFilter((function(e){return e.selectable()&&!e.selected()})).select().emit("boxselect"),p.nonempty()&&e.redrawHint("eles",!0),e.redraw()}if(null!=i&&i.unactivate(),r.touches[2])e.data.bgActivePosistion=void 0,e.redrawHint("select",!0);else if(r.touches[1]);else if(r.touches[0]);else if(!r.touches[0]){e.data.bgActivePosistion=void 0,e.redrawHint("select",!0);var v=e.dragData.touchDragEles;if(null!=i){var g=i._private.grabbed;f(v),e.redrawHint("drag",!0),e.redrawHint("eles",!0),g&&(i.emit("freeon"),v.emit("free"),e.dragData.didDrag&&(i.emit("dragfreeon"),v.emit("dragfree"))),n(i,["touchend","tapend","vmouseup","tapdragout"],r,{x:s[0],y:s[1]}),i.unactivate(),e.touchData.start=null}else{var y=e.findNearestElement(s[0],s[1],!0,!0);n(y,["touchend","tapend","vmouseup","tapdragout"],r,{x:s[0],y:s[1]})}var m=e.touchData.startPosition[0]-s[0],b=m*m,x=e.touchData.startPosition[1]-s[1],w=(b+x*x)*u*u;e.touchData.singleTouchMoved||(i||l.$(":selected").unselect(["tapunselect"]),n(i,["tap","vclick"],r,{x:s[0],y:s[1]})),null!=i&&!e.dragData.didDrag&&i._private.selectable&&w<e.touchTapThreshold2&&!e.pinching&&("single"===l.selectionType()?(l.$(t).unmerge(i).unselect(["tapunselect"]),i.select(["tapselect"])):i.selected()?i.unselect(["tapunselect"]):i.select(["tapselect"]),e.redrawHint("eles",!0)),e.touchData.singleTouchMoved=!0}for(var E=0;E<s.length;E++)c[E]=s[E];e.dragData.didDrag=!1,0===r.touches.length&&(e.touchData.dragDelta=[],e.touchData.startPosition=null,e.touchData.startGPosition=null),r.touches.length<2&&(e.pinching=!1,e.redrawHint("eles",!0),e.redraw())}},!1),"undefined"==typeof TouchEvent){var R=[],F=function(e){return{clientX:e.clientX,clientY:e.clientY,force:1,identifier:e.pointerId,pageX:e.pageX,pageY:e.pageY,radiusX:e.width/2,radiusY:e.height/2,screenX:e.screenX,screenY:e.screenY,target:e.target}},j=function(e){R.push(function(e){return{event:e,touch:F(e)}}(e))},V=function(e){for(var t=0;t<R.length;t++){if(R[t].event.pointerId===e.pointerId)return void R.splice(t,1)}},q=function(e){e.touches=R.map((function(e){return e.touch}))},W=function(e){return"mouse"===e.pointerType||4===e.pointerType};e.registerBinding(e.container,"pointerdown",(function(e){W(e)||(e.preventDefault(),j(e),q(e),D(e))})),e.registerBinding(e.container,"pointerup",(function(e){W(e)||(V(e),q(e),L(e))})),e.registerBinding(e.container,"pointercancel",(function(e){W(e)||(V(e),q(e),A())})),e.registerBinding(e.container,"pointermove",(function(e){W(e)||(e.preventDefault(),function(e){var t=R.filter((function(t){return t.event.pointerId===e.pointerId}))[0];t.event=e,t.touch=F(e)}(e),q(e),I(e))}))}};var Jo={generatePolygon:function(e,t){return this.nodeShapes[e]={renderer:this,name:e,points:t,draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl("polygon",e,t,n,r,i,this.points)},intersectLine:function(e,t,n,r,i,a,o){return Dt(i,a,this.points,e,t,n/2,r/2,o)},checkPoint:function(e,t,n,r,i,a,o){return St(e,t,this.points,a,o,r,i,[0,-1],n)}}},generateEllipse:function(){return this.nodeShapes.ellipse={renderer:this,name:"ellipse",draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl(this.name,e,t,n,r,i)},intersectLine:function(e,t,n,r,i,a,o){return Ct(i,a,e,t,n/2+o,r/2+o)},checkPoint:function(e,t,n,r,i,a,o){return _t(e,t,r,i,a,o,n)}}},generateRoundRectangle:function(){return this.nodeShapes["round-rectangle"]=this.nodeShapes.roundrectangle={renderer:this,name:"round-rectangle",points:At(4,0),draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl(this.name,e,t,n,r,i)},intersectLine:function(e,t,n,r,i,a,o){return gt(i,a,e,t,n,r,o)},checkPoint:function(e,t,n,r,i,a,o){var l=zt(r,i),u=2*l;return!!St(e,t,this.points,a,o,r,i-u,[0,-1],n)||(!!St(e,t,this.points,a,o,r-u,i,[0,-1],n)||(!!_t(e,t,u,u,a-r/2+l,o-i/2+l,n)||(!!_t(e,t,u,u,a+r/2-l,o-i/2+l,n)||(!!_t(e,t,u,u,a+r/2-l,o+i/2-l,n)||!!_t(e,t,u,u,a-r/2+l,o+i/2-l,n)))))}}},generateCutRectangle:function(){return this.nodeShapes["cut-rectangle"]=this.nodeShapes.cutrectangle={renderer:this,name:"cut-rectangle",cornerLength:8,points:At(4,0),draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl(this.name,e,t,n,r,i)},generateCutTrianglePts:function(e,t,n,r){var i=this.cornerLength,a=t/2,o=e/2,l=n-o,u=n+o,s=r-a,c=r+a;return{topLeft:[l,s+i,l+i,s,l+i,s+i],topRight:[u-i,s,u,s+i,u-i,s+i],bottomRight:[u,c-i,u-i,c,u-i,c-i],bottomLeft:[l+i,c,l,c-i,l+i,c-i]}},intersectLine:function(e,t,n,r,i,a,o){var l=this.generateCutTrianglePts(n+2*o,r+2*o,e,t),u=[].concat.apply([],[l.topLeft.splice(0,4),l.topRight.splice(0,4),l.bottomRight.splice(0,4),l.bottomLeft.splice(0,4)]);return Dt(i,a,u,e,t)},checkPoint:function(e,t,n,r,i,a,o){if(St(e,t,this.points,a,o,r,i-2*this.cornerLength,[0,-1],n))return!0;if(St(e,t,this.points,a,o,r-2*this.cornerLength,i,[0,-1],n))return!0;var l=this.generateCutTrianglePts(r,i,a,o);return kt(e,t,l.topLeft)||kt(e,t,l.topRight)||kt(e,t,l.bottomRight)||kt(e,t,l.bottomLeft)}}},generateBarrel:function(){return this.nodeShapes.barrel={renderer:this,name:"barrel",points:At(4,0),draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl(this.name,e,t,n,r,i)},intersectLine:function(e,t,n,r,i,a,o){var l=this.generateBarrelBezierPts(n+2*o,r+2*o,e,t),u=function(e){var t=tt({x:e[0],y:e[1]},{x:e[2],y:e[3]},{x:e[4],y:e[5]},.15),n=tt({x:e[0],y:e[1]},{x:e[2],y:e[3]},{x:e[4],y:e[5]},.5),r=tt({x:e[0],y:e[1]},{x:e[2],y:e[3]},{x:e[4],y:e[5]},.85);return[e[0],e[1],t.x,t.y,n.x,n.y,r.x,r.y,e[4],e[5]]},s=[].concat(u(l.topLeft),u(l.topRight),u(l.bottomRight),u(l.bottomLeft));return Dt(i,a,s,e,t)},generateBarrelBezierPts:function(e,t,n,r){var i=t/2,a=e/2,o=n-a,l=n+a,u=r-i,s=r+i,c=Ft(e,t),f=c.heightOffset,d=c.widthOffset,h=c.ctrlPtOffsetPct*e,p={topLeft:[o,u+f,o+h,u,o+d,u],topRight:[l-d,u,l-h,u,l,u+f],bottomRight:[l,s-f,l-h,s,l-d,s],bottomLeft:[o+d,s,o+h,s,o,s-f]};return p.topLeft.isTop=!0,p.topRight.isTop=!0,p.bottomLeft.isBottom=!0,p.bottomRight.isBottom=!0,p},checkPoint:function(e,t,n,r,i,a,o){var l=Ft(r,i),u=l.heightOffset,s=l.widthOffset;if(St(e,t,this.points,a,o,r,i-2*u,[0,-1],n))return!0;if(St(e,t,this.points,a,o,r-2*s,i,[0,-1],n))return!0;for(var c=this.generateBarrelBezierPts(r,i,a,o),f=function(e,t,n){var r=n[4],i=n[2],a=n[0],o=n[5],l=n[1],u=Math.min(r,a),s=Math.max(r,a),c=Math.min(o,l),f=Math.max(o,l);if(u<=e&&e<=s&&c<=t&&t<=f){var d=Rt(r,i,a),h=bt(d[0],d[1],d[2],e).filter((function(e){return 0<=e&&e<=1}));if(h.length>0)return h[0]}return null},d=Object.keys(c),h=0;h<d.length;h++){var p=c[d[h]],v=f(e,t,p);if(null!=v){var g=p[5],y=p[3],m=p[1],b=et(g,y,m,v);if(p.isTop&&b<=t)return!0;if(p.isBottom&&t<=b)return!0}}return!1}}},generateBottomRoundrectangle:function(){return this.nodeShapes["bottom-round-rectangle"]=this.nodeShapes.bottomroundrectangle={renderer:this,name:"bottom-round-rectangle",points:At(4,0),draw:function(e,t,n,r,i){this.renderer.nodeShapeImpl(this.name,e,t,n,r,i)},intersectLine:function(e,t,n,r,i,a,o){var l=t-(r/2+o),u=Nt(i,a,e,t,e-(n/2+o),l,e+(n/2+o),l,!1);return u.length>0?u:gt(i,a,e,t,n,r,o)},checkPoint:function(e,t,n,r,i,a,o){var l=zt(r,i),u=2*l;if(St(e,t,this.points,a,o,r,i-u,[0,-1],n))return!0;if(St(e,t,this.points,a,o,r-u,i,[0,-1],n))return!0;var s=r/2+2*n,c=i/2+2*n;return!!kt(e,t,[a-s,o-c,a-s,o,a+s,o,a+s,o-c])||(!!_t(e,t,u,u,a+r/2-l,o+i/2-l,n)||!!_t(e,t,u,u,a-r/2+l,o+i/2-l,n))}}},registerNodeShapes:function(){var e=this.nodeShapes={},t=this;this.generateEllipse(),this.generatePolygon("triangle",At(3,0)),this.generatePolygon("rectangle",At(4,0)),e.square=e.rectangle,this.generateRoundRectangle(),this.generateCutRectangle(),this.generateBarrel(),this.generateBottomRoundrectangle(),this.generatePolygon("diamond",[0,1,1,0,0,-1,-1,0]),this.generatePolygon("pentagon",At(5,0)),this.generatePolygon("hexagon",At(6,0)),this.generatePolygon("heptagon",At(7,0)),this.generatePolygon("octagon",At(8,0));var n=new Array(20),r=Bt(5,0),i=Bt(5,Math.PI/5),a=.5*(3-Math.sqrt(5));a*=1.57;for(var o=0;o<i.length/2;o++)i[2*o]*=a,i[2*o+1]*=a;for(o=0;o<5;o++)n[4*o]=r[2*o],n[4*o+1]=r[2*o+1],n[4*o+2]=i[2*o],n[4*o+3]=i[2*o+1];n=Lt(n),this.generatePolygon("star",n),this.generatePolygon("vee",[-1,-1,0,-.333,1,-1,0,1]),this.generatePolygon("rhomboid",[-1,-1,.333,-1,1,1,-.333,1]),this.nodeShapes.concavehexagon=this.generatePolygon("concave-hexagon",[-1,-.95,-.75,0,-1,.95,1,.95,.75,0,1,-.95]),this.generatePolygon("tag",[-1,-1,.25,-1,1,0,.25,1,-1,1]),e.makePolygon=function(e){var n,r="polygon-"+e.join("$");return(n=this[r])?n:t.generatePolygon(r,e)}}},el={timeToRender:function(){return this.redrawTotalTime/this.redrawCount},redraw:function(e){e=e||pe();var t=this;void 0===t.averageRedrawTime&&(t.averageRedrawTime=0),void 0===t.lastRedrawTime&&(t.lastRedrawTime=0),void 0===t.lastDrawTime&&(t.lastDrawTime=0),t.requestedFrame=!0,t.renderOptions=e},beforeRender:function(e,t){if(!this.destroyed){null==t&&ue("Priority is not optional for beforeRender");var n=this.beforeRenderCallbacks;n.push({fn:e,priority:t}),n.sort((function(e,t){return t.priority-e.priority}))}}},tl=function(e,t,n){for(var r=e.beforeRenderCallbacks,i=0;i<r.length;i++)r[i].fn(t,n)};el.startRenderLoop=function(){var e=this,t=e.cy;if(!e.renderLoopStarted){e.renderLoopStarted=!0;X((function n(r){if(!e.destroyed){if(t.batching());else if(e.requestedFrame&&!e.skipFrame){tl(e,!0,r);var i=H();e.render(e.renderOptions);var a=e.lastDrawTime=H();void 0===e.averageRedrawTime&&(e.averageRedrawTime=a-i),void 0===e.redrawCount&&(e.redrawCount=0),e.redrawCount++,void 0===e.redrawTotalTime&&(e.redrawTotalTime=0);var o=a-i;e.redrawTotalTime+=o,e.lastRedrawTime=o,e.averageRedrawTime=e.averageRedrawTime/2+o/2,e.requestedFrame=!1}else tl(e,!1,r);e.skipFrame=!1,X(n)}}))}};var nl=function(e){this.init(e)},rl=nl.prototype;rl.clientFunctions=["redrawHint","render","renderTo","matchCanvasSize","nodeShapeImpl","arrowShapeImpl"],rl.init=function(e){var t=this;t.options=e,t.cy=e.cy;var n=t.container=e.cy.container();if(f){var r=f.document,i=r.head,a="__________cytoscape_container",o=null!=r.getElementById("__________cytoscape_stylesheet");if(n.className.indexOf(a)<0&&(n.className=(n.className||"")+" "+a),!o){var l=r.createElement("style");l.id="__________cytoscape_stylesheet",l.innerHTML="."+a+" { position: relative; }",i.insertBefore(l,i.children[0])}"static"===f.getComputedStyle(n).getPropertyValue("position")&&ce("A Cytoscape container has style position:static and so can not use UI extensions properly")}t.selection=[void 0,void 0,void 0,void 0,0],t.bezierProjPcts=[.05,.225,.4,.5,.6,.775,.95],t.hoverData={down:null,last:null,downTime:null,triggerMode:null,dragging:!1,initialPan:[null,null],capture:!1},t.dragData={possibleDragElements:[]},t.touchData={start:null,capture:!1,startPosition:[null,null,null,null,null,null],singleTouchStartTime:null,singleTouchMoved:!0,now:[null,null,null,null,null,null],earlier:[null,null,null,null,null,null]},t.redraws=0,t.showFps=e.showFps,t.debug=e.debug,t.hideEdgesOnViewport=e.hideEdgesOnViewport,t.hideLabelsOnViewport=e.hideLabelsOnViewport,t.textureOnViewport=e.textureOnViewport,t.wheelSensitivity=e.wheelSensitivity,t.motionBlurEnabled=e.motionBlur,t.forcedPixelRatio=E(e.pixelRatio)?e.pixelRatio:null,t.motionBlur=e.motionBlur,t.motionBlurOpacity=e.motionBlurOpacity,t.motionBlurTransparency=1-t.motionBlurOpacity,t.motionBlurPxRatio=1,t.mbPxRBlurry=1,t.minMbLowQualFrames=4,t.fullQualityMb=!1,t.clearedForMotionBlur=[],t.desktopTapThreshold=e.desktopTapThreshold,t.desktopTapThreshold2=e.desktopTapThreshold*e.desktopTapThreshold,t.touchTapThreshold=e.touchTapThreshold,t.touchTapThreshold2=e.touchTapThreshold*e.touchTapThreshold,t.tapholdDuration=500,t.bindings=[],t.beforeRenderCallbacks=[],t.beforeRenderPriorities={animations:400,eleCalcs:300,eleTxrDeq:200,lyrTxrDeq:150,lyrTxrSkip:100},t.registerNodeShapes(),t.registerArrowShapes(),t.registerCalculationListeners()},rl.notify=function(e,t){var n=this,r=n.cy;this.destroyed||("init"!==e?"destroy"!==e?(("add"===e||"remove"===e||"move"===e&&r.hasCompoundNodes()||"load"===e||"zorder"===e||"mount"===e)&&n.invalidateCachedZSortedEles(),"viewport"===e&&n.redrawHint("select",!0),"load"!==e&&"resize"!==e&&"mount"!==e||(n.invalidateContainerClientCoordsCache(),n.matchCanvasSize(n.container)),n.redrawHint("eles",!0),n.redrawHint("drag",!0),this.startRenderLoop(),this.redraw()):n.destroy():n.load())},rl.destroy=function(){var e=this;e.destroyed=!0,e.cy.stopAnimationLoop();for(var t=0;t<e.bindings.length;t++){var n=e.bindings[t],r=n.target;(r.off||r.removeEventListener).apply(r,n.args)}if(e.bindings=[],e.beforeRenderCallbacks=[],e.onUpdateEleCalcsFns=[],e.removeObserver&&e.removeObserver.disconnect(),e.styleObserver&&e.styleObserver.disconnect(),e.labelCalcDiv)try{document.body.removeChild(e.labelCalcDiv)}catch(e){}},rl.isHeadless=function(){return!1},[Lo,$o,Qo,Zo,Jo,el].forEach((function(e){R(rl,e)}));var il=function(e){return function(){var t=this,n=this.renderer;if(!t.dequeueingSetup){t.dequeueingSetup=!0;var r=i((function(){n.redrawHint("eles",!0),n.redrawHint("drag",!0),n.redraw()}),e.deqRedrawThreshold),a=e.priority||le;n.beforeRender((function(i,a){var o=H(),l=n.averageRedrawTime,u=n.lastRedrawTime,s=[],c=n.cy.extent(),f=n.getPixelRatio();for(i||n.flushRenderedStyleQueue();;){var d=H(),h=d-o,p=d-a;if(u<1e3/60){var v=1e3/60-(i?l:0);if(p>=e.deqFastCost*v)break}else if(i){if(h>=e.deqCost*u||h>=e.deqAvgCost*l)break}else if(p>=e.deqNoDrawCost*(1e3/60))break;var g=e.deq(t,f,c);if(!(g.length>0))break;for(var y=0;y<g.length;y++)s.push(g[y])}s.length>0&&(e.onDeqd(t,s),!i&&e.shouldRedraw(t,s,f,c)&&r())}),a(t))}}},al=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ae;l(this,e),this.idsByKey=new xe,this.keyForId=new xe,this.cachesByLvl=new xe,this.lvls=[],this.getKey=t,this.doesEleInvalidateKey=n}return s(e,[{key:"getIdsFor",value:function(e){null==e&&ue("Can not get id list for null key");var t=this.idsByKey,n=this.idsByKey.get(e);return n||(n=new Ee,t.set(e,n)),n}},{key:"addIdForKey",value:function(e,t){null!=e&&this.getIdsFor(e).add(t)}},{key:"deleteIdForKey",value:function(e,t){null!=e&&this.getIdsFor(e).delete(t)}},{key:"getNumberOfIdsForKey",value:function(e){return null==e?0:this.getIdsFor(e).size}},{key:"updateKeyMappingFor",value:function(e){var t=e.id(),n=this.keyForId.get(t),r=this.getKey(e);this.deleteIdForKey(n,t),this.addIdForKey(r,t),this.keyForId.set(t,r)}},{key:"deleteKeyMappingFor",value:function(e){var t=e.id(),n=this.keyForId.get(t);this.deleteIdForKey(n,t),this.keyForId.delete(t)}},{key:"keyHasChangedFor",value:function(e){var t=e.id();return this.keyForId.get(t)!==this.getKey(e)}},{key:"isInvalid",value:function(e){return this.keyHasChangedFor(e)||this.doesEleInvalidateKey(e)}},{key:"getCachesAt",value:function(e){var t=this.cachesByLvl,n=this.lvls,r=t.get(e);return r||(r=new xe,t.set(e,r),n.push(e)),r}},{key:"getCache",value:function(e,t){return this.getCachesAt(t).get(e)}},{key:"get",value:function(e,t){var n=this.getKey(e),r=this.getCache(n,t);return null!=r&&this.updateKeyMappingFor(e),r}},{key:"getForCachedKey",value:function(e,t){var n=this.keyForId.get(e.id());return this.getCache(n,t)}},{key:"hasCache",value:function(e,t){return this.getCachesAt(t).has(e)}},{key:"has",value:function(e,t){var n=this.getKey(e);return this.hasCache(n,t)}},{key:"setCache",value:function(e,t,n){n.key=e,this.getCachesAt(t).set(e,n)}},{key:"set",value:function(e,t,n){var r=this.getKey(e);this.setCache(r,t,n),this.updateKeyMappingFor(e)}},{key:"deleteCache",value:function(e,t){this.getCachesAt(t).delete(e)}},{key:"delete",value:function(e,t){var n=this.getKey(e);this.deleteCache(n,t)}},{key:"invalidateKey",value:function(e){var t=this;this.lvls.forEach((function(n){return t.deleteCache(e,n)}))}},{key:"invalidate",value:function(e){var t=e.id(),n=this.keyForId.get(t);this.deleteKeyMappingFor(e);var r=this.doesEleInvalidateKey(e);return r&&this.invalidateKey(n),r||0===this.getNumberOfIdsForKey(n)}}]),e}(),ol={dequeue:"dequeue",downscale:"downscale",highQuality:"highQuality"},ll=ve({getKey:null,doesEleInvalidateKey:ae,drawElement:null,getBoundingBox:null,getRotationPoint:null,getRotationOffset:null,isVisible:ie,allowEdgeTxrCaching:!0,allowParentTxrCaching:!0}),ul=function(e,t){this.renderer=e,this.onDequeues=[];var n=ll(t);R(this,n),this.lookup=new al(n.getKey,n.doesEleInvalidateKey),this.setupDequeueing()},sl=ul.prototype;sl.reasons=ol,sl.getTextureQueue=function(e){return this.eleImgCaches=this.eleImgCaches||{},this.eleImgCaches[e]=this.eleImgCaches[e]||[]},sl.getRetiredTextureQueue=function(e){var t=this.eleImgCaches.retired=this.eleImgCaches.retired||{};return t[e]=t[e]||[]},sl.getElementQueue=function(){return this.eleCacheQueue=this.eleCacheQueue||new a((function(e,t){return t.reqs-e.reqs}))},sl.getElementKeyToQueue=function(){return this.eleKeyToCacheQueue=this.eleKeyToCacheQueue||{}},sl.getElement=function(e,t,n,r,i){var a=this,o=this.renderer,l=o.cy.zoom(),u=this.lookup;if(0===t.w||0===t.h||isNaN(t.w)||isNaN(t.h)||!e.visible())return null;if(!a.allowEdgeTxrCaching&&e.isEdge()||!a.allowParentTxrCaching&&e.isParent())return null;if(null==r&&(r=Math.ceil(Ke(l*n))),r<-4)r=-4;else if(l>=7.99||r>3)return null;var s=Math.pow(2,r),c=t.h*s,f=t.w*s,d=o.eleTextBiggerThanMin(e,s);if(!this.isVisible(e,d))return null;var h,p=u.get(e,r);if(p&&p.invalidated&&(p.invalidated=!1,p.texture.invalidatedWidth-=p.width),p)return p;if(h=c<=25?25:c<=50?50:50*Math.ceil(c/50),c>1024||f>1024)return null;var v=a.getTextureQueue(h),g=v[v.length-2],y=function(){return a.recycleTexture(h,f)||a.addTexture(h,f)};g||(g=v[v.length-1]),g||(g=y()),g.width-g.usedWidth<f&&(g=y());for(var m,b=function(e){return e&&e.scaledLabelShown===d},x=i&&i===ol.dequeue,w=i&&i===ol.highQuality,E=i&&i===ol.downscale,k=r+1;k<=3;k++){var S=u.get(e,k);if(S){m=S;break}}var T=m&&m.level===r+1?m:null,P=function(){g.context.drawImage(T.texture.canvas,T.x,0,T.width,T.height,g.usedWidth,0,f,c)};if(g.context.setTransform(1,0,0,1,0,0),g.context.clearRect(g.usedWidth,0,f,h),b(T))P();else if(b(m)){if(!w)return a.queueElement(e,m.level-1),m;for(var C=m.level;C>r;C--)T=a.getElement(e,t,n,C,ol.downscale);P()}else{var _;if(!x&&!w&&!E)for(var M=r-1;M>=-4;M--){var O=u.get(e,M);if(O){_=O;break}}if(b(_))return a.queueElement(e,r),_;g.context.translate(g.usedWidth,0),g.context.scale(s,s),this.drawElement(g.context,e,t,d,!1),g.context.scale(1/s,1/s),g.context.translate(-g.usedWidth,0)}return p={x:g.usedWidth,texture:g,level:r,scale:s,width:f,height:c,scaledLabelShown:d},g.usedWidth+=Math.ceil(f+8),g.eleCaches.push(p),u.set(e,r,p),a.checkTextureFullness(g),p},sl.invalidateElements=function(e){for(var t=0;t<e.length;t++)this.invalidateElement(e[t])},sl.invalidateElement=function(e){var t=this.lookup,n=[];if(t.isInvalid(e)){for(var r=-4;r<=3;r++){var i=t.getForCachedKey(e,r);i&&n.push(i)}if(t.invalidate(e))for(var a=0;a<n.length;a++){var o=n[a],l=o.texture;l.invalidatedWidth+=o.width,o.invalidated=!0,this.checkTextureUtility(l)}this.removeFromQueue(e)}},sl.checkTextureUtility=function(e){e.invalidatedWidth>=.2*e.width&&this.retireTexture(e)},sl.checkTextureFullness=function(e){var t=this.getTextureQueue(e.height);e.usedWidth/e.width>.8&&e.fullnessChecks>=10?ge(t,e):e.fullnessChecks++},sl.retireTexture=function(e){var t=e.height,n=this.getTextureQueue(t),r=this.lookup;ge(n,e),e.retired=!0;for(var i=e.eleCaches,a=0;a<i.length;a++){var o=i[a];r.deleteCache(o.key,o.level)}ye(i),this.getRetiredTextureQueue(t).push(e)},sl.addTexture=function(e,t){var n={};return this.getTextureQueue(e).push(n),n.eleCaches=[],n.height=e,n.width=Math.max(1024,t),n.usedWidth=0,n.invalidatedWidth=0,n.fullnessChecks=0,n.canvas=this.renderer.makeOffscreenCanvas(n.width,n.height),n.context=n.canvas.getContext("2d"),n},sl.recycleTexture=function(e,t){for(var n=this.getTextureQueue(e),r=this.getRetiredTextureQueue(e),i=0;i<r.length;i++){var a=r[i];if(a.width>=t)return a.retired=!1,a.usedWidth=0,a.invalidatedWidth=0,a.fullnessChecks=0,ye(a.eleCaches),a.context.setTransform(1,0,0,1,0,0),a.context.clearRect(0,0,a.width,a.height),ge(r,a),n.push(a),a}},sl.queueElement=function(e,t){var n=this.getElementQueue(),r=this.getElementKeyToQueue(),i=this.getKey(e),a=r[i];if(a)a.level=Math.max(a.level,t),a.eles.merge(e),a.reqs++,n.updateItem(a);else{var o={eles:e.spawn().merge(e),level:t,reqs:1,key:i};n.push(o),r[i]=o}},sl.dequeue=function(e){for(var t=this.getElementQueue(),n=this.getElementKeyToQueue(),r=[],i=this.lookup,a=0;a<1&&t.size()>0;a++){var o=t.pop(),l=o.key,u=o.eles[0],s=i.hasCache(u,o.level);if(n[l]=null,!s){r.push(o);var c=this.getBoundingBox(u);this.getElement(u,c,e,o.level,ol.dequeue)}}return r},sl.removeFromQueue=function(e){var t=this.getElementQueue(),n=this.getElementKeyToQueue(),r=this.getKey(e),i=n[r];null!=i&&(1===i.eles.length?(i.reqs=re,t.updateItem(i),t.pop(),n[r]=null):i.eles.unmerge(e))},sl.onDequeue=function(e){this.onDequeues.push(e)},sl.offDequeue=function(e){ge(this.onDequeues,e)},sl.setupDequeueing=il({deqRedrawThreshold:100,deqCost:.15,deqAvgCost:.1,deqNoDrawCost:.9,deqFastCost:.9,deq:function(e,t,n){return e.dequeue(t,n)},onDeqd:function(e,t){for(var n=0;n<e.onDequeues.length;n++){(0,e.onDequeues[n])(t)}},shouldRedraw:function(e,t,n,r){for(var i=0;i<t.length;i++)for(var a=t[i].eles,o=0;o<a.length;o++){var l=a[o].boundingBox();if(dt(l,r))return!0}return!1},priority:function(e){return e.renderer.beforeRenderPriorities.eleTxrDeq}});var cl=function(e){var t=this,n=t.renderer=e,r=n.cy;t.layersByLevel={},t.firstGet=!0,t.lastInvalidationTime=H()-500,t.skipping=!1,t.eleTxrDeqs=r.collection(),t.scheduleElementRefinement=i((function(){t.refineElementTextures(t.eleTxrDeqs),t.eleTxrDeqs.unmerge(t.eleTxrDeqs)}),50),n.beforeRender((function(e,n){n-t.lastInvalidationTime<=250?t.skipping=!0:t.skipping=!1}),n.beforeRenderPriorities.lyrTxrSkip);t.layersQueue=new a((function(e,t){return t.reqs-e.reqs})),t.setupDequeueing()},fl=cl.prototype,dl=0,hl=Math.pow(2,53)-1;fl.makeLayer=function(e,t){var n=Math.pow(2,t),r=Math.ceil(e.w*n),i=Math.ceil(e.h*n),a=this.renderer.makeOffscreenCanvas(r,i),o={id:dl=++dl%hl,bb:e,level:t,width:r,height:i,canvas:a,context:a.getContext("2d"),eles:[],elesQueue:[],reqs:0},l=o.context,u=-o.bb.x1,s=-o.bb.y1;return l.scale(n,n),l.translate(u,s),o},fl.getLayers=function(e,t,n){var r=this,i=r.renderer.cy.zoom(),a=r.firstGet;if(r.firstGet=!1,null==n)if((n=Math.ceil(Ke(i*t)))<-4)n=-4;else if(i>=3.99||n>2)return null;r.validateLayersElesOrdering(n,e);var o,l,u=r.layersByLevel,s=Math.pow(2,n),c=u[n]=u[n]||[];if(r.levelIsComplete(n,e))return c;!function(){var t=function(t){if(r.validateLayersElesOrdering(t,e),r.levelIsComplete(t,e))return l=u[t],!0},i=function(e){if(!l)for(var r=n+e;-4<=r&&r<=2&&!t(r);r+=e);};i(1),i(-1);for(var a=c.length-1;a>=0;a--){var o=c[a];o.invalid&&ge(c,o)}}();var f=function(t){var i=(t=t||{}).after;if(function(){if(!o){o=it();for(var t=0;t<e.length;t++)lt(o,e[t].boundingBox())}}(),o.w*s*(o.h*s)>16e6)return null;var a=r.makeLayer(o,n);if(null!=i){var l=c.indexOf(i)+1;c.splice(l,0,a)}else(void 0===t.insert||t.insert)&&c.unshift(a);return a};if(r.skipping&&!a)return null;for(var d=null,h=e.length/1,p=!a,v=0;v<e.length;v++){var g=e[v],y=g._private.rscratch,m=y.imgLayerCaches=y.imgLayerCaches||{},b=m[n];if(b)d=b;else{if((!d||d.eles.length>=h||!vt(d.bb,g.boundingBox()))&&!(d=f({insert:!0,after:d})))return null;l||p?r.queueLayer(d,g):r.drawEleInLayer(d,g,n,t),d.eles.push(g),m[n]=d}}return l||(p?null:c)},fl.getEleLevelForLayerLevel=function(e,t){return e},fl.drawEleInLayer=function(e,t,n,r){var i=this.renderer,a=e.context,o=t.boundingBox();0!==o.w&&0!==o.h&&t.visible()&&(n=this.getEleLevelForLayerLevel(n,r),i.setImgSmoothing(a,!1),i.drawCachedElement(a,t,null,null,n,!0),i.setImgSmoothing(a,!0))},fl.levelIsComplete=function(e,t){var n=this.layersByLevel[e];if(!n||0===n.length)return!1;for(var r=0,i=0;i<n.length;i++){var a=n[i];if(a.reqs>0)return!1;if(a.invalid)return!1;r+=a.eles.length}return r===t.length},fl.validateLayersElesOrdering=function(e,t){var n=this.layersByLevel[e];if(n)for(var r=0;r<n.length;r++){for(var i=n[r],a=-1,o=0;o<t.length;o++)if(i.eles[0]===t[o]){a=o;break}if(a<0)this.invalidateLayer(i);else{var l=a;for(o=0;o<i.eles.length;o++)if(i.eles[o]!==t[l+o]){this.invalidateLayer(i);break}}}},fl.updateElementsInLayers=function(e,t){for(var n=T(e[0]),r=0;r<e.length;r++)for(var i=n?null:e[r],a=n?e[r]:e[r].ele,o=a._private.rscratch,l=o.imgLayerCaches=o.imgLayerCaches||{},u=-4;u<=2;u++){var s=l[u];s&&(i&&this.getEleLevelForLayerLevel(s.level)!==i.level||t(s,a,i))}},fl.haveLayers=function(){for(var e=!1,t=-4;t<=2;t++){var n=this.layersByLevel[t];if(n&&n.length>0){e=!0;break}}return e},fl.invalidateElements=function(e){var t=this;0!==e.length&&(t.lastInvalidationTime=H(),0!==e.length&&t.haveLayers()&&t.updateElementsInLayers(e,(function(e,n,r){t.invalidateLayer(e)})))},fl.invalidateLayer=function(e){if(this.lastInvalidationTime=H(),!e.invalid){var t=e.level,n=e.eles,r=this.layersByLevel[t];ge(r,e),e.elesQueue=[],e.invalid=!0,e.replacement&&(e.replacement.invalid=!0);for(var i=0;i<n.length;i++){var a=n[i]._private.rscratch.imgLayerCaches;a&&(a[t]=null)}}},fl.refineElementTextures=function(e){var t=this;t.updateElementsInLayers(e,(function(e,n,r){var i=e.replacement;if(i||((i=e.replacement=t.makeLayer(e.bb,e.level)).replaces=e,i.eles=e.eles),!i.reqs)for(var a=0;a<i.eles.length;a++)t.queueLayer(i,i.eles[a])}))},fl.enqueueElementRefinement=function(e){this.eleTxrDeqs.merge(e),this.scheduleElementRefinement()},fl.queueLayer=function(e,t){var n=this.layersQueue,r=e.elesQueue,i=r.hasId=r.hasId||{};if(!e.replacement){if(t){if(i[t.id()])return;r.push(t),i[t.id()]=!0}e.reqs?(e.reqs++,n.updateItem(e)):(e.reqs=1,n.push(e))}},fl.dequeue=function(e){for(var t=this.layersQueue,n=[],r=0;r<1&&0!==t.size();){var i=t.peek();if(i.replacement)t.pop();else if(i.replaces&&i!==i.replaces.replacement)t.pop();else if(i.invalid)t.pop();else{var a=i.elesQueue.shift();a&&(this.drawEleInLayer(i,a,i.level,e),r++),0===n.length&&n.push(!0),0===i.elesQueue.length&&(t.pop(),i.reqs=0,i.replaces&&this.applyLayerReplacement(i),this.requestRedraw())}}return n},fl.applyLayerReplacement=function(e){var t=this.layersByLevel[e.level],n=e.replaces,r=t.indexOf(n);if(!(r<0||n.invalid)){t[r]=e;for(var i=0;i<e.eles.length;i++){var a=e.eles[i]._private,o=a.imgLayerCaches=a.imgLayerCaches||{};o&&(o[e.level]=e)}this.requestRedraw()}},fl.requestRedraw=i((function(){var e=this.renderer;e.redrawHint("eles",!0),e.redrawHint("drag",!0),e.redraw()}),100),fl.setupDequeueing=il({deqRedrawThreshold:50,deqCost:.15,deqAvgCost:.1,deqNoDrawCost:.9,deqFastCost:.9,deq:function(e,t){return e.dequeue(t)},onDeqd:le,shouldRedraw:ie,priority:function(e){return e.renderer.beforeRenderPriorities.lyrTxrDeq}});var pl,vl={};function gl(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.lineTo(r.x,r.y)}}function yl(e,t,n){for(var r,i=0;i<t.length;i++){var a=t[i];0===i&&(r=a),e.lineTo(a.x,a.y)}e.quadraticCurveTo(n.x,n.y,r.x,r.y)}function ml(e,t,n){e.beginPath&&e.beginPath();for(var r=t,i=0;i<r.length;i++){var a=r[i];e.lineTo(a.x,a.y)}var o=n,l=n[0];e.moveTo(l.x,l.y);for(i=1;i<o.length;i++){a=o[i];e.lineTo(a.x,a.y)}e.closePath&&e.closePath()}function bl(e,t,n,r){e.arc(t,n,r,0,2*Math.PI,!1)}vl.arrowShapeImpl=function(e){return(pl||(pl={polygon:gl,"triangle-backcurve":yl,"triangle-tee":ml,"triangle-cross":ml,circle:bl}))[e]};var xl={drawElement:function(e,t,n,r,i,a){t.isNode()?this.drawNode(e,t,n,r,i,a):this.drawEdge(e,t,n,r,i,a)},drawElementOverlay:function(e,t){t.isNode()?this.drawNodeOverlay(e,t):this.drawEdgeOverlay(e,t)},drawCachedElementPortion:function(e,t,n,r,i,a,o,l){var u=this,s=n.getBoundingBox(t);if(0!==s.w&&0!==s.h){var c=n.getElement(t,s,r,i,a);if(null!=c){var f=l(u,t);if(0===f)return;var d,h,p,v,g,y,m=o(u,t),b=s.x1,x=s.y1,w=s.w,E=s.h;if(0!==m){var k=n.getRotationPoint(t);p=k.x,v=k.y,e.translate(p,v),e.rotate(m),(g=u.getImgSmoothing(e))||u.setImgSmoothing(e,!0);var S=n.getRotationOffset(t);d=S.x,h=S.y}else d=b,h=x;1!==f&&(y=e.globalAlpha,e.globalAlpha=y*f),e.drawImage(c.texture.canvas,c.x,0,c.width,c.height,d,h,w,E),1!==f&&(e.globalAlpha=y),0!==m&&(e.rotate(-m),e.translate(-p,-v),g||u.setImgSmoothing(e,!1))}else n.drawElement(e,t)}}},wl=function(){return 0},El=function(e,t){return e.getTextAngle(t,null)},kl=function(e,t){return e.getTextAngle(t,"source")},Sl=function(e,t){return e.getTextAngle(t,"target")},Tl=function(e,t){return t.effectiveOpacity()},Pl=function(e,t){return t.pstyle("text-opacity").pfValue*t.effectiveOpacity()};xl.drawCachedElement=function(e,t,n,r,i,a){var o=this,l=o.data,u=l.eleTxrCache,s=l.lblTxrCache,c=l.slbTxrCache,f=l.tlbTxrCache,d=t.boundingBox(),h=!0===a?u.reasons.highQuality:null;0!==d.w&&0!==d.h&&t.visible()&&(r&&!dt(d,r)||(o.drawCachedElementPortion(e,t,u,n,i,h,wl,Tl),o.drawCachedElementPortion(e,t,s,n,i,h,El,Pl),t.isEdge()&&(o.drawCachedElementPortion(e,t,c,n,i,h,kl,Pl),o.drawCachedElementPortion(e,t,f,n,i,h,Sl,Pl)),o.drawElementOverlay(e,t)))},xl.drawElements=function(e,t){for(var n=0;n<t.length;n++){var r=t[n];this.drawElement(e,r)}},xl.drawCachedElements=function(e,t,n,r){for(var i=0;i<t.length;i++){var a=t[i];this.drawCachedElement(e,a,n,r)}},xl.drawCachedNodes=function(e,t,n,r){for(var i=0;i<t.length;i++){var a=t[i];a.isNode()&&this.drawCachedElement(e,a,n,r)}},xl.drawLayeredElements=function(e,t,n,r){var i=this.data.lyrTxrCache.getLayers(t,n);if(i)for(var a=0;a<i.length;a++){var o=i[a],l=o.bb;0!==l.w&&0!==l.h&&e.drawImage(o.canvas,l.x1,l.y1,l.w,l.h)}else this.drawCachedElements(e,t,n,r)};var Cl={drawEdge:function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],o=this,l=t._private.rscratch;if((!a||t.visible())&&!l.badLine&&null!=l.allpts&&!isNaN(l.allpts[0])){var u;n&&(u=n,e.translate(-u.x1,-u.y1));var s=a?t.pstyle("opacity").value:1,c=t.pstyle("line-style").value,f=t.pstyle("width").pfValue,d=t.pstyle("line-cap").value,h=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s;e.lineWidth=f,e.lineCap=d,o.eleStrokeStyle(e,t,n),o.drawEdgePath(t,e,l.allpts,c),e.lineCap="butt"},p=function(){i&&o.drawEdgeOverlay(e,t)},v=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s;o.drawArrowheads(e,t,n)},g=function(){o.drawElementText(e,t,null,r)};e.lineJoin="round";var y="yes"===t.pstyle("ghost").value;if(y){var m=t.pstyle("ghost-offset-x").pfValue,b=t.pstyle("ghost-offset-y").pfValue,x=t.pstyle("ghost-opacity").value,w=s*x;e.translate(m,b),h(w),v(w),e.translate(-m,-b)}h(),v(),p(),g(),n&&e.translate(u.x1,u.y1)}},drawEdgeOverlay:function(e,t){if(t.visible()){var n=t.pstyle("overlay-opacity").value;if(0!==n){var r=this,i=r.usePaths(),a=t._private.rscratch,o=2*t.pstyle("overlay-padding").pfValue,l=t.pstyle("overlay-color").value;e.lineWidth=o,"self"!==a.edgeType||i?e.lineCap="round":e.lineCap="butt",r.colorStrokeStyle(e,l[0],l[1],l[2],n),r.drawEdgePath(t,e,a.allpts,"solid")}}},drawEdgePath:function(e,t,n,r){var i,a=e._private.rscratch,o=t,l=!1,u=this.usePaths(),s=e.pstyle("line-dash-pattern").pfValue,c=e.pstyle("line-dash-offset").pfValue;if(u){var f=n.join("$");a.pathCacheKey&&a.pathCacheKey===f?(i=t=a.pathCache,l=!0):(i=t=new Path2D,a.pathCacheKey=f,a.pathCache=i)}if(o.setLineDash)switch(r){case"dotted":o.setLineDash([1,1]);break;case"dashed":o.setLineDash(s),o.lineDashOffset=c;break;case"solid":o.setLineDash([])}if(!l&&!a.badLine)switch(t.beginPath&&t.beginPath(),t.moveTo(n[0],n[1]),a.edgeType){case"bezier":case"self":case"compound":case"multibezier":for(var d=2;d+3<n.length;d+=4)t.quadraticCurveTo(n[d],n[d+1],n[d+2],n[d+3]);break;case"straight":case"segments":case"haystack":for(var h=2;h+1<n.length;h+=2)t.lineTo(n[h],n[h+1])}t=o,u?t.stroke(i):t.stroke(),t.setLineDash&&t.setLineDash([])},drawArrowheads:function(e,t,n){var r=t._private.rscratch,i="haystack"===r.edgeType;i||this.drawArrowhead(e,t,"source",r.arrowStartX,r.arrowStartY,r.srcArrowAngle,n),this.drawArrowhead(e,t,"mid-target",r.midX,r.midY,r.midtgtArrowAngle,n),this.drawArrowhead(e,t,"mid-source",r.midX,r.midY,r.midsrcArrowAngle,n),i||this.drawArrowhead(e,t,"target",r.arrowEndX,r.arrowEndY,r.tgtArrowAngle,n)},drawArrowhead:function(e,t,n,r,i,a,o){if(!(isNaN(r)||null==r||isNaN(i)||null==i||isNaN(a)||null==a)){var l=t.pstyle(n+"-arrow-shape").value;if("none"!==l){var u="hollow"===t.pstyle(n+"-arrow-fill").value?"both":"filled",s=t.pstyle(n+"-arrow-fill").value,c=t.pstyle("width").pfValue,f=t.pstyle("opacity").value;void 0===o&&(o=f);var d=e.globalCompositeOperation;1===o&&"hollow"!==s||(e.globalCompositeOperation="destination-out",this.colorFillStyle(e,255,255,255,1),this.colorStrokeStyle(e,255,255,255,1),this.drawArrowShape(t,e,u,c,l,r,i,a),e.globalCompositeOperation=d);var h=t.pstyle(n+"-arrow-color").value;this.colorFillStyle(e,h[0],h[1],h[2],o),this.colorStrokeStyle(e,h[0],h[1],h[2],o),this.drawArrowShape(t,e,s,c,l,r,i,a)}}},drawArrowShape:function(e,t,n,r,i,a,o,l){var u,s=this,c=this.usePaths()&&"triangle-cross"!==i,f=!1,d=t,h={x:a,y:o},p=e.pstyle("arrow-scale").value,v=this.getArrowWidth(r,p),g=s.arrowShapes[i];if(c){var y=s.arrowPathCache=s.arrowPathCache||[],m=Q(i),b=y[m];null!=b?(u=t=b,f=!0):(u=t=new Path2D,y[m]=u)}t.beginPath&&t.beginPath(),f||(c?g.draw(t,1,0,{x:0,y:0},1):g.draw(t,v,l,h,r)),t.closePath&&t.closePath(),t=d,c&&(t.translate(a,o),t.rotate(l),t.scale(v,v)),"filled"!==n&&"both"!==n||(c?t.fill(u):t.fill()),"hollow"!==n&&"both"!==n||(t.lineWidth=(g.matchEdgeWidth?r:1)/(c?v:1),t.lineJoin="miter",c?t.stroke(u):t.stroke()),c&&(t.scale(1/v,1/v),t.rotate(-l),t.translate(-a,-o))}},_l={safeDrawImage:function(e,t,n,r,i,a,o,l,u,s){i<=0||a<=0||u<=0||s<=0||e.drawImage(t,n,r,i,a,o,l,u,s)},drawInscribedImage:function(e,t,n,r,i){var a=this,o=n.position(),l=o.x,u=o.y,s=n.cy().style(),c=s.getIndexedStyle.bind(s),f=c(n,"background-fit","value",r),d=c(n,"background-repeat","value",r),h=n.width(),p=n.height(),v=2*n.padding(),g=h+("inner"===c(n,"background-width-relative-to","value",r)?0:v),y=p+("inner"===c(n,"background-height-relative-to","value",r)?0:v),m=n._private.rscratch,b="node"===c(n,"background-clip","value",r),x=c(n,"background-image-opacity","value",r)*i,w=t.width||t.cachedW,E=t.height||t.cachedH;null!=w&&null!=E||(document.body.appendChild(t),w=t.cachedW=t.width||t.offsetWidth,E=t.cachedH=t.height||t.offsetHeight,document.body.removeChild(t));var k=w,S=E;if("auto"!==c(n,"background-width","value",r)&&(k="%"===c(n,"background-width","units",r)?c(n,"background-width","pfValue",r)*g:c(n,"background-width","pfValue",r)),"auto"!==c(n,"background-height","value",r)&&(S="%"===c(n,"background-height","units",r)?c(n,"background-height","pfValue",r)*y:c(n,"background-height","pfValue",r)),0!==k&&0!==S){if("contain"===f)k*=T=Math.min(g/k,y/S),S*=T;else if("cover"===f){var T;k*=T=Math.max(g/k,y/S),S*=T}var P=l-g/2,C=c(n,"background-position-x","units",r),_=c(n,"background-position-x","pfValue",r);P+="%"===C?(g-k)*_:_;var M=c(n,"background-offset-x","units",r),O=c(n,"background-offset-x","pfValue",r);P+="%"===M?(g-k)*O:O;var N=u-y/2,D=c(n,"background-position-y","units",r),I=c(n,"background-position-y","pfValue",r);N+="%"===D?(y-S)*I:I;var A=c(n,"background-offset-y","units",r),L=c(n,"background-offset-y","pfValue",r);N+="%"===A?(y-S)*L:L,m.pathCache&&(P-=l,N-=u,l=0,u=0);var B=e.globalAlpha;if(e.globalAlpha=x,"no-repeat"===d)b&&(e.save(),m.pathCache?e.clip(m.pathCache):(a.nodeShapes[a.getNodeShape(n)].draw(e,l,u,g,y),e.clip())),a.safeDrawImage(e,t,0,0,w,E,P,N,k,S),b&&e.restore();else{var z=e.createPattern(t,d);e.fillStyle=z,a.nodeShapes[a.getNodeShape(n)].draw(e,l,u,g,y),e.translate(P,N),e.fill(),e.translate(-P,-N)}e.globalAlpha=B}}},Ml={};function Ol(e,t,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:5;e.beginPath(),e.moveTo(t+a,n),e.lineTo(t+r-a,n),e.quadraticCurveTo(t+r,n,t+r,n+a),e.lineTo(t+r,n+i-a),e.quadraticCurveTo(t+r,n+i,t+r-a,n+i),e.lineTo(t+a,n+i),e.quadraticCurveTo(t,n+i,t,n+i-a),e.lineTo(t,n+a),e.quadraticCurveTo(t,n,t+a,n),e.closePath(),e.fill()}Ml.eleTextBiggerThanMin=function(e,t){if(!t){var n=e.cy().zoom(),r=this.getPixelRatio(),i=Math.ceil(Ke(n*r));t=Math.pow(2,i)}return!(e.pstyle("font-size").pfValue*t<e.pstyle("min-zoomed-font-size").pfValue)},Ml.drawElementText=function(e,t,n,r,i){var a=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],o=this;if(null==r){if(a&&!o.eleTextBiggerThanMin(t))return}else if(!1===r)return;if(t.isNode()){var l=t.pstyle("label");if(!l||!l.value)return;var u=o.getLabelJustification(t);e.textAlign=u,e.textBaseline="bottom"}else{var s=t.pstyle("label"),c=t.pstyle("source-label"),f=t.pstyle("target-label");if(!(s&&s.value||c&&c.value||f&&f.value))return;e.textAlign="center",e.textBaseline="bottom"}var d,h=!n;n&&(d=n,e.translate(-d.x1,-d.y1)),null==i?(o.drawText(e,t,null,h,a),t.isEdge()&&(o.drawText(e,t,"source",h,a),o.drawText(e,t,"target",h,a))):o.drawText(e,t,i,h,a),n&&e.translate(d.x1,d.y1)},Ml.getFontCache=function(e){var t;this.fontCaches=this.fontCaches||[];for(var n=0;n<this.fontCaches.length;n++)if((t=this.fontCaches[n]).context===e)return t;return t={context:e},this.fontCaches.push(t),t},Ml.setupTextStyle=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=t.pstyle("font-style").strValue,i=t.pstyle("font-size").pfValue+"px",a=t.pstyle("font-family").strValue,o=t.pstyle("font-weight").strValue,l=n?t.effectiveOpacity()*t.pstyle("text-opacity").value:1,u=t.pstyle("text-outline-opacity").value*l,s=t.pstyle("color").value,c=t.pstyle("text-outline-color").value;e.font=r+" "+o+" "+i+" "+a,e.lineJoin="round",this.colorFillStyle(e,s[0],s[1],s[2],l),this.colorStrokeStyle(e,c[0],c[1],c[2],u)},Ml.getTextAngle=function(e,t){var n=e._private.rscratch,r=t?t+"-":"",i=e.pstyle(r+"text-rotation"),a=me(n,"labelAngle",t);return"autorotate"===i.strValue?e.isEdge()?a:0:"none"===i.strValue?0:i.pfValue},Ml.drawText=function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=t._private,o=a.rscratch,l=i?t.effectiveOpacity():1;if(!i||0!==l&&0!==t.pstyle("text-opacity").value){"main"===n&&(n=null);var u,s,c=me(o,"labelX",n),f=me(o,"labelY",n),d=this.getLabelText(t,n);if(null!=d&&""!==d&&!isNaN(c)&&!isNaN(f)){this.setupTextStyle(e,t,i);var h,p=n?n+"-":"",v=me(o,"labelWidth",n),g=me(o,"labelHeight",n),y=t.pstyle(p+"text-margin-x").pfValue,m=t.pstyle(p+"text-margin-y").pfValue,b=t.isEdge(),x=t.pstyle("text-halign").value,w=t.pstyle("text-valign").value;switch(b&&(x="center",w="center"),c+=y,f+=m,0!==(h=r?this.getTextAngle(t,n):0)&&(u=c,s=f,e.translate(u,s),e.rotate(h),c=0,f=0),w){case"top":break;case"center":f+=g/2;break;case"bottom":f+=g}var E=t.pstyle("text-background-opacity").value,k=t.pstyle("text-border-opacity").value,S=t.pstyle("text-border-width").pfValue,T=t.pstyle("text-background-padding").pfValue;if(E>0||S>0&&k>0){var P=c-T;switch(x){case"left":P-=v;break;case"center":P-=v/2}var C=f-g-T,_=v+2*T,M=g+2*T;if(E>0){var O=e.fillStyle,N=t.pstyle("text-background-color").value;e.fillStyle="rgba("+N[0]+","+N[1]+","+N[2]+","+E*l+")";var D=t.pstyle("text-background-shape").strValue;"roundrectangle"==D?Ol(e,P,C,_,M,2):e.fillRect(P,C,_,M),e.fillStyle=O}if(S>0&&k>0){var I=e.strokeStyle,A=e.lineWidth,L=t.pstyle("text-border-color").value,B=t.pstyle("text-border-style").value;if(e.strokeStyle="rgba("+L[0]+","+L[1]+","+L[2]+","+k*l+")",e.lineWidth=S,e.setLineDash)switch(B){case"dotted":e.setLineDash([1,1]);break;case"dashed":e.setLineDash([4,2]);break;case"double":e.lineWidth=S/4,e.setLineDash([]);break;case"solid":e.setLineDash([])}if(e.strokeRect(P,C,_,M),"double"===B){var z=S/2;e.strokeRect(P+z,C+z,_-2*z,M-2*z)}e.setLineDash&&e.setLineDash([]),e.lineWidth=A,e.strokeStyle=I}}var R=2*t.pstyle("text-outline-width").pfValue;if(R>0&&(e.lineWidth=R),"wrap"===t.pstyle("text-wrap").value){var F=me(o,"labelWrapCachedLines",n),j=me(o,"labelLineHeight",n),V=v/2,q=this.getLabelJustification(t);switch("auto"===q||("left"===x?"left"===q?c+=-v:"center"===q&&(c+=-V):"center"===x?"left"===q?c+=-V:"right"===q&&(c+=V):"right"===x&&("center"===q?c+=V:"right"===q&&(c+=v))),w){case"top":f-=(F.length-1)*j;break;case"center":case"bottom":f-=(F.length-1)*j}for(var W=0;W<F.length;W++)R>0&&e.strokeText(F[W],c,f),e.fillText(F[W],c,f),f+=j}else R>0&&e.strokeText(d,c,f),e.fillText(d,c,f);0!==h&&(e.rotate(-h),e.translate(-u,-s))}}};var Nl={drawNode:function(e,t,n){var r,i,a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],l=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],u=this,s=t._private,c=s.rscratch,f=t.position();if(E(f.x)&&E(f.y)&&(!l||t.visible())){var d,h,p=l?t.effectiveOpacity():1,v=u.usePaths(),g=!1,y=t.padding();r=t.width()+2*y,i=t.height()+2*y,n&&(h=n,e.translate(-h.x1,-h.y1));for(var m=t.pstyle("background-image"),b=m.value,x=new Array(b.length),w=new Array(b.length),k=0,S=0;S<b.length;S++){var T=b[S],P=x[S]=null!=T&&"none"!==T;if(P){var C=t.cy().style().getIndexedStyle(t,"background-image-crossorigin","value",S);k++,w[S]=u.getCachedImage(T,C,(function(){s.backgroundTimestamp=Date.now(),t.emitAndNotify("background")}))}}var _=t.pstyle("background-blacken").value,M=t.pstyle("border-width").pfValue,O=t.pstyle("background-opacity").value*p,N=t.pstyle("border-color").value,D=t.pstyle("border-style").value,I=t.pstyle("border-opacity").value*p;e.lineJoin="miter";var A=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:O;u.eleFillStyle(e,t,n)},L=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:I;u.colorStrokeStyle(e,N[0],N[1],N[2],t)},B=t.pstyle("shape").strValue,z=t.pstyle("shape-polygon-points").pfValue;if(v){e.translate(f.x,f.y);var R=u.nodePathCache=u.nodePathCache||[],F=Z("polygon"===B?B+","+z.join(","):B,""+i,""+r),j=R[F];null!=j?(d=j,g=!0,c.pathCache=d):(d=new Path2D,R[F]=c.pathCache=d)}var V=function(){if(!g){var n=f;v&&(n={x:0,y:0}),u.nodeShapes[u.getNodeShape(t)].draw(d||e,n.x,n.y,r,i)}v?e.fill(d):e.fill()},q=function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p,r=s.backgrounding,i=0,a=0;a<w.length;a++)x[a]&&w[a].complete&&!w[a].error&&(i++,u.drawInscribedImage(e,w[a],t,a,n));s.backgrounding=!(i===k),r!==s.backgrounding&&t.updateStyle(!1)},W=function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:p;u.hasPie(t)&&(u.drawPie(e,t,a),n&&(v||u.nodeShapes[u.getNodeShape(t)].draw(e,f.x,f.y,r,i)))},Y=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p,n=(_>0?_:-_)*t,r=_>0?0:255;0!==_&&(u.colorFillStyle(e,r,r,r,n),v?e.fill(d):e.fill())},U=function(){if(M>0){if(e.lineWidth=M,e.lineCap="butt",e.setLineDash)switch(D){case"dotted":e.setLineDash([1,1]);break;case"dashed":e.setLineDash([4,2]);break;case"solid":case"double":e.setLineDash([])}if(v?e.stroke(d):e.stroke(),"double"===D){e.lineWidth=M/3;var t=e.globalCompositeOperation;e.globalCompositeOperation="destination-out",v?e.stroke(d):e.stroke(),e.globalCompositeOperation=t}e.setLineDash&&e.setLineDash([])}},X=function(){o&&u.drawNodeOverlay(e,t,f,r,i)},H=function(){u.drawElementText(e,t,null,a)},G="yes"===t.pstyle("ghost").value;if(G){var K=t.pstyle("ghost-offset-x").pfValue,$=t.pstyle("ghost-offset-y").pfValue,Q=t.pstyle("ghost-opacity").value,J=Q*p;e.translate(K,$),A(Q*O),V(),q(J),W(0!==_||0!==M),Y(J),L(Q*I),U(),e.translate(-K,-$)}A(),V(),q(),W(0!==_||0!==M),Y(),L(),U(),v&&e.translate(-f.x,-f.y),H(),X(),n&&e.translate(h.x1,h.y1)}},drawNodeOverlay:function(e,t,n,r,i){if(t.visible()){var a=t.pstyle("overlay-padding").pfValue,o=t.pstyle("overlay-opacity").value,l=t.pstyle("overlay-color").value;if(o>0){if(n=n||t.position(),null==r||null==i){var u=t.padding();r=t.width()+2*u,i=t.height()+2*u}this.colorFillStyle(e,l[0],l[1],l[2],o),this.nodeShapes.roundrectangle.draw(e,n.x,n.y,r+2*a,i+2*a),e.fill()}}},hasPie:function(e){return(e=e[0])._private.hasPie},drawPie:function(e,t,n,r){t=t[0],r=r||t.position();var i=t.cy().style(),a=t.pstyle("pie-size"),o=r.x,l=r.y,u=t.width(),s=t.height(),c=Math.min(u,s)/2,f=0;this.usePaths()&&(o=0,l=0),"%"===a.units?c*=a.pfValue:void 0!==a.pfValue&&(c=a.pfValue/2);for(var d=1;d<=i.pieBackgroundN;d++){var h=t.pstyle("pie-"+d+"-background-size").value,p=t.pstyle("pie-"+d+"-background-color").value,v=t.pstyle("pie-"+d+"-background-opacity").value*n,g=h/100;g+f>1&&(g=1-f);var y=1.5*Math.PI+2*Math.PI*f,m=y+2*Math.PI*g;0===h||f>=1||f+g>1||(e.beginPath(),e.moveTo(o,l),e.arc(o,l,c,y,m),e.closePath(),this.colorFillStyle(e,p[0],p[1],p[2],v),e.fill(),f+=g)}}},Dl={};Dl.getPixelRatio=function(){var e=this.data.contexts[0];if(null!=this.forcedPixelRatio)return this.forcedPixelRatio;var t=e.backingStorePixelRatio||e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;return(window.devicePixelRatio||1)/t},Dl.paintCache=function(e){for(var t,n=this.paintCaches=this.paintCaches||[],r=!0,i=0;i<n.length;i++)if((t=n[i]).context===e){r=!1;break}return r&&(t={context:e},n.push(t)),t},Dl.createGradientStyleFor=function(e,t,n,r,i){var a,o=this.usePaths(),l=n.pstyle(t+"-gradient-stop-colors").value,u=n.pstyle(t+"-gradient-stop-positions").pfValue;if("radial-gradient"===r)if(n.isEdge()){var s=n.sourceEndpoint(),c=n.targetEndpoint(),f=n.midpoint(),d=Qe(s,f),h=Qe(c,f);a=e.createRadialGradient(f.x,f.y,0,f.x,f.y,Math.max(d,h))}else{var p=o?{x:0,y:0}:n.position(),v=n.width(),g=n.height();a=e.createRadialGradient(p.x,p.y,0,p.x,p.y,Math.max(v,g))}else if(n.isEdge()){var y=n.sourceEndpoint(),m=n.targetEndpoint();a=e.createLinearGradient(y.x,y.y,m.x,m.y)}else{var b=o?{x:0,y:0}:n.position(),x=n.width()/2,w=n.height()/2;switch(n.pstyle("background-gradient-direction").value){case"to-bottom":a=e.createLinearGradient(b.x,b.y-w,b.x,b.y+w);break;case"to-top":a=e.createLinearGradient(b.x,b.y+w,b.x,b.y-w);break;case"to-left":a=e.createLinearGradient(b.x-x,b.y,b.x+x,b.y);break;case"to-right":a=e.createLinearGradient(b.x+x,b.y,b.x-x,b.y);break;case"to-bottom-right":case"to-right-bottom":a=e.createLinearGradient(b.x-x,b.y-w,b.x+x,b.y+w);break;case"to-top-right":case"to-right-top":a=e.createLinearGradient(b.x-x,b.y+w,b.x+x,b.y-w);break;case"to-bottom-left":case"to-left-bottom":a=e.createLinearGradient(b.x+x,b.y-w,b.x-x,b.y+w);break;case"to-top-left":case"to-left-top":a=e.createLinearGradient(b.x+x,b.y+w,b.x-x,b.y-w)}}if(!a)return null;for(var E=u.length===l.length,k=l.length,S=0;S<k;S++)a.addColorStop(E?u[S]:S/(k-1),"rgba("+l[S][0]+","+l[S][1]+","+l[S][2]+","+i+")");return a},Dl.gradientFillStyle=function(e,t,n,r){var i=this.createGradientStyleFor(e,"background",t,n,r);if(!i)return null;e.fillStyle=i},Dl.colorFillStyle=function(e,t,n,r,i){e.fillStyle="rgba("+t+","+n+","+r+","+i+")"},Dl.eleFillStyle=function(e,t,n){var r=t.pstyle("background-fill").value;if("linear-gradient"===r||"radial-gradient"===r)this.gradientFillStyle(e,t,r,n);else{var i=t.pstyle("background-color").value;this.colorFillStyle(e,i[0],i[1],i[2],n)}},Dl.gradientStrokeStyle=function(e,t,n,r){var i=this.createGradientStyleFor(e,"line",t,n,r);if(!i)return null;e.strokeStyle=i},Dl.colorStrokeStyle=function(e,t,n,r,i){e.strokeStyle="rgba("+t+","+n+","+r+","+i+")"},Dl.eleStrokeStyle=function(e,t,n){var r=t.pstyle("line-fill").value;if("linear-gradient"===r||"radial-gradient"===r)this.gradientStrokeStyle(e,t,r,n);else{var i=t.pstyle("line-color").value;this.colorStrokeStyle(e,i[0],i[1],i[2],n)}},Dl.matchCanvasSize=function(e){var t=this,n=t.data,r=t.findContainerClientCoords(),i=r[2],a=r[3],o=t.getPixelRatio(),l=t.motionBlurPxRatio;e!==t.data.bufferCanvases[t.MOTIONBLUR_BUFFER_NODE]&&e!==t.data.bufferCanvases[t.MOTIONBLUR_BUFFER_DRAG]||(o=l);var u,s=i*o,c=a*o;if(s!==t.canvasWidth||c!==t.canvasHeight){t.fontCaches=null;var f=n.canvasContainer;f.style.width=i+"px",f.style.height=a+"px";for(var d=0;d<t.CANVAS_LAYERS;d++)(u=n.canvases[d]).width=s,u.height=c,u.style.width=i+"px",u.style.height=a+"px";for(d=0;d<t.BUFFER_COUNT;d++)(u=n.bufferCanvases[d]).width=s,u.height=c,u.style.width=i+"px",u.style.height=a+"px";t.textureMult=1,o<=1&&(u=n.bufferCanvases[t.TEXTURE_BUFFER],t.textureMult=2,u.width=s*t.textureMult,u.height=c*t.textureMult),t.canvasWidth=s,t.canvasHeight=c}},Dl.renderTo=function(e,t,n,r){this.render({forcedContext:e,forcedZoom:t,forcedPan:n,drawAllLayers:!0,forcedPxRatio:r})},Dl.render=function(e){var t=(e=e||pe()).forcedContext,n=e.drawAllLayers,r=e.drawOnlyNodeLayer,i=e.forcedZoom,a=e.forcedPan,o=this,l=void 0===e.forcedPxRatio?this.getPixelRatio():e.forcedPxRatio,u=o.cy,s=o.data,c=s.canvasNeedsRedraw,f=o.textureOnViewport&&!t&&(o.pinching||o.hoverData.dragging||o.swipePanning||o.data.wheelZooming),d=void 0!==e.motionBlur?e.motionBlur:o.motionBlur,h=o.motionBlurPxRatio,p=u.hasCompoundNodes(),v=o.hoverData.draggingEles,g=!(!o.hoverData.selecting&&!o.touchData.selecting),y=d=d&&!t&&o.motionBlurEnabled&&!g;t||(o.prevPxRatio!==l&&(o.invalidateContainerClientCoordsCache(),o.matchCanvasSize(o.container),o.redrawHint("eles",!0),o.redrawHint("drag",!0)),o.prevPxRatio=l),!t&&o.motionBlurTimeout&&clearTimeout(o.motionBlurTimeout),d&&(null==o.mbFrames&&(o.mbFrames=0),o.mbFrames++,o.mbFrames<3&&(y=!1),o.mbFrames>o.minMbLowQualFrames&&(o.motionBlurPxRatio=o.mbPxRBlurry)),o.clearingMotionBlur&&(o.motionBlurPxRatio=1),o.textureDrawLastFrame&&!f&&(c[o.NODE]=!0,c[o.SELECT_BOX]=!0);var m=u.style(),b=u.zoom(),x=void 0!==i?i:b,w=u.pan(),E={x:w.x,y:w.y},k={zoom:b,pan:{x:w.x,y:w.y}},S=o.prevViewport;void 0===S||k.zoom!==S.zoom||k.pan.x!==S.pan.x||k.pan.y!==S.pan.y||v&&!p||(o.motionBlurPxRatio=1),a&&(E=a),x*=l,E.x*=l,E.y*=l;var T=o.getCachedZSortedEles();function P(e,t,n,r,i){var a=e.globalCompositeOperation;e.globalCompositeOperation="destination-out",o.colorFillStyle(e,255,255,255,o.motionBlurTransparency),e.fillRect(t,n,r,i),e.globalCompositeOperation=a}function C(e,r){var l,u,c,f;o.clearingMotionBlur||e!==s.bufferContexts[o.MOTIONBLUR_BUFFER_NODE]&&e!==s.bufferContexts[o.MOTIONBLUR_BUFFER_DRAG]?(l=E,u=x,c=o.canvasWidth,f=o.canvasHeight):(l={x:w.x*h,y:w.y*h},u=b*h,c=o.canvasWidth*h,f=o.canvasHeight*h),e.setTransform(1,0,0,1,0,0),"motionBlur"===r?P(e,0,0,c,f):t||void 0!==r&&!r||e.clearRect(0,0,c,f),n||(e.translate(l.x,l.y),e.scale(u,u)),a&&e.translate(a.x,a.y),i&&e.scale(i,i)}if(f||(o.textureDrawLastFrame=!1),f){if(o.textureDrawLastFrame=!0,!o.textureCache){o.textureCache={},o.textureCache.bb=u.mutableElements().boundingBox(),o.textureCache.texture=o.data.bufferCanvases[o.TEXTURE_BUFFER];var _=o.data.bufferContexts[o.TEXTURE_BUFFER];_.setTransform(1,0,0,1,0,0),_.clearRect(0,0,o.canvasWidth*o.textureMult,o.canvasHeight*o.textureMult),o.render({forcedContext:_,drawOnlyNodeLayer:!0,forcedPxRatio:l*o.textureMult}),(k=o.textureCache.viewport={zoom:u.zoom(),pan:u.pan(),width:o.canvasWidth,height:o.canvasHeight}).mpan={x:(0-k.pan.x)/k.zoom,y:(0-k.pan.y)/k.zoom}}c[o.DRAG]=!1,c[o.NODE]=!1;var M=s.contexts[o.NODE],O=o.textureCache.texture;k=o.textureCache.viewport;M.setTransform(1,0,0,1,0,0),d?P(M,0,0,k.width,k.height):M.clearRect(0,0,k.width,k.height);var N=m.core("outside-texture-bg-color").value,D=m.core("outside-texture-bg-opacity").value;o.colorFillStyle(M,N[0],N[1],N[2],D),M.fillRect(0,0,k.width,k.height);b=u.zoom();C(M,!1),M.clearRect(k.mpan.x,k.mpan.y,k.width/k.zoom/l,k.height/k.zoom/l),M.drawImage(O,k.mpan.x,k.mpan.y,k.width/k.zoom/l,k.height/k.zoom/l)}else o.textureOnViewport&&!t&&(o.textureCache=null);var I=u.extent(),A=o.pinching||o.hoverData.dragging||o.swipePanning||o.data.wheelZooming||o.hoverData.draggingEles,L=o.hideEdgesOnViewport&&A,B=[];if(B[o.NODE]=!c[o.NODE]&&d&&!o.clearedForMotionBlur[o.NODE]||o.clearingMotionBlur,B[o.NODE]&&(o.clearedForMotionBlur[o.NODE]=!0),B[o.DRAG]=!c[o.DRAG]&&d&&!o.clearedForMotionBlur[o.DRAG]||o.clearingMotionBlur,B[o.DRAG]&&(o.clearedForMotionBlur[o.DRAG]=!0),c[o.NODE]||n||r||B[o.NODE]){var z=d&&!B[o.NODE]&&1!==h;C(M=t||(z?o.data.bufferContexts[o.MOTIONBLUR_BUFFER_NODE]:s.contexts[o.NODE]),d&&!z?"motionBlur":void 0),L?o.drawCachedNodes(M,T.nondrag,l,I):o.drawLayeredElements(M,T.nondrag,l,I),o.debug&&o.drawDebugPoints(M,T.nondrag),n||d||(c[o.NODE]=!1)}if(!r&&(c[o.DRAG]||n||B[o.DRAG])){z=d&&!B[o.DRAG]&&1!==h;C(M=t||(z?o.data.bufferContexts[o.MOTIONBLUR_BUFFER_DRAG]:s.contexts[o.DRAG]),d&&!z?"motionBlur":void 0),L?o.drawCachedNodes(M,T.drag,l,I):o.drawCachedElements(M,T.drag,l,I),o.debug&&o.drawDebugPoints(M,T.drag),n||d||(c[o.DRAG]=!1)}if(o.showFps||!r&&c[o.SELECT_BOX]&&!n){if(C(M=t||s.contexts[o.SELECT_BOX]),1==o.selection[4]&&(o.hoverData.selecting||o.touchData.selecting)){b=o.cy.zoom();var R=m.core("selection-box-border-width").value/b;M.lineWidth=R,M.fillStyle="rgba("+m.core("selection-box-color").value[0]+","+m.core("selection-box-color").value[1]+","+m.core("selection-box-color").value[2]+","+m.core("selection-box-opacity").value+")",M.fillRect(o.selection[0],o.selection[1],o.selection[2]-o.selection[0],o.selection[3]-o.selection[1]),R>0&&(M.strokeStyle="rgba("+m.core("selection-box-border-color").value[0]+","+m.core("selection-box-border-color").value[1]+","+m.core("selection-box-border-color").value[2]+","+m.core("selection-box-opacity").value+")",M.strokeRect(o.selection[0],o.selection[1],o.selection[2]-o.selection[0],o.selection[3]-o.selection[1]))}if(s.bgActivePosistion&&!o.hoverData.selecting){b=o.cy.zoom();var F=s.bgActivePosistion;M.fillStyle="rgba("+m.core("active-bg-color").value[0]+","+m.core("active-bg-color").value[1]+","+m.core("active-bg-color").value[2]+","+m.core("active-bg-opacity").value+")",M.beginPath(),M.arc(F.x,F.y,m.core("active-bg-size").pfValue/b,0,2*Math.PI),M.fill()}var j=o.lastRedrawTime;if(o.showFps&&j){j=Math.round(j);var V=Math.round(1e3/j);M.setTransform(1,0,0,1,0,0),M.fillStyle="rgba(255, 0, 0, 0.75)",M.strokeStyle="rgba(255, 0, 0, 0.75)",M.lineWidth=1,M.fillText("1 frame = "+j+" ms = "+V+" fps",0,20);M.strokeRect(0,30,250,20),M.fillRect(0,30,250*Math.min(V/60,1),20)}n||(c[o.SELECT_BOX]=!1)}if(d&&1!==h){var q=s.contexts[o.NODE],W=o.data.bufferCanvases[o.MOTIONBLUR_BUFFER_NODE],Y=s.contexts[o.DRAG],U=o.data.bufferCanvases[o.MOTIONBLUR_BUFFER_DRAG],X=function(e,t,n){e.setTransform(1,0,0,1,0,0),n||!y?e.clearRect(0,0,o.canvasWidth,o.canvasHeight):P(e,0,0,o.canvasWidth,o.canvasHeight);var r=h;e.drawImage(t,0,0,o.canvasWidth*r,o.canvasHeight*r,0,0,o.canvasWidth,o.canvasHeight)};(c[o.NODE]||B[o.NODE])&&(X(q,W,B[o.NODE]),c[o.NODE]=!1),(c[o.DRAG]||B[o.DRAG])&&(X(Y,U,B[o.DRAG]),c[o.DRAG]=!1)}o.prevViewport=k,o.clearingMotionBlur&&(o.clearingMotionBlur=!1,o.motionBlurCleared=!0,o.motionBlur=!0),d&&(o.motionBlurTimeout=setTimeout((function(){o.motionBlurTimeout=null,o.clearedForMotionBlur[o.NODE]=!1,o.clearedForMotionBlur[o.DRAG]=!1,o.motionBlur=!1,o.clearingMotionBlur=!f,o.mbFrames=0,c[o.NODE]=!0,c[o.DRAG]=!0,o.redraw()}),100)),t||u.emit("render")};for(var Il={drawPolygonPath:function(e,t,n,r,i,a){var o=r/2,l=i/2;e.beginPath&&e.beginPath(),e.moveTo(t+o*a[0],n+l*a[1]);for(var u=1;u<a.length/2;u++)e.lineTo(t+o*a[2*u],n+l*a[2*u+1]);e.closePath()},drawRoundRectanglePath:function(e,t,n,r,i){var a=r/2,o=i/2,l=zt(r,i);e.beginPath&&e.beginPath(),e.moveTo(t,n-o),e.arcTo(t+a,n-o,t+a,n,l),e.arcTo(t+a,n+o,t,n+o,l),e.arcTo(t-a,n+o,t-a,n,l),e.arcTo(t-a,n-o,t,n-o,l),e.lineTo(t,n-o),e.closePath()},drawBottomRoundRectanglePath:function(e,t,n,r,i){var a=r/2,o=i/2,l=zt(r,i);e.beginPath&&e.beginPath(),e.moveTo(t,n-o),e.lineTo(t+a,n-o),e.lineTo(t+a,n),e.arcTo(t+a,n+o,t,n+o,l),e.arcTo(t-a,n+o,t-a,n,l),e.lineTo(t-a,n-o),e.lineTo(t,n-o),e.closePath()},drawCutRectanglePath:function(e,t,n,r,i){var a=r/2,o=i/2;e.beginPath&&e.beginPath(),e.moveTo(t-a+8,n-o),e.lineTo(t+a-8,n-o),e.lineTo(t+a,n-o+8),e.lineTo(t+a,n+o-8),e.lineTo(t+a-8,n+o),e.lineTo(t-a+8,n+o),e.lineTo(t-a,n+o-8),e.lineTo(t-a,n-o+8),e.closePath()},drawBarrelPath:function(e,t,n,r,i){var a=r/2,o=i/2,l=t-a,u=t+a,s=n-o,c=n+o,f=Ft(r,i),d=f.widthOffset,h=f.heightOffset,p=f.ctrlPtOffsetPct*d;e.beginPath&&e.beginPath(),e.moveTo(l,s+h),e.lineTo(l,c-h),e.quadraticCurveTo(l+p,c,l+d,c),e.lineTo(u-d,c),e.quadraticCurveTo(u-p,c,u,c-h),e.lineTo(u,s+h),e.quadraticCurveTo(u-p,s,u-d,s),e.lineTo(l+d,s),e.quadraticCurveTo(l+p,s,l,s+h),e.closePath()}},Al=Math.sin(0),Ll=Math.cos(0),Bl={},zl={},Rl=Math.PI/40,Fl=0*Math.PI;Fl<2*Math.PI;Fl+=Rl)Bl[Fl]=Math.sin(Fl),zl[Fl]=Math.cos(Fl);Il.drawEllipsePath=function(e,t,n,r,i){if(e.beginPath&&e.beginPath(),e.ellipse)e.ellipse(t,n,r/2,i/2,0,0,2*Math.PI);else for(var a,o,l=r/2,u=i/2,s=0*Math.PI;s<2*Math.PI;s+=Rl)a=t-l*Bl[s]*Al+l*zl[s]*Ll,o=n+u*zl[s]*Al+u*Bl[s]*Ll,0===s?e.moveTo(a,o):e.lineTo(a,o);e.closePath()};var jl={};function Vl(e){var t=e.indexOf(",");return e.substr(t+1)}function ql(e,t,n){var r=function(){return t.toDataURL(n,e.quality)};switch(e.output){case"blob-promise":return new Xn((function(r,i){try{t.toBlob((function(e){null!=e?r(e):i(new Error("`canvas.toBlob()` sent a null value in its callback"))}),n,e.quality)}catch(e){i(e)}}));case"blob":return function(e,t){for(var n=atob(e),r=new ArrayBuffer(n.length),i=new Uint8Array(r),a=0;a<n.length;a++)i[a]=n.charCodeAt(a);return new Blob([r],{type:t})}(Vl(r()),n);case"base64":return Vl(r());case"base64uri":default:return r()}}jl.createBuffer=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,[n,n.getContext("2d")]},jl.bufferCanvasImage=function(e){var t=this.cy,n=t.mutableElements().boundingBox(),r=this.findContainerClientCoords(),i=e.full?Math.ceil(n.w):r[2],a=e.full?Math.ceil(n.h):r[3],o=E(e.maxWidth)||E(e.maxHeight),l=this.getPixelRatio(),u=1;if(void 0!==e.scale)i*=e.scale,a*=e.scale,u=e.scale;else if(o){var s=1/0,c=1/0;E(e.maxWidth)&&(s=u*e.maxWidth/i),E(e.maxHeight)&&(c=u*e.maxHeight/a),i*=u=Math.min(s,c),a*=u}o||(i*=l,a*=l,u*=l);var f=document.createElement("canvas");f.width=i,f.height=a,f.style.width=i+"px",f.style.height=a+"px";var d=f.getContext("2d");if(i>0&&a>0){d.clearRect(0,0,i,a),d.globalCompositeOperation="source-over";var h=this.getCachedZSortedEles();if(e.full)d.translate(-n.x1*u,-n.y1*u),d.scale(u,u),this.drawElements(d,h),d.scale(1/u,1/u),d.translate(n.x1*u,n.y1*u);else{var p=t.pan(),v={x:p.x*u,y:p.y*u};u*=t.zoom(),d.translate(v.x,v.y),d.scale(u,u),this.drawElements(d,h),d.scale(1/u,1/u),d.translate(-v.x,-v.y)}e.bg&&(d.globalCompositeOperation="destination-over",d.fillStyle=e.bg,d.rect(0,0,i,a),d.fill())}return f},jl.png=function(e){return ql(e,this.bufferCanvasImage(e),"image/png")},jl.jpg=function(e){return ql(e,this.bufferCanvasImage(e),"image/jpeg")};var Wl={nodeShapeImpl:function(e,t,n,r,i,a,o){switch(e){case"ellipse":return this.drawEllipsePath(t,n,r,i,a);case"polygon":return this.drawPolygonPath(t,n,r,i,a,o);case"roundrectangle":case"round-rectangle":return this.drawRoundRectanglePath(t,n,r,i,a);case"cutrectangle":case"cut-rectangle":return this.drawCutRectanglePath(t,n,r,i,a);case"bottomroundrectangle":case"bottom-round-rectangle":return this.drawBottomRoundRectanglePath(t,n,r,i,a);case"barrel":return this.drawBarrelPath(t,n,r,i,a)}}},Yl=Xl,Ul=Xl.prototype;function Xl(e){var t=this;t.data={canvases:new Array(Ul.CANVAS_LAYERS),contexts:new Array(Ul.CANVAS_LAYERS),canvasNeedsRedraw:new Array(Ul.CANVAS_LAYERS),bufferCanvases:new Array(Ul.BUFFER_COUNT),bufferContexts:new Array(Ul.CANVAS_LAYERS)};t.data.canvasContainer=document.createElement("div");var n=t.data.canvasContainer.style;t.data.canvasContainer.style["-webkit-tap-highlight-color"]="rgba(0,0,0,0)",n.position="relative",n.zIndex="0",n.overflow="hidden";var r=e.cy.container();r.appendChild(t.data.canvasContainer),r.style["-webkit-tap-highlight-color"]="rgba(0,0,0,0)";var i={"-webkit-user-select":"none","-moz-user-select":"-moz-none","user-select":"none","-webkit-tap-highlight-color":"rgba(0,0,0,0)","outline-style":"none"};d&&d.userAgent.match(/msie|trident|edge/i)&&(i["-ms-touch-action"]="none",i["touch-action"]="none");for(var a=0;a<Ul.CANVAS_LAYERS;a++){var o=t.data.canvases[a]=document.createElement("canvas");t.data.contexts[a]=o.getContext("2d"),Object.keys(i).forEach((function(e){o.style[e]=i[e]})),o.style.position="absolute",o.setAttribute("data-id","layer"+a),o.style.zIndex=String(Ul.CANVAS_LAYERS-a),t.data.canvasContainer.appendChild(o),t.data.canvasNeedsRedraw[a]=!1}t.data.topCanvas=t.data.canvases[0],t.data.canvases[Ul.NODE].setAttribute("data-id","layer"+Ul.NODE+"-node"),t.data.canvases[Ul.SELECT_BOX].setAttribute("data-id","layer"+Ul.SELECT_BOX+"-selectbox"),t.data.canvases[Ul.DRAG].setAttribute("data-id","layer"+Ul.DRAG+"-drag");for(a=0;a<Ul.BUFFER_COUNT;a++)t.data.bufferCanvases[a]=document.createElement("canvas"),t.data.bufferContexts[a]=t.data.bufferCanvases[a].getContext("2d"),t.data.bufferCanvases[a].style.position="absolute",t.data.bufferCanvases[a].setAttribute("data-id","buffer"+a),t.data.bufferCanvases[a].style.zIndex=String(-a-1),t.data.bufferCanvases[a].style.visibility="hidden";t.pathsEnabled=!0;var l=it(),u=function(e){return{x:-e.w/2,y:-e.h/2}},s=function(e){return e.boundingBox(),e[0]._private.bodyBounds},c=function(e){return e.boundingBox(),e[0]._private.labelBounds.main||l},f=function(e){return e.boundingBox(),e[0]._private.labelBounds.source||l},h=function(e){return e.boundingBox(),e[0]._private.labelBounds.target||l},p=function(e,t){return t},v=function(e,t){return{x:e.x+t.pstyle("text-margin-x").pfValue,y:e.y+t.pstyle("text-margin-y").pfValue}},g=function(e,t,n){var r=e[0]._private.rscratch;return{x:r[t],y:r[n]}},y=t.data.eleTxrCache=new ul(t,{getKey:function(e){return e[0]._private.nodeKey},doesEleInvalidateKey:function(e){var t=e[0]._private;return!(t.oldBackgroundTimestamp===t.backgroundTimestamp)},drawElement:function(e,n,r,i,a){return t.drawElement(e,n,r,!1,!1,a)},getBoundingBox:s,getRotationPoint:function(e){return{x:((t=s(e)).x1+t.x2)/2,y:(t.y1+t.y2)/2};var t},getRotationOffset:function(e){return u(s(e))},allowEdgeTxrCaching:!1,allowParentTxrCaching:!1}),m=t.data.lblTxrCache=new ul(t,{getKey:function(e){return e[0]._private.labelStyleKey},drawElement:function(e,n,r,i,a){return t.drawElementText(e,n,r,i,"main",a)},getBoundingBox:c,getRotationPoint:function(e){return v(g(e,"labelX","labelY"),e)},getRotationOffset:function(e){var t=c(e),n=u(c(e));if(e.isNode()){switch(e.pstyle("text-halign").value){case"left":n.x=-t.w;break;case"right":n.x=0}switch(e.pstyle("text-valign").value){case"top":n.y=-t.h;break;case"bottom":n.y=0}}return n},isVisible:p}),b=t.data.slbTxrCache=new ul(t,{getKey:function(e){return e[0]._private.sourceLabelStyleKey},drawElement:function(e,n,r,i,a){return t.drawElementText(e,n,r,i,"source",a)},getBoundingBox:f,getRotationPoint:function(e){return v(g(e,"sourceLabelX","sourceLabelY"),e)},getRotationOffset:function(e){return u(f(e))},isVisible:p}),x=t.data.tlbTxrCache=new ul(t,{getKey:function(e){return e[0]._private.targetLabelStyleKey},drawElement:function(e,n,r,i,a){return t.drawElementText(e,n,r,i,"target",a)},getBoundingBox:h,getRotationPoint:function(e){return v(g(e,"targetLabelX","targetLabelY"),e)},getRotationOffset:function(e){return u(h(e))},isVisible:p}),w=t.data.lyrTxrCache=new cl(t);t.onUpdateEleCalcs((function(e,t){y.invalidateElements(t),m.invalidateElements(t),b.invalidateElements(t),x.invalidateElements(t),w.invalidateElements(t);for(var n=0;n<t.length;n++){var r=t[n]._private;r.oldBackgroundTimestamp=r.backgroundTimestamp}}));var E=function(e){for(var t=0;t<e.length;t++)w.enqueueElementRefinement(e[t].ele)};y.onDequeue(E),m.onDequeue(E),b.onDequeue(E),x.onDequeue(E)}Ul.CANVAS_LAYERS=3,Ul.SELECT_BOX=0,Ul.DRAG=1,Ul.NODE=2,Ul.BUFFER_COUNT=3,Ul.TEXTURE_BUFFER=0,Ul.MOTIONBLUR_BUFFER_NODE=1,Ul.MOTIONBLUR_BUFFER_DRAG=2,Ul.redrawHint=function(e,t){var n=this;switch(e){case"eles":n.data.canvasNeedsRedraw[Ul.NODE]=t;break;case"drag":n.data.canvasNeedsRedraw[Ul.DRAG]=t;break;case"select":n.data.canvasNeedsRedraw[Ul.SELECT_BOX]=t}};var Hl="undefined"!=typeof Path2D;Ul.path2dEnabled=function(e){if(void 0===e)return this.pathsEnabled;this.pathsEnabled=!!e},Ul.usePaths=function(){return Hl&&this.pathsEnabled},Ul.setImgSmoothing=function(e,t){null!=e.imageSmoothingEnabled?e.imageSmoothingEnabled=t:(e.webkitImageSmoothingEnabled=t,e.mozImageSmoothingEnabled=t,e.msImageSmoothingEnabled=t)},Ul.getImgSmoothing=function(e){return null!=e.imageSmoothingEnabled?e.imageSmoothingEnabled:e.webkitImageSmoothingEnabled||e.mozImageSmoothingEnabled||e.msImageSmoothingEnabled},Ul.makeOffscreenCanvas=function(e,t){var n;return"undefined"!==("undefined"==typeof OffscreenCanvas?"undefined":o(OffscreenCanvas))?n=new OffscreenCanvas(e,t):((n=document.createElement("canvas")).width=e,n.height=t),n},[vl,xl,Cl,_l,Ml,Nl,Dl,Il,jl,Wl].forEach((function(e){R(Ul,e)}));var Gl=[{type:"layout",extensions:Do},{type:"renderer",extensions:[{name:"null",impl:Io},{name:"base",impl:nl},{name:"canvas",impl:Yl}]}],Kl={},$l={};function Ql(e,t,n){var r=n,i=function(n){ue("Can not register `"+t+"` for `"+e+"` since `"+n+"` already exists in the prototype and can not be overridden")};if("core"===e){if(Ua.prototype[t])return i(t);Ua.prototype[t]=n}else if("collection"===e){if(sa.prototype[t])return i(t);sa.prototype[t]=n}else if("layout"===e){for(var a=function(e){this.options=e,n.call(this,e),w(this._private)||(this._private={}),this._private.cy=e.cy,this._private.listeners=[],this.createEmitter()},o=a.prototype=Object.create(n.prototype),l=[],u=0;u<l.length;u++){var s=l[u];o[s]=o[s]||function(){return this}}o.start&&!o.run?o.run=function(){return this.start(),this}:!o.start&&o.run&&(o.start=function(){return this.run(),this});var c=n.prototype.stop;o.stop=function(){var e=this.options;if(e&&e.animate){var t=this.animations;if(t)for(var n=0;n<t.length;n++)t[n].stop()}return c?c.call(this):this.emit("layoutstop"),this},o.destroy||(o.destroy=function(){return this}),o.cy=function(){return this._private.cy};var f=function(e){return e._private.cy},d={addEventFields:function(e,t){t.layout=e,t.cy=f(e),t.target=e},bubble:function(){return!0},parent:function(e){return f(e)}};R(o,{createEmitter:function(){return this._private.emitter=new Ci(d,this),this},emitter:function(){return this._private.emitter},on:function(e,t){return this.emitter().on(e,t),this},one:function(e,t){return this.emitter().one(e,t),this},once:function(e,t){return this.emitter().one(e,t),this},removeListener:function(e,t){return this.emitter().removeListener(e,t),this},removeAllListeners:function(){return this.emitter().removeAllListeners(),this},emit:function(e,t){return this.emitter().emit(e,t),this}}),Kn.eventAliasesOn(o),r=a}else if("renderer"===e&&"null"!==t&&"base"!==t){var h=Zl("renderer","base"),p=h.prototype,v=n,g=n.prototype,y=function(){h.apply(this,arguments),v.apply(this,arguments)},m=y.prototype;for(var b in p){var x=p[b];if(null!=g[b])return i(b);m[b]=x}for(var E in g)m[E]=g[E];p.clientFunctions.forEach((function(e){m[e]=m[e]||function(){ue("Renderer does not implement `renderer."+e+"()` on its prototype")}})),r=y}return V({map:Kl,keys:[e,t],value:r})}function Zl(e,t){return q({map:Kl,keys:[e,t]})}function Jl(e,t,n,r,i){return V({map:$l,keys:[e,t,n,r],value:i})}function eu(e,t,n,r){return q({map:$l,keys:[e,t,n,r]})}var tu=function(){return 2===arguments.length?Zl.apply(null,arguments):3===arguments.length?Ql.apply(null,arguments):4===arguments.length?eu.apply(null,arguments):5===arguments.length?Jl.apply(null,arguments):void ue("Invalid extension access syntax")};Ua.prototype.extension=tu,Gl.forEach((function(e){e.extensions.forEach((function(t){Ql(e.type,t.name,t.impl)}))}));var nu=function e(){if(!(this instanceof e))return new e;this.length=0},ru=nu.prototype;ru.instanceString=function(){return"stylesheet"},ru.selector=function(e){return this[this.length++]={selector:e,properties:[]},this},ru.css=function(e,t){var n=this.length-1;if(m(e))this[n].properties.push({name:e,value:t});else if(w(e))for(var r=e,i=Object.keys(r),a=0;a<i.length;a++){var o=i[a],l=r[o];if(null!=l){var u=ja.properties[o]||ja.properties[I(o)];if(null!=u){var s=u.name,c=l;this[n].properties.push({name:s,value:c})}}}return this},ru.style=ru.css,ru.generateStyle=function(e){var t=new ja(e);return this.appendToStyle(t)},ru.appendToStyle=function(e){for(var t=0;t<this.length;t++){var n=this[t],r=n.selector,i=n.properties;e.selector(r);for(var a=0;a<i.length;a++){var o=i[a];e.css(o.name,o.value)}}return e};var iu=function(e){return void 0===e&&(e={}),w(e)?new Ua(e):m(e)?tu.apply(tu,arguments):void 0};iu.use=function(e){var t=Array.prototype.slice.call(arguments,1);return t.unshift(iu),e.apply(null,t),this},iu.warnings=function(e){return se(e)},iu.version="3.8.0",iu.stylesheet=iu.Stylesheet=nu,e.exports=iu}).call(this,n(344).setImmediate)},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new a(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(345),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(98))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,a,o,l,u=1,s={},c=!1,f=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){p(e.data)},r=function(e){a.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",l=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",l,!1):e.attachEvent("onmessage",l),r=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return s[u]=i,r(u),u++},d.clearImmediate=h}function h(e){delete s[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{h(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(98),n(346))},function(e,t){var n,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,s=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&h())}function h(){if(!c){var e=l(d);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new p(e,t)),1!==s.length||c||l(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,a=/^0o[0-7]+$/i,o=parseInt,l="object"==typeof t&&t&&t.Object===Object&&t,u="object"==typeof self&&self&&self.Object===Object&&self,s=l||u||Function("return this")(),c=Object.prototype.toString,f=Math.max,d=Math.min,h=function(){return s.Date.now()};function p(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return NaN;if(p(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=p(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var l=i.test(e);return l||a.test(e)?o(e.slice(2),l?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var r,i,a,o,l,u,s=0,c=!1,g=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=r,a=i;return r=i=void 0,s=t,o=e.apply(a,n)}function b(e){return s=e,l=setTimeout(w,t),c?m(e):o}function x(e){var n=e-u;return void 0===u||n>=t||n<0||g&&e-s>=a}function w(){var e=h();if(x(e))return E(e);l=setTimeout(w,function(e){var n=t-(e-u);return g?d(n,a-(e-s)):n}(e))}function E(e){return l=void 0,y&&r?m(e):(r=i=void 0,o)}function k(){var e=h(),n=x(e);if(r=arguments,i=this,u=e,n){if(void 0===l)return b(u);if(g)return l=setTimeout(w,t),m(u)}return void 0===l&&(l=setTimeout(w,t)),o}return t=v(t)||0,p(n)&&(c=!!n.leading,a=(g="maxWait"in n)?f(v(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),k.cancel=function(){void 0!==l&&clearTimeout(l),s=0,r=u=i=l=void 0},k.flush=function(){return void 0===l?o:E(h())},k}}).call(this,n(98))},function(e,t,n){e.exports=n(349)},function(e,t,n){var r,i,a;(function(){var n,o,l,u,s,c,f,d,h,p,v,g,y,m,b;l=Math.floor,p=Math.min,o=function(e,t){return e<t?-1:e>t?1:0},h=function(e,t,n,r,i){var a;if(null==n&&(n=0),null==i&&(i=o),n<0)throw new Error("lo must be non-negative");for(null==r&&(r=e.length);n<r;)i(t,e[a=l((n+r)/2)])<0?r=a:n=a+1;return[].splice.apply(e,[n,n-n].concat(t)),t},c=function(e,t,n){return null==n&&(n=o),e.push(t),m(e,0,e.length-1,n)},s=function(e,t){var n,r;return null==t&&(t=o),n=e.pop(),e.length?(r=e[0],e[0]=n,b(e,0,t)):r=n,r},d=function(e,t,n){var r;return null==n&&(n=o),r=e[0],e[0]=t,b(e,0,n),r},f=function(e,t,n){var r;return null==n&&(n=o),e.length&&n(e[0],t)<0&&(t=(r=[e[0],t])[0],e[0]=r[1],b(e,0,n)),t},u=function(e,t){var n,r,i,a,u,s;for(null==t&&(t=o),u=[],r=0,i=(a=function(){s=[];for(var t=0,n=l(e.length/2);0<=n?t<n:t>n;0<=n?t++:t--)s.push(t);return s}.apply(this).reverse()).length;r<i;r++)n=a[r],u.push(b(e,n,t));return u},y=function(e,t,n){var r;if(null==n&&(n=o),-1!==(r=e.indexOf(t)))return m(e,0,r,n),b(e,r,n)},v=function(e,t,n){var r,i,a,l,s;if(null==n&&(n=o),!(i=e.slice(0,t)).length)return i;for(u(i,n),a=0,l=(s=e.slice(t)).length;a<l;a++)r=s[a],f(i,r,n);return i.sort(n).reverse()},g=function(e,t,n){var r,i,a,l,c,f,d,v,g;if(null==n&&(n=o),10*t<=e.length){if(!(a=e.slice(0,t).sort(n)).length)return a;for(i=a[a.length-1],l=0,f=(d=e.slice(t)).length;l<f;l++)n(r=d[l],i)<0&&(h(a,r,0,null,n),a.pop(),i=a[a.length-1]);return a}for(u(e,n),g=[],c=0,v=p(t,e.length);0<=v?c<v:c>v;0<=v?++c:--c)g.push(s(e,n));return g},m=function(e,t,n,r){var i,a,l;for(null==r&&(r=o),i=e[n];n>t&&r(i,a=e[l=n-1>>1])<0;)e[n]=a,n=l;return e[n]=i},b=function(e,t,n){var r,i,a,l,u;for(null==n&&(n=o),i=e.length,u=t,a=e[t],r=2*t+1;r<i;)(l=r+1)<i&&!(n(e[r],e[l])<0)&&(r=l),e[t]=e[r],r=2*(t=r)+1;return e[t]=a,m(e,u,t,n)},n=function(){function e(e){this.cmp=null!=e?e:o,this.nodes=[]}return e.push=c,e.pop=s,e.replace=d,e.pushpop=f,e.heapify=u,e.updateItem=y,e.nlargest=v,e.nsmallest=g,e.prototype.push=function(e){return c(this.nodes,e,this.cmp)},e.prototype.pop=function(){return s(this.nodes,this.cmp)},e.prototype.peek=function(){return this.nodes[0]},e.prototype.contains=function(e){return-1!==this.nodes.indexOf(e)},e.prototype.replace=function(e){return d(this.nodes,e,this.cmp)},e.prototype.pushpop=function(e){return f(this.nodes,e,this.cmp)},e.prototype.heapify=function(){return u(this.nodes,this.cmp)},e.prototype.updateItem=function(e){return y(this.nodes,e,this.cmp)},e.prototype.clear=function(){return this.nodes=[]},e.prototype.empty=function(){return 0===this.nodes.length},e.prototype.size=function(){return this.nodes.length},e.prototype.clone=function(){var t;return(t=new e).nodes=this.nodes.slice(0),t},e.prototype.toArray=function(){return this.nodes.slice(0)},e.prototype.insert=e.prototype.push,e.prototype.top=e.prototype.peek,e.prototype.front=e.prototype.peek,e.prototype.has=e.prototype.contains,e.prototype.copy=e.prototype.clone,e}(),i=[],void 0===(a="function"==typeof(r=function(){return n})?r.apply(t,i):r)||(e.exports=a)}).call(this)},function(e,t){t.RandomPlayer=class{constructor(e){}decideMove(e,t){let n=t.getPossibleMoves();return n[Math.floor(Math.random()*n.length)]}}},function(e,t,n){const{PLAYER1:r,PLAYER2:i}=n(68);class a{constructor(e,t,n,r){this.parent=t,this.untriedMoves=n,this.childNodes=[],this.wins=0,this.lost=0,this.visits=0,this.move=e,this.myMove=r}ucb(){return this.myMove?this.wins/this.visits+Math.sqrt(2*Math.log(this.parent.visits)/this.visits):this.lost/this.visits+Math.sqrt(2*Math.log(this.parent.visits)/this.visits)}selection(){return this.childNodes.reduce((e,t)=>e.ucb()>t.ucb()?e:t)}update(e,t){e&&(t?this.wins++:this.lost++),this.visits+=1}}t.Mcts=class{constructor(e,t,n,a){this.verticesCount=e,this.cliqueSize=t,this.timeout=n,this.botId=a,this.botId===r?this.opponentId=i:this.opponentId=r}decideMove(e,t){this.node=this._getNode(e,t);const n=(new Date).getTime();for(;(new Date).getTime()-n<this.timeout;){let e=this.node;const n=t.copyBoard();for(;0===e.untriedMoves.length&&e.childNodes.length>0;){e=e.selection();const t=e.myMove?this.botId:this.opponentId;n.markMove(e.move,t)}if(e.untriedMoves.length>0){const t=this._selectRandom(e.untriedMoves);e.untriedMoves=this._removeMove(e.untriedMoves,t);const r=e.myMove?this.opponentId:this.botId;n.markMove(t,r);const i=e;e=new a(t,i,n.getPossibleMoves(),!i.myMove),i.childNodes.push(e)}let r=e.myMove?this.botId:this.opponentId,i=n.doesCliqueExist(this.cliqueSize,r),o=n.getPossibleMoves();for(;!1===i&&o.length>0;){r=r===this.botId?this.opponentId:this.botId;let e=this._selectRandom(o);n.markMove(e,r),i=n.doesCliqueExist(this.cliqueSize,r),o=this._removeMove(o,e)}const l=r===this.botId;for(;null!==e;)e.update(i,l),e=e.parent}let r=this.node.childNodes.reduce((e,t)=>e.ucb()>t.ucb()?e:t);return this.node=r,r.parent=null,r.move}_printStats(e){console.log("### percentages ####");const t=[];for(const n of e)t.push({move:n.move,wins:n.wins,lost:n.lost,visits:n.visits,perc:n.wins/n.visits});t.sort((e,t)=>t.perc>e.perc?1:-1);let n=0;for(const e of t){if(n>0)break;console.log(`${++n} - [${e.move[0]}, ${e.move[1]}] wins: ${e.wins}, lost: ${e.lost}, visits: ${e.visits}, perc: ${r=e.perc,i=2,a=void 0,a=Math.pow(10,i),Math.round(r*a)/a}`)}var r,i,a}_getAllMoves(){let e=[];for(let t=0;t<this.verticesCount;t++)for(let n=t+1;n<this.verticesCount;n++)e.push([t,n]);return e}_getNode(e,t){if(e){if(this.node){for(const t of this.node.childNodes)if(this._movesEqual(t.move,e))return t.parent=null,t;return new a(e,null,t.getPossibleMoves(),!1)}{let t=this._getAllMoves();return t=this._removeMove(t,e),new a(e,null,t,!1)}}return new a(null,null,this._getAllMoves(),!1)}_removeMove(e,t){const n=[];for(const r of e)this._movesEqual(r,t)||n.push(r);return n}_movesEqual(e,t){return e[0]===t[0]&&e[1]===t[1]||e[1]===t[0]&&e[0]===t[1]}_selectRandom(e){return e[Math.floor(Math.random()*e.length)]}}},function(e,t,n){const{PLAYER1:r,PLAYER2:a}=n(68),{AlphaBeta:o}=n(353);Set.prototype.union=function(e){var t=new Set(this);for(var n of e)t.add(n);return t},Set.prototype.intersection=function(e){var t=new Set;for(var n of e)this.has(n)&&t.add(n);return t},Set.prototype.difference=function(e){var t=new Set(this);for(var n of e)t.delete(n);return t},Set.prototype.symetricDifference=function(e){return this.union(e).difference(this.intersection(e))};function l(e,t){let n=[],r=[];for(let r=0;r<e.verticesCount;r++)for(let i=r+1;i<e.verticesCount;i++)if(e.fields[r][i]===t){let e=new Set;e.add(r),e.add(i),n.push(e)}for(;;){for(r=[],i=0;i<n.length;i++)for(j=i+1;j<n.length;j++){let a=n[i].symetricDifference(n[j]);if(2==a.size){let o=a.values();vertice1=o.next().value,vertice2=o.next().value,e.fields[vertice1][vertice2]===t&&r.push(n[i].union(n[j]))}}if(0===r.length)break;let a=[];for(let e of r){let t=!0;for(let n of a)if(e.union(n).size===e.size){t=!1;break}t&&a.push(e)}n=a}return n}function u(e,t,n,r){let i=0;for(clique of r){let r=clique.size*(clique.size-1);for(let i=0;i<e.verticesCount;i++){let a=0;if(!clique.has(i)){for(let r of clique){if(e.fields[i][r]==n){a=0;break}e.fields[i][r]==t&&a++}r+=a}}i=Math.max(i,r)}return i}t.AlphaBetaPlayer=class{constructor(e,t,n,i){this.me=n,this.me==r?this.enemy=a:this.enemy=r,this.evaluation=i?function(e){return u(e,this.me,this.enemy,l(e,this.me))-u(e,this.enemy,this.me,l(e,this.enemy))}:function(e){return u(e,this.me,this.enemy,l(e,this.me))},this.alphaBeta=new o(t,this.evaluation,this.me,this.enemy,e)}decideMove(e,t){return this.alphaBeta.getMovesEval(t)}}},function(e,t){t.AlphaBeta=class{constructor(e,t,n,r,i){this.depth=e,this.evaluation=t,this.me=n,this.enemy=r,this.cliqueSize=i,this.minMoves=this.cliqueSize*(this.cliqueSize-1)/2}_getPlayer(e=!0){return e?this.me:this.enemy}getMovesEval(e){let t,n=e.getPossibleMoves(),r=-1/0,i=-1/0;for(let a of n){let n=this._evalMove(e,a,this.depth,!0,r,1/0,!0);n>=i&&(i=n,t=a),r=Math.max(n,r)}return t}_evalMove(e,t,n,r,i,a,o){let l=e.copyBoard();return l.markMove(t,this._getPlayer(r)),n-=1,r=!r,this._alphaBeta(l,n,r,i,a,o)}_alphaBeta(e,t,n,r,i,a){if(n){if(this._checkIfPlayerWon(e,this.enemy))return-1/0}else if(this._checkIfPlayerWon(e,this.me))return 1/0;if(0==t)return this.evaluation(e);let o;if(n){o=-1/0;for(let l of e.getPossibleMoves())if(o=Math.max(o,this._evalMove(e,l,t,n,r,i,!1)),r=Math.max(r,o),this._shouldCut(r,i,a))break;return o}o=1/0;for(let l of e.getPossibleMoves())if(o=Math.min(o,this._evalMove(e,l,t,n,r,i,!1)),i=Math.min(i,o),this._shouldCut(r,i,a))break;return o}_checkIfPlayerWon(e,t){return!(this.minMoves>(e.moveCount+1)/2)&&e.doesCliqueExist(this.cliqueSize,t)}_shouldCut(e,t,n){return e>=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,n,r,i,a,o){var l=i||"<<anonymous>>",u=o||r;if(null==n[r])return t?new Error("Required "+a+" `"+u+"` was not specified in `"+l+"`."):null;for(var s=arguments.length,c=Array(s>6?s-6:0),f=6;f<s;f++)c[f-6]=arguments[f];return e.apply(void 0,[n,r,l,a,u].concat(c))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n},e.exports=t.default},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),a=n(100),o=n.n(a),l=n(43),u=n.n(l),s=n(30),c=n.n(s),f=n(44),d=n.n(f);var h=n(141),p=n.n(h);n(139).Game;function v(e){var t=e.elements,n=e.onEdgeTap,a=e.onNodeTap,o=e.onTap,l=Object(r.useRef)(null);return Object(r.useEffect)((function(){l&&(l.on("tap","edge",(function(e){return n(e)})),l.on("tap","node",(function(e){a(e)&&l.one("select",(function(){l.$(":selected").unselect()}))})),l.on("tap",(function(e){o(e)})))}),[l]),i.a.createElement(p.a,{elements:t,cy:function(e){l=e},panningEnabled:!1,zoomingEnabled:!1,autolock:!0,style:{width:"".concat(600,"px"),height:"".concat(600,"px")},stylesheet:[{selector:"edge",style:{lineColor:"data(edgeColor)"}}]})}var g=n(2),y=n(3),m=n(4),b=n.n(m),x=(n(142),i.a.createContext({}));x.Consumer,x.Provider;function w(e,t){var n=Object(r.useContext)(x);return e||n[t]||t}var E=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,a=e.as,o=void 0===a?"div":a,l=e.className,u=Object(y.a)(e,["bsPrefix","fluid","as","className"]),s=w(n,"container"),c="string"==typeof r?"-"+r:"-fluid";return i.a.createElement(o,Object(g.a)({ref:t},u,{className:b()(l,r?""+s+c:s)}))}));E.displayName="Container",E.defaultProps={fluid:!1};var k=E,S=(n(99),n(69)),T=n.n(S),P={type:T.a.string.isRequired,as:T.a.elementType},C=i.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"div":n,a=e.className,o=e.type,l=Object(y.a)(e,["as","className","type"]);return i.a.createElement(r,Object(g.a)({},l,{ref:t,className:b()(a,o&&o+"-feedback")}))}));C.displayName="Feedback",C.propTypes=P,C.defaultProps={type:"valid"};var _=C,M=i.a.createContext({controlId:void 0}),O=i.a.forwardRef((function(e,t){var n=e.id,a=e.bsPrefix,o=e.bsCustomPrefix,l=e.className,u=e.isValid,s=e.isInvalid,c=e.isStatic,f=e.as,d=void 0===f?"input":f,h=Object(y.a)(e,["id","bsPrefix","bsCustomPrefix","className","isValid","isInvalid","isStatic","as"]),p=Object(r.useContext)(M),v=p.controlId,m=p.custom?[o,"custom-control-input"]:[a,"form-check-input"];return a=w(m[0],m[1]),i.a.createElement(d,Object(g.a)({},h,{ref:t,id:n||v,className:b()(l,a,u&&"is-valid",s&&"is-invalid",c&&"position-static")}))}));O.displayName="FormCheckInput",O.defaultProps={type:"checkbox"};var N=O,D=i.a.forwardRef((function(e,t){var n=e.bsPrefix,a=e.bsCustomPrefix,o=e.className,l=e.htmlFor,u=Object(y.a)(e,["bsPrefix","bsCustomPrefix","className","htmlFor"]),s=Object(r.useContext)(M),c=s.controlId,f=s.custom?[a,"custom-control-label"]:[n,"form-check-label"];return n=w(f[0],f[1]),i.a.createElement("label",Object(g.a)({},u,{ref:t,htmlFor:l||c,className:b()(o,n)}))}));D.displayName="FormCheckLabel";var I=D,A=i.a.forwardRef((function(e,t){var n=e.id,a=e.bsPrefix,o=e.bsCustomPrefix,l=e.inline,u=e.disabled,s=e.isValid,c=e.isInvalid,f=e.feedback,d=e.className,h=e.style,p=e.title,v=e.type,m=e.label,x=e.children,E=e.custom,k=e.as,S=void 0===k?"input":k,T=Object(y.a)(e,["id","bsPrefix","bsCustomPrefix","inline","disabled","isValid","isInvalid","feedback","className","style","title","type","label","children","custom","as"]),P="switch"===v||E,C=P?[o,"custom-control"]:[a,"form-check"];a=w(C[0],C[1]);var O=Object(r.useContext)(M).controlId,D=Object(r.useMemo)((function(){return{controlId:n||O,custom:P}}),[O,P,n]),A=null!=m&&!1!==m&&!x,L=i.a.createElement(N,Object(g.a)({},T,{type:"switch"===v?"checkbox":v,ref:t,isValid:s,isInvalid:c,isStatic:!A,disabled:u,as:S}));return i.a.createElement(M.Provider,{value:D},i.a.createElement("div",{style:h,className:b()(d,a,P&&"custom-"+v,l&&a+"-inline")},x||i.a.createElement(i.a.Fragment,null,L,A&&i.a.createElement(I,{title:p},m),(s||c)&&i.a.createElement(_,{type:s?"valid":"invalid"},f))))}));A.displayName="FormCheck",A.defaultProps={type:"checkbox",inline:!1,disabled:!1,isValid:!1,isInvalid:!1,title:""},A.Input=N,A.Label=I;var L=A,B=i.a.forwardRef((function(e,t){var n=e.id,a=e.bsPrefix,o=e.bsCustomPrefix,l=e.className,u=e.isValid,s=e.isInvalid,c=e.lang,f=e.as,d=void 0===f?"input":f,h=Object(y.a)(e,["id","bsPrefix","bsCustomPrefix","className","isValid","isInvalid","lang","as"]),p=Object(r.useContext)(M),v=p.controlId,m=p.custom?[o,"custom-file-input"]:[a,"form-control-file"];return a=w(m[0],m[1]),i.a.createElement(d,Object(g.a)({},h,{ref:t,id:n||v,type:"file",lang:c,className:b()(l,a,u&&"is-valid",s&&"is-invalid")}))}));B.displayName="FormFileInput";var z=B,R=i.a.forwardRef((function(e,t){var n=e.bsPrefix,a=e.bsCustomPrefix,o=e.className,l=e.htmlFor,u=Object(y.a)(e,["bsPrefix","bsCustomPrefix","className","htmlFor"]),s=Object(r.useContext)(M),c=s.controlId,f=s.custom?[a,"custom-file-label"]:[n,"form-file-label"];return n=w(f[0],f[1]),i.a.createElement("label",Object(g.a)({},u,{ref:t,htmlFor:l||c,className:b()(o,n),"data-browse":u["data-browse"]}))}));R.displayName="FormFileLabel";var F=R,j=i.a.forwardRef((function(e,t){var n=e.id,a=e.bsPrefix,o=e.bsCustomPrefix,l=e.disabled,u=e.isValid,s=e.isInvalid,c=e.feedback,f=e.className,d=e.style,h=e.label,p=e.children,v=e.custom,m=e.lang,x=e["data-browse"],E=e.as,k=void 0===E?"div":E,S=e.inputAs,T=void 0===S?"input":S,P=Object(y.a)(e,["id","bsPrefix","bsCustomPrefix","disabled","isValid","isInvalid","feedback","className","style","label","children","custom","lang","data-browse","as","inputAs"]),C=v?[o,"custom"]:[a,"form-file"];a=w(C[0],C[1]);var O=Object(r.useContext)(M).controlId,N=Object(r.useMemo)((function(){return{controlId:n||O,custom:v}}),[O,v,n]),D=null!=h&&!1!==h&&!p,I=i.a.createElement(z,Object(g.a)({},P,{ref:t,isValid:u,isInvalid:s,disabled:l,as:T,lang:m}));return i.a.createElement(M.Provider,{value:N},i.a.createElement(k,{style:d,className:b()(f,a,v&&"custom-file")},p||i.a.createElement(i.a.Fragment,null,v?i.a.createElement(i.a.Fragment,null,I,D&&i.a.createElement(F,{"data-browse":x},h)):i.a.createElement(i.a.Fragment,null,D&&i.a.createElement(F,null,h),I),(u||s)&&i.a.createElement(_,{type:u?"valid":"invalid"},c))))}));j.displayName="FormFile",j.defaultProps={disabled:!1,isValid:!1,isInvalid:!1},j.Input=z,j.Label=F;var V=j,q=(n(140),i.a.forwardRef((function(e,t){var n,a,o=e.bsPrefix,l=e.bsCustomPrefix,u=e.type,s=e.size,c=e.id,f=e.className,d=e.isValid,h=e.isInvalid,p=e.plaintext,v=e.readOnly,m=e.custom,x=e.as,E=void 0===x?"input":x,k=Object(y.a)(e,["bsPrefix","bsCustomPrefix","type","size","id","className","isValid","isInvalid","plaintext","readOnly","custom","as"]),S=Object(r.useContext)(M).controlId,T=m?[l,"custom"]:[o,"form-control"];if(o=w(T[0],T[1]),p)(a={})[o+"-plaintext"]=!0,n=a;else if("file"===u){var P;(P={})[o+"-file"]=!0,n=P}else if("range"===u){var C;(C={})[o+"-range"]=!0,n=C}else if("select"===E&&m){var _;(_={})[o+"-select"]=!0,_[o+"-select-"+s]=s,n=_}else{var O;(O={})[o]=!0,O[o+"-"+s]=s,n=O}return i.a.createElement(E,Object(g.a)({},k,{type:u,ref:t,readOnly:v,id:c||S,className:b()(f,n,d&&"is-valid",h&&"is-invalid")}))})));q.displayName="FormControl",q.Feedback=_;var W=q,Y=i.a.forwardRef((function(e,t){var n=e.bsPrefix,a=e.className,o=e.children,l=e.controlId,u=e.as,s=void 0===u?"div":u,c=Object(y.a)(e,["bsPrefix","className","children","controlId","as"]);n=w(n,"form-group");var f=Object(r.useMemo)((function(){return{controlId:l}}),[l]);return i.a.createElement(M.Provider,{value:f},i.a.createElement(s,Object(g.a)({},c,{ref:t,className:b()(a,n)}),o))}));Y.displayName="FormGroup";var U=Y,X=["xl","lg","md","sm","xs"],H=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,a=e.as,o=void 0===a?"div":a,l=Object(y.a)(e,["bsPrefix","className","as"]),u=w(n,"col"),s=[],c=[];return X.forEach((function(e){var t,n,r,i=l[e];if(delete l[e],null!=i&&"object"==typeof i){var a=i.span;t=void 0===a||a,n=i.offset,r=i.order}else t=i;var o="xs"!==e?"-"+e:"";null!=t&&s.push(!0===t?""+u+o:""+u+o+"-"+t),null!=r&&c.push("order"+o+"-"+r),null!=n&&c.push("offset"+o+"-"+n)})),s.length||s.push(u),i.a.createElement(o,Object(g.a)({},l,{ref:t,className:b.a.apply(void 0,[r].concat(s,c))}))}));H.displayName="Col";var G=H,K=i.a.forwardRef((function(e,t){var n=e.as,a=void 0===n?"label":n,o=e.bsPrefix,l=e.column,u=e.srOnly,s=e.className,c=e.htmlFor,f=Object(y.a)(e,["as","bsPrefix","column","srOnly","className","htmlFor"]),d=Object(r.useContext)(M).controlId;o=w(o,"form-label");var h="col-form-label";"string"==typeof l&&(h=h+"-"+l);var p=b()(s,o,u&&"sr-only",l&&h);return c=c||d,l?i.a.createElement(G,Object(g.a)({as:"label",className:p,htmlFor:c},f)):i.a.createElement(a,Object(g.a)({ref:t,className:p,htmlFor:c},f))}));K.displayName="FormLabel",K.defaultProps={column:!1,srOnly:!1};var $=K,Q=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,a=e.as,o=void 0===a?"small":a,l=e.muted,u=Object(y.a)(e,["bsPrefix","className","as","muted"]);return n=w(n,"form-text"),i.a.createElement(o,Object(g.a)({},u,{ref:t,className:b()(r,n,l&&"text-muted")}))}));Q.displayName="FormText";var Z=Q,J=i.a.forwardRef((function(e,t){return i.a.createElement(L,Object(g.a)({},e,{ref:t,type:"switch"}))}));J.displayName="Switch",J.Input=L.Input,J.Label=L.Label;var ee=J,te=/-(.)/g;var ne=function(e){return e[0].toUpperCase()+(t=e,t.replace(te,(function(e,t){return t.toUpperCase()}))).slice(1);var t};var re,ie,ae,oe,le,ue,se,ce,fe,de=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.inline,a=e.className,o=e.validated,l=e.as,u=void 0===l?"form":l,s=Object(y.a)(e,["bsPrefix","inline","className","validated","as"]);return n=w(n,"form"),i.a.createElement(u,Object(g.a)({},s,{ref:t,className:b()(a,o&&"was-validated",r&&n+"-inline")}))}));de.displayName="Form",de.defaultProps={inline:!1},de.Row=(re="form-row",oe=(ae=void 0===ie?{}:ie).displayName,le=void 0===oe?ne(re):oe,ue=ae.Component,se=void 0===ue?"div":ue,ce=ae.defaultProps,(fe=i.a.forwardRef((function(e,t){var n=e.className,r=e.bsPrefix,a=e.as,o=void 0===a?se:a,l=Object(y.a)(e,["className","bsPrefix","as"]),u=w(r,re);return i.a.createElement(o,Object(g.a)({ref:t,className:b()(n,u)},l))}))).defaultProps=ce,fe.displayName=le,fe),de.Group=U,de.Control=W,de.Check=L,de.File=V,de.Switch=ee,de.Label=$,de.Text=Z;var he=de;var pe=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r),t.apply(this,r)}}),null)};function ve(e){return!e||"#"===e.trim()}var ge=i.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,a=e.disabled,o=e.onKeyDown,l=Object(y.a)(e,["as","disabled","onKeyDown"]),u=function(e){var t=l.href,n=l.onClick;(a||ve(t))&&e.preventDefault(),a?e.stopPropagation():n&&n(e)};return ve(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),a&&(l.tabIndex=-1,l["aria-disabled"]=!0),i.a.createElement(r,Object(g.a)({ref:t},l,{onClick:u,onKeyDown:pe((function(e){" "===e.key&&(e.preventDefault(),u(e))}),o)}))}));ge.displayName="SafeAnchor";var ye=ge,me=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,a=e.size,o=e.active,l=e.className,u=e.block,s=e.type,c=e.as,f=Object(y.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=w(n,"btn"),h=b()(l,d,o&&"active",d+"-"+r,u&&d+"-block",a&&d+"-"+a);if(f.href)return i.a.createElement(ye,Object(g.a)({},f,{as:c,ref:t,className:b()(h,f.disabled&&"disabled")}));t&&(f.ref=t),c||(f.type=s);var p=c||"button";return i.a.createElement(p,Object(g.a)({},f,{className:h}))}));me.displayName="Button",me.defaultProps={variant:"primary",active:!1,disabled:!1,type:"button"};var be=me;function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){u()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ee=[{name:"Human",value:"human"},{name:"Random",value:"random"},{name:"Alpha beta",value:"alphaBeta"},{name:"Monte Carlo",value:"monteCarlo"}];function ke(e){var t,n,a,o,l,s,f,d,h,p,v=e.initialConfig,g=e.onStartGame,y=Object(r.useState)([].concat(Ee)),m=c()(y,2),b=m[0],x=(m[1],Object(r.useState)(we({},v))),w=c()(x,2),E=w[0],S=w[1],T=function(e,t){var n=Number(event.target.value);S((function(e){return we(we({},e),{},u()({},t,n))}))},P=function(e,t,n){S((function(r){return we(we({},r),{},u()({},e,we(we({},r[e]),{},u()({},n,t))))}))};return i.a.createElement(k,{style:{marginTop:"15px"}},i.a.createElement(he,null,i.a.createElement(he.Group,{controlId:"noVertices"},i.a.createElement(he.Label,null,"Number of vertices"),i.a.createElement(he.Control,{type:"text",min:1,value:E.verticesCount,onChange:function(e){return T(0,"verticesCount")}})),i.a.createElement(he.Group,{controlId:"maxClique"},i.a.createElement(he.Label,null,"Max clique"),i.a.createElement(he.Control,{type:"text",min:1,value:E.cliqueSize,onChange:function(e){return T(0,"cliqueSize")}})),i.a.createElement("h3",null,"Player1"),i.a.createElement(he.Row,null,i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player1Type"},i.a.createElement(he.Label,null,"Strategy type"),i.a.createElement(he.Control,{as:"select",value:E.player1.type,onChange:function(e){return P("player1",e.target.value,"type")}},b.map((function(e){return i.a.createElement("option",{value:e.value,key:e.value},e.name)}))))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player1Depth"},i.a.createElement(he.Label,null,"Tree depth"),i.a.createElement(he.Control,{type:"text",min:0,value:E.player1.depth,disabled:"alphaBeta"!==(null==E||null===(t=E.player1)||void 0===t?void 0:t.type),onChange:function(e){return P("player1",Number(e.target.value),"depth")}}))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player1Timeout"},i.a.createElement(he.Label,null,"Stopping Timeout (in ms)"),i.a.createElement(he.Control,{type:"text",min:0,value:E.player1.timeout,disabled:"monteCarlo"!==(null==E||null===(n=E.player1)||void 0===n?void 0:n.type),onChange:function(e){return P("player1",Number(e.target.value),"timeout")}}))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player1AdvancedStrategy"},i.a.createElement(he.Label,null,"Advanced strategy"),i.a.createElement(he.Check,{type:"checkbox",value:E.player1.advancedStrategy,disabled:"alphaBeta"!==(null==E||null===(a=E.player1)||void 0===a?void 0:a.type),onChange:function(e){return P("player1",Boolean(e.target.value),"advancedStrategy")}})))),i.a.createElement("h3",null,"Player2"),i.a.createElement(he.Row,null,i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player2Type"},i.a.createElement(he.Label,null,"Strategy type"),i.a.createElement(he.Control,{as:"select",value:E.player2.type,onChange:function(e){return P("player2",e.target.value,"type")}},b.map((function(e){return i.a.createElement("option",{value:e.value,key:e.value},e.name)}))))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player2Depth"},i.a.createElement(he.Label,null,"Tree depth"),i.a.createElement(he.Control,{type:"text",min:0,value:E.player2.depth,disabled:"alphaBeta"!==(null==E||null===(o=E.player2)||void 0===o?void 0:o.type),onChange:function(e){return P("player2",Number(e.target.value),"depth")}}))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player2Timeout"},i.a.createElement(he.Label,null,"Stopping Timeout (in ms)"),i.a.createElement(he.Control,{type:"text",min:0,value:E.player2.timeout,disabled:"monteCarlo"!==(null==E||null===(l=E.player2)||void 0===l?void 0:l.type),onChange:function(e){return P("player2",Number(e.target.value),"timeout")}}))),i.a.createElement(G,null,i.a.createElement(he.Group,{controlId:"player2AdvancedStrategy"},i.a.createElement(he.Label,null,"Advanced strategy"),i.a.createElement(he.Check,{type:"checkbox",value:E.player2.advancedStrategy,disabled:"alphaBeta"!==(null==E||null===(s=E.player2)||void 0===s?void 0:s.type),onChange:function(e){return P("player2",e.target.checked,"advancedStrategy")}})))),i.a.createElement(be,{variant:"primary",block:!0,onClick:function(){g(E)},disabled:"human"===(null==E||null===(f=E.player1)||void 0===f?void 0:f.type)&&"human"===(null==E||null===(d=E.player2)||void 0===d?void 0:d.type)},"Start game")),"human"===(null==E||null===(h=E.player1)||void 0===h?void 0:h.type)&&"human"===(null==E||null===(p=E.player2)||void 0===p?void 0:p.type)?i.a.createElement("div",{style:{color:"red"}},"Both players can't be controlled by a human!"):i.a.createElement(i.a.Fragment,null))}var Se=n(45),Te=n.n(Se),Pe=n(143),Ce=n.n(Pe),_e=n(101),Me=n.n(_e),Oe=n(139).Game,Ne=n(68),De=Ne.PLAYER1,Ie=Ne.PLAYER2,Ae=new Oe,Le=-1,Be=De,ze=function(e){return new Promise((function(t,n){setTimeout((function(){t(e.makeMoveInBotVsBot())}),1e3)}))};function Re(e){var t=e.gameConfig,n=e.cancelGame,a=Object(r.useState)([]),o=c()(a,2),l=o[0],u=o[1],s=function(){var e=Me()(Te.a.mark((function e(t){var n,r;return Te.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=Te.a.mark((function e(){var n,r;return Te.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ze(t);case 2:if("number"!=typeof(n=e.sent)){e.next=13;break}if(0!==n){e.next=9;break}return alert("draw"),e.abrupt("return",{v:"draw"});case 9:return alert("bot: ".concat(n)),e.abrupt("return",{v:void 0});case 11:e.next=16;break;case 13:r=Be===De?"red":"blue",u((function(e){return[].concat(d()(e),[{group:"edges",data:{source:n[0],target:n[1],edgeColor:r}}])})),Be=Be===De?Ie:De;case 16:case"end":return e.stop()}}),e)}));case 1:return e.delegateYield(n(),"t0",3);case 3:if(r=e.t0,"object"!==Ce()(r)){e.next=6;break}return e.abrupt("return",r.v);case 6:e.next=1;break;case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),f=function(e){return e===De?"red":"blue"};return Object(r.useEffect)((function(){var e,n,r,i,a;if(t)if(Ae.initGame(t),u((e=t.verticesCount,n=300,r=300,i=200,a=e%2==0?Math.PI/e:.5*Math.PI/e,d()(Array(e).keys()).map((function(t,o){return{group:"nodes",data:{id:o},position:{x:n+i*Math.cos(a+2*Math.PI*o/e),y:r+i*Math.sin(a+2*Math.PI*o/e)}}})))),"human"!==t.player1.type&&"human"!==t.player2.type)console.log("game bot vs bot"),setTimeout(Me()(Te.a.mark((function e(){return Te.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s(Ae);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)}))),10);else if("human"===t.player1.type&&"human"===t.player2.type)console.log("game human vs human");else if("human"===t.player1.type){console.log("game human starts");Ae.startHumanComputerGame()}else{console.log("bot starts");var o=Ae.startHumanComputerGame(),l=f(De);u((function(e){return[].concat(d()(e),[{group:"edges",data:{source:o[0],target:o[1],edgeColor:l}}])})),Be=Ie}}),[t]),i.a.createElement("div",null,i.a.createElement(be,{variant:"danger",block:!0,onClick:function(){return n()}},"Cancel game"),i.a.createElement(G,null,i.a.createElement(v,{elements:l,onEdgeTap:function(){return Le=-1},onNodeTap:function(e){var n=Number(e.target.id());if(-1===Le)return Le=n,!1;if(Le===n||function(e,t,n){return-1!==e.findIndex((function(e){return"edges"===e.group&&(e.data.source==t&&e.data.target==n||e.data.source==n&&e.data.target==t)}))}(l,Le,n))return!1;Ae.canMove()||alert("draw");var r=f(Be);if(u((function(e){return[].concat(d()(e),[{group:"edges",data:{source:Le,target:n,edgeColor:r}}])})),Ae.makeOnlyHumanMove([Le,n]),Ae.checkIfPlayerWon(Be))return setTimeout((function(){return alert("player: ".concat(Be," won"))}),1e3),!0;if(Be=Be===De?Ie:De,Le=-1,"human"!==t.player1.type||"human"!==t.player2.type){if(!Ae.canMove())return alert("draw"),!1;var i=Ae.makeOnlyBotMove(),a=f(Be);if(u((function(e){return[].concat(d()(e),[{group:"edges",data:{source:i[0],target:i[1],edgeColor:a}}])})),Ae.checkIfPlayerWon(Be))return setTimeout((function(){return alert("player: ".concat(Be," won"))}),1e3),!0;Be=Be===De?Ie:De}return!0},onTap:function(e){e.target.id||(Le=-1)}})),i.a.createElement(G,null,function(e){if(e)return e.filter((function(e){return"edges"===e.group})).map((function(e,t){return i.a.createElement("div",{key:t}," from ",e.data.source," to: ",e.data.target," player: ",e.data.edgeColor," ")}))}(l)))}function Fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function je(){var e=Object(r.useState)({verticesCount:10,cliqueSize:4,player1:{type:"random",depth:0,timeout:0,advancedStrategy:!1},player2:{type:"random",depth:0,timeout:0,advancedStrategy:!1}}),t=c()(e,2),n=t[0],a=(t[1],Object(r.useState)({})),o=c()(a,2),l=o[0],s=o[1],f=Object(r.useState)(!1),d=c()(f,2),h=d[0],p=d[1];return h?i.a.createElement(Re,{gameConfig:l,cancelGame:function(){s({}),p(!1)}}):i.a.createElement(ke,{initialConfig:n,onStartGame:function(e){s(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(n),!0).forEach((function(t){u()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e)),p(!0)}})}o.a.render(i.a.createElement(je,null),document.getElementById("index"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,